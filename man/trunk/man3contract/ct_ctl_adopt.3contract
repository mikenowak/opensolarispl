'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.TH ct_ctl_adopt 3CONTRACT "22 Aug 2005" "SunOS 5.11" "Contract Management Library Functions"
.SH NAME
ct_ctl_adopt, ct_ctl_abandon, ct_ctl_newct, ct_ctl_ack, ct_ctl_qack \- common contract control functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-D_LARGEFILE64_SOURCE\fR \fB -lcontract \fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcontract.h>

\fBint\fR \fBct_ctl_adopt\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_abandon\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_newct\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_ack\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_qack\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR, \fBint\fR \fItemplatefd\fR);
.fi

.SH DESCRIPTION
.LP
These functions operate on contract control file descriptors obtained from the \fBcontract\fR(4) file system.
.LP
The \fBct_ctl_adopt()\fR function adopts the contract referenced by the file descriptor \fIfd\fR. After a successful call to \fBct_ctl_adopt()\fR, the contract is owned by the calling process and any events in that contract's event queue are appended to
the process's bundle of the appropriate type.
.LP
The \fBct_ctl_abandon()\fR function abandons the contract referenced by the file descriptor \fIfd\fR. After a successful call to \fBct_ctl_abandon()\fR the process no longer owns the contract, any events sent by that contract are automatically removed from
the process's bundle, and any critical events on the contract's event queue are automatically acknowledged. Depending on its type and terms, the contract will either be orphaned or destroyed.
.LP
The \fBct_ctl_ack()\fR function acknowledges the critical event specified by\fIevid\fR. If the event corresponds to an exit negotiation, \fBct_ctl_ack()\fR also indicates that the caller is prepared for the system to proceed with the referenced reconfiguration.
.LP
The \fBct_ctl_qack()\fR function requests a new quantum of time for the negotiation specified by the event ID \fIevid\fR.
.LP
The \fBct_ctl_newct()\fR function instructs the contract specified by the file descriptor \fIfd\fR that when the current exit negotiation completes, another contract with the terms provided by the template specified by \fItemplatefd\fR should be automatically
written.
.SH RETURN VALUES
.LP
Upon successful completion, \fBct_ctl_adopt()\fR, \fBct_ctl_abandon()\fR, \fBct_ctl_newct()\fR, \fBct_ctl_ack()\fR, and \fBct_ctl_qack()\fR return 0. Otherwise, they return a non-zero error value.
.SH ERRORS
.LP
The \fBct_ctl_adopt()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEBUSY\fR\fR
.ad
.RS 10n
.rt  
The contract is in the owned state.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The contract was not inherited by the caller's process contract or was created by a process in a different zone.
.RE

.LP
The \fBct_ctl_abandon()\fR, \fBct_ctl_newct()\fR, \fBct_ctl_ack()\fR, and \fBct_ctl_qack()\fR functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEBUSY\fR\fR
.ad
.RS 9n
.rt  
The contract does not belong to the calling process.
.RE

.LP
The \fBct_ctl_newct()\fR and \fBct_ctl_qack()\fR functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBESRCH\fR\fR
.ad
.RS 9n
.rt  
The event ID specified by \fIevid\fR does not correspond to an unacknowledged negotiation event.
.RE

.LP
The \fBct_ctl_newct()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 10n
.rt  
The file descriptor specified by \fIfd\fR was not a valid template file descriptor.
.RE

.LP
The \fBct_ctl_ack()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBESRCH\fR\fR
.ad
.RS 9n
.rt  
The event ID specified by \fIevid\fR does not correspond to an unacknowledged critical event.
.RE

.LP
The \fBct_ctl_qack()\fR function will fail if:
.sp
.ne 2
.mk
.na
\fB\fBERANGE\fR\fR
.ad
.RS 10n
.rt  
The maximum amount of time has been requested.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.LP
\fBlibcontract\fR(3LIB), \fBcontract\fR(4), \fBattributes\fR(5), \fBlfcompile\fR(5)
