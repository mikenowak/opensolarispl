'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"  Copyright (c) 1980 Regents of the University of California.  All rights reserved.  The Berkeley software License Agreement specifies the terms and conditions for redistribution.
.\"   Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.TH dbm 3UCB "20 Feb 1997" "SunOS 5.11" "SunOS/BSD Compatibility Library Functions"
.SH NAME
dbm, dbminit, dbmclose, fetch, store, delete, firstkey, nextkey \- data base subroutines
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/cc\fR [ \fIflag\fR ... ] \fIfile\fR ... \fB-ldbm\fR
#include <dbm.h>
typedef struct {
    char *dptr;
    int dsize;
}datum;

\fBint\fR \fBdbminit\fR(\fB\fR\fIfile\fRchar *\fIfile\fR;
.fi

.LP
.nf
\fBint\fR \fBdbmclose\fR(\fB\fR\fI\fR);
.fi

.LP
.nf
\fBdatum\fR \fBfetch\fR(\fB\fR \fIkey\fRdatum \fIkey\fR;
.fi

.LP
.nf
\fBint\fR \fBstore\fR(\fB\fR \fIkey\fR, \fB\fR\fIdat\fRdatum \fIkey\fR, \fIdat\fR;
.fi

.LP
.nf
\fBint\fR \fBdelete\fR(\fB\fR\fIkey\fRdatum \fIkey\fR;
datum firstkey()
.fi

.LP
.nf
\fBdatum\fR \fBnextkey\fR(\fB\fR\fIkey\fRdatum \fIkey\fR;
.fi

.SH DESCRIPTION
.LP
The \fBdbm()\fR library has been superseded by \fBndbm\fR (see \fBndbm\fR(3C)).
.LP
These functions maintain key/content pairs in a data base. The functions will handle very large (a billion blocks) databases and will access a keyed item in one or two file system accesses.
.LP
\fIkey/dat\fR and their content are described by the \fBdatum\fR typedef. A \fBdatum\fR specifies a string of \fIdsize\fR bytes
pointed to by \fIdptr\fR. Arbitrary binary data, as well as normal ASCII strings, are allowed. The data base is stored in two files. One file is a directory containing a bit map and
has \fB\&.dir\fR as its suffix. The second file contains all data and has \fB\&.pag\fR as its suffix.
.LP
Before a database can be accessed, it must be opened by \fBdbminit()\fR. At the time of this call, the files \fIfile\fR\fB\&.dir\fR and \fIfile\fR\fB\&.pag\fR must exist. An empty database is created by creating zero-length \fB\&.dir\fR and \fB\&.pag\fR files.
.LP
A database may be closed by calling \fBdbmclose()\fR. You must close a database before opening a new one.
.LP
Once open, the data stored under a key is accessed by \fBfetch()\fR and data is placed under a key by \fBstore\fR. A key (and its associated contents) is deleted by \fBdelete()\fR. A linear pass through all keys in a database may be made, in an (apparently) random order, by use of \fBfirstkey()\fR and \fBnextkey()\fR. \fBfirstkey()\fR will return the first key in the database. With any key \fBnextkey()\fR will return the next key in the database. This code will traverse the data base:
.sp
.in +2
.nf
for (key = firstkey; key.dptr != NULL; key = nextkey(key))
.fi
.in -2

.SH RETURN VALUES
.LP
All functions that return an \fBint\fR indicate errors with negative values. A zero return indicates no error. Routines that return a \fBdatum\fR indicate errors with a \fINULL\fR (0) \fIdptr\fR.
.SH SEE ALSO
.LP
\fBar\fR(1), \fBcat\fR(1), \fBcp\fR(1), \fBtar\fR(1), \fBndbm\fR(3C)
.SH NOTES
.LP
Use of these interfaces should be restricted to only applications written on BSD platforms.  Use of these interfaces with any of the system libraries or in multi-thread applications is unsupported.
.LP
The \fB\&.pag\fR file will contain holes so that its apparent size may be larger than its actual content. Older versions of the UNIX operating system may create real file blocks for these
holes when touched. These files cannot be copied by normal means ( \fBcp\fR(1), \fBcat\fR(1), \fBtar\fR(1), \fBar\fR(1))
without filling in the holes.
.LP
\fIdptr\fR pointers returned by these subroutines point into static storage that is changed by subsequent calls.
.LP
The sum of the sizes of a key/content pair must not exceed the internal block size (currently 1024 bytes). Moreover all key/content pairs that hash together must fit on a single block. \fBstore\fR will return an error in the event that a disk block fills with inseparable data.
.LP
\fBdelete()\fR does not physically reclaim file space, although it does make it available for reuse.
.LP
The order of keys presented by \fBfirstkey()\fR and \fBnextkey()\fR depends on a hashing function, not on anything interesting.
.LP
There are no interlocks and no reliable cache flushing; thus concurrent updating and reading is risky.
.LP
The database files (\fIfile\fR\fB\&.dir\fR and \fIfile\fR\fB\&.pag\fR) are binary and are architecture-specific (for example, they depend on
the architecture's byte order.)  These files are not guaranteed to be portable across architectures.
