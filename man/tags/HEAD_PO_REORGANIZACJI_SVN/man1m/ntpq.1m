'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\" Copyright (c) David L. Mills 1992, 1993, 1994, 1995, 1996, 1997
.\" Portions Copyright (c) 1998 Sun Microsystems, Inc. All Rights Reserved.
.TH ntpq 1M "12 July 2004" "SunOS 5.11" "System Administration Commands"
.SH NAME
ntpq \- standard Network Time Protocol query program
.SH SYNOPSIS
.LP
.nf
\fB/usr/sbin/ntpq\fR [\fB-inp\fR] [\fB-c\fR \fIcommand\fR] [\fIhost\fR] [...]
.fi

.SH DESCRIPTION
.LP
\fBntpq\fR queries \fBNTP\fR servers which implement the recommended \fBNTP\fR mode 6 control message format, about current state. It can also request changes in that state. The program can be run in interactive mode; or it can be controlled using command
line arguments. Requests to read and write arbitrary variables can be assembled, with raw and pretty\fB-printed\fR output options available. By sending multiple queries to the server, \fBntpq\fR can also obtain and print a list of peers in a common format.
.LP
If one or more request options are included on the command line, \fBntpq\fR sends each of the requests to \fBNTP\fR servers running on each of the hosts given as command line arguments. By default, \fBntpq\fR sends its requests to \fBlocalhost\fR,
if hosts are not included on the command line. If no request options are given, \fBntpq\fR attempts to read commands from the standard input and execute them on the \fBNTP\fR server running on the first host given on the command line. Again, \fBntpq\fR defaults
to \fBlocalhost\fR if no other host is specified.
.LP
\fBntpq\fR uses \fBNTP\fR mode 6 packets to communicate with an \fBNTP\fR server. Thus, it can be used to query any compatible server on the network that permits queries. Since \fBNTP\fR is a \fBUDP\fR protocol, this communication
will be somewhat unreliable, especially over large distances. \fBntpq\fR makes one attempt to retransmit requests; requests timeout if the remote host is not heard from within a suitable period.
.SH OPTIONS
.LP
Command line options are described below. Specifying a command line option other than \fB-i\fR or \fB-n\fR causes the specified query (queries) to be sent, immediately to the indicated host(s). Otherwise, \fBntpq\fR attempts to read interactive format commands
from standard input.
.sp
.ne 2
.mk
.na
\fB\fB-c\fR\fR
.ad
.RS 6n
.rt  
Interpret the next argument as an interactive format command and add it to the list of commands to be executed on the specified host(s). Multiple \fB-c\fR options may be given.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR\fR
.ad
.RS 6n
.rt  
Operate in interactive mode; write prompts to standard output and read commands from standard input.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 6n
.rt  
Output all host addresses in dotted-quad numeric format rather than converting them to canonical host names.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.RS 6n
.rt  
Print a list of the peers known to the server as well as a summary of their state. This is equivalent to the \fBpeers\fR interactive command. See \fBUSAGE\fR below.
.RE

.SH USAGE
.LP
Interactive format commands consist of a keyword followed by up to four arguments. Only enough characters of the full keyword to uniquely identify the command need be typed. Normally, the output of a command is sent to standard output; but this output may be written to a file by appending
a `>', followed by a file name, to the command line.
.SS "Interactive Commands"
.LP
A number of interactive format commands are executed entirely within the \fBntpq\fR program itself. They do not result in \fBNTP\fR mode 6 requests being sent to a server. If no request options are included on the command line, and if the standard input is a terminal
device, \fBntpq\fR prompts for these commands. The interactive commands are described below:
.sp
.ne 2
.mk
.na
\fB\fB? [\fR\fIcommand_keyword ]\fR\fR
.ad
.sp .6
.RS 4n
A `?' by itself prints a list of all the command keywords known to the current version of \fBntpq\fR. A `?' followed by a command keyword prints function and usage information about the command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBtimeout\fR\fImilliseconds\fR\fR
.ad
.sp .6
.RS 4n
Specifies a time out period for responses to server queries. The default is about 5000 milliseconds. Since \fBntpq\fR retries each query once after a time out, the total waiting time for a time out is twice the time out value that is set.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdelay\fR\fImilliseconds\fR\fR
.ad
.sp .6
.RS 4n
Specifies a time interval to be added to timestamps included in requests which require authentication. This command is used to enable (unreliable) server reconfiguration over long delay network paths or between machines whose clocks are unsynchronized. Currently, the server does
not require time stamps in authenticated requests. Thus, this command may be obsolete.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhost\fR\fBhostname\fR\fR
.ad
.sp .6
.RS 4n
Set the name of the host to which future queries are to be sent. \fIHostname\fR may be either a host name or a numeric address.
.RE

.sp
.ne 2
.mk
.na
\fB\fBkeyid\fR \fI#\fR\fR
.ad
.sp .6
.RS 4n
Specify of a key number to be used to authenticate configuration requests. This number must correspond to a key number the server has been configured to use for this purpose.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpasswd\fR\fR
.ad
.sp .6
.RS 4n
Allow the user to specify a password at the command line. This will be used to authenticate configuration requests. If an authenticating key has been specified (see \fBkeyid\fR above), this password must correspond to this key. \fBntpq\fR does not echo
the password as it is typed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhostnames yes\||\|no\fR\fR
.ad
.sp .6
.RS 4n
If "yes" is specified, host names are printed in information displays. If "no" is given, numeric addresses are printed instead. The default is "yes" unless modified using the command line \fB-n\fR switch.
.RE

.sp
.ne 2
.mk
.na
\fB\fBraw\fR\fR
.ad
.sp .6
.RS 4n
Print all output from query commands exactly as it is received from the remote server. The only formatting/filtering done on the data is to transform non- \fBASCII\fR data into printable form.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcooked\fR\fR
.ad
.sp .6
.RS 4n
Causes output from query commands to be "cooked". The values of variables recognized by the server are reformatted, so that they can be more easily read. Variables which \fBntpq\fR thinks should have a decodable value, but do not, are marked with a trailing
`?'.
.RE

.sp
.ne 2
.mk
.na
\fB\fBntpversion\fR[ \fB1\||\|2\||\|3\fR ]\fR
.ad
.sp .6
.RS 4n
Sets the \fBNTP\fR version number which \fBntpq\fR claims in packets (defaults is 3). Note that mode 6 control messages (and modes, for that matter) did not exist in \fBNTP\fR version 1. There appear to be no servers left which demand version
1.
.RE

.sp
.ne 2
.mk
.na
\fB\fBauthenticate\fR[ \fByes\||\|no\fR ]\fR
.ad
.sp .6
.RS 4n
The command \fBauthenticate\fR \fByes\fR instructs \fBntpq\fR to send authentication with all requests it makes. Normally \fBntpq\fR does not authenticate requests unless they are write requests. Authenticated requests cause some
servers to handle requests slightly differently, and can occasionally cause a slowed response if you turn authentication on before doing a peer display. \fBaddvars\fR \fIvariable_name\fR[=\fIvalue\fR]\fI \fR[ ,.\|.\|.
] \fBrmvars\fR \fIvariable_name\fR [ ,.\|.\|. ] \fBclearvars\fR
.sp
The data carried by \fBNTP\fR mode 6 messages consists of a list of items of the form 
.sp
.in +2
.nf
\fIvariable_name\fR=\fIvalue\fR
.fi
.in -2

where the "=\fIvalue\fR" is ignored, and can be omitted, in requests to the server to read variables. \fBntpq\fR maintains an internal list in which data to be included in control messages can be assembled, and sent. This is accomplished with
the \fBreadlist\fR and \fBwritelist\fR commands described below. The \fBaddvars\fR command allows variables and their optional values to be added to the list. If more than one variable is to be added, the list should be comma-separated, and it should not
contain white space. The \fBrmvars\fR command can be used to remove individual variables from the list; the \fBclearlist\fR command removes all variables from the list.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdebug\fR[ \fBmore\||\|less\||\|off\fR ]\fR
.ad
.sp .6
.RS 4n
Turns internal query program debugging on and off.
.RE

.sp
.ne 2
.mk
.na
\fB\fBquit\fR\fR
.ad
.sp .6
.RS 4n
Exit \fBntpq\fR.
.RE

.SS "Control Message Commands"
.LP
Each peer known to an  \fBNTP\fR server has a 16 bit integer \fIassociation\fR \fIidentifier\fR assigned to it. \fBNTP\fR control messages which carry peer variables must identify the peer that the values correspond to,
by including its association ID. An association ID of 0 is special. It indicates the variables are system variables, whose names are drawn from a separate name space.
.LP
Control message commands send one or more \fBNTP\fR mode 6 messages to the server, and cause the data returned to be printed in some format. Most commands currently implemented send a single message and expect a single response. The current exceptions are the \fBpeers\fR \fBmreadlist\fR and \fBmreadvar\fR commands. The \fBpeers\fR command sends a preprogrammed series of messages to obtain the data it needs. The \fBmreadlist\fR and \fBmreadvar\fR commands, iterate over a range of associations.
.LP
Control message commands are described below:
.sp
.ne 2
.mk
.na
\fB\fBassociations\fR\fR
.ad
.sp .6
.RS 4n
Obtains and prints a list of association identifiers and peer statuses for in-spec peers of the server being queried. The list is printed in columns. The first of these is an index that numbers the associations from 1, for internal use. The second column contains the actual association
identifier returned by the server and the third the status word for the peer. This is followed by a number of columns containing data decoded from the status word. Note that the data returned by the \fBassociations\fR command is cached internally in \fBntpq\fR. The index
is then of use when dealing with "dumb" servers which use association identifiers that are hard for humans to type. For any subsequent commands which require an association identifier as an argument, the identifier can be specified by using the form, \fI&index.\fR Here \fIindex\fR is taken from the previous list.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlassociations\fR\fR
.ad
.sp .6
.RS 4n
Obtains and prints a list of association identifiers and peer statuses for all associations for which the server is maintaining \fIstate\fR. This command differs from the \fBassociations\fR command only for servers which retain \fIstate\fR for
out-of-spec client associations. Such associations are normally omitted from the display when the \fBassociations\fR command is used, but are included in the output of \fBlassociations\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpassociations\fR\fR
.ad
.sp .6
.RS 4n
Prints association data concerning in-spec peers from the internally cached list of associations. This command performs identically to the \fBassociations\fR command except that it displays the internally stored data rather than making a new query.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlpassociations\fR\fR
.ad
.sp .6
.RS 4n
Print data for all associations, including out-of-spec client associations, from the internally cached list of associations. This command differs from  \fBpassociations\fR only when dealing with servers which retain  \fIstate\fR for out-of-spec
client associations.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpstatus\fR\fIassocID\fR\fR
.ad
.sp .6
.RS 4n
Sends a read status request to the server for the given association. The names and values of the peer variables returned will be printed. Note that the status word from the header is displayed preceding the variables, both in hexadecimal and in pigeon English.
.RE

.sp
.ne 2
.mk
.na
\fB\fBreadvar\fR [ \fIassoc\fR ] [ \fIvariable_name\fR[=\fIvalue\fR] [ ,.\|.\|. ]\|]\fR
.ad
.sp .6
.RS 4n
Requests that the values of the specified variables be returned by the server by sending a read variables request. If the association \fBID\fR is omitted or is given as zero the variables are system variables, otherwise they are peer variables and the values returned
will be those of the corresponding peer. Omitting the variable list will send a request with no data which should induce the server to return a default display.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrv\fR [ \fIassocID\fR ] [ \fIvariable_name\fR[=\fIvalue\fR] [ ,.\|.\|. ]\|]\fR
.ad
.sp .6
.RS 4n
An easy-to-type short form for the \fBreadvar\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBwritevar\fR \fIassocID variable_name\fR=\fIvalue\fR [ ,.\|.\|. ]\fR
.ad
.sp .6
.RS 4n
Like the \fBreadvar\fR request, except the specified variables are written instead of read.
.RE

.sp
.ne 2
.mk
.na
\fB\fBreadlist\fR [ \fIassocID\fR ]\fR
.ad
.sp .6
.RS 4n
Requests that the values of the variables in the internal variable list be returned by the server. If the association \fBID\fR is omitted or is 0 the variables are assumed to be system variables. Otherwise they are treated as peer variables. If the internal variable
list is empty a request is sent without data, which should induce the remote server to return a default display.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrl\fR [ \fIassocID\fR ]\fR
.ad
.sp .6
.RS 4n
An easy-to-type short form of the \fBreadlist\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBwritelist\fR [ \fIassocID\fR ]\fR
.ad
.sp .6
.RS 4n
Like the \fBreadlist\fR request, except the internal list variables are written instead of read.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmreadvar\fR \fIassocID\fR \fIassocID\fR [ \fIvariable_name\fR[=\fIvalue\fR] [ ,.\|.\|. ]\|]\fR
.ad
.sp .6
.RS 4n
Like the \fBreadvar\fR command except the query is done for each of a range of (nonzero) association IDs. This range is determined from the association list cached by the most recent \fBassociations\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmrv\fR \fIassocID\fR \fIassocID\fR [ \fIvariable_name\fR[=\fIvalue\fR] [ ,.\|.\|. ]\|]\fR
.ad
.sp .6
.RS 4n
An easy-to-type short form of the \fBmreadvar\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmreadlist\fR\fIassocID assocID\fR\fR
.ad
.sp .6
.RS 4n
Like the \fBreadlist\fR command except the query is done for each of a range of (nonzero) association IDs. This range is determined from the association list cached by the most recent \fBassociations\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBmrl\fR\fIassocID assocID\fR\fR
.ad
.sp .6
.RS 4n
An easy-to-type short form of the \fBmreadlist\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBclockvar\fR [ \fIassocID\fR ] [ \fIvariable_name\fR[=\fIvalue\fR] [ ,.\|.\|. ]\|]\fR
.ad
.sp .6
.RS 4n
Requests that a list of the server's clock variables be sent. Servers which have a radio clock or other external synchronization respond positively to this. If the association identifier is omitted or zero the request is for the variables of the "system clock". This
request generally gets a positive response from all servers with a clock. Some servers may treat clocks as pseudo-peers and, hence, can possibly have more than one clock connected at once. For these servers, referencing the appropriate peer association \fBID\fR shows the variables
of a particular clock. Omitting the variable list causes the server to return a default variable display.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcv\fR [ \fIassocID\fR ] [ \fIvariable_name\fR[=\fIvalue\fR] [ ,.\|.\|. ]\|]\fR
.ad
.sp .6
.RS 4n
An easy-to-type short form of the \fBclockvar\fR command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpeers\fR\fR
.ad
.sp .6
.RS 4n
Obtains a list of in-spec peers of the server, along with a summary of each peer's state. Summary information includes:
.RS +4
.TP
.ie t \(bu
.el o
The address of the remote peer
.RE
.RS +4
.TP
.ie t \(bu
.el o
The reference \fBID\fR (0.0.0.0 if the ref \fBID\fR is unknown)
.RE
.RS +4
.TP
.ie t \(bu
.el o
The stratum of the remote peer
.RE
.RS +4
.TP
.ie t \(bu
.el o
The type of the peer (local, unicast, multicast or broadcast) when the last packet was received
.RE
.RS +4
.TP
.ie t \(bu
.el o
The polling interval in seconds
.RE
.RS +4
.TP
.ie t \(bu
.el o
The reachability register, in octal
.RE
.RS +4
.TP
.ie t \(bu
.el o
The current estimated delay offset and dispersion of the peer, all in milliseconds.
.RE
The character in the left margin indicates the fate of this peer in the clock selection process. The codes mean: 
.sp
.ne 2
.mk
.na
\fB\fBSPACE\fR\fR
.ad
.RS 9n
.rt  
Discarded due to high stratum and/or failed sanity checks.
.RE

.sp
.ne 2
.mk
.na
\fB\fBx\fR\fR
.ad
.RS 9n
.rt  
Designated falsticker by the intersection algorithm.
.RE

.sp
.ne 2
.mk
.na
\fB\fB\&.\fR\fR
.ad
.RS 9n
.rt  
Culled from the end of the candidate list.
.RE

.sp
.ne 2
.mk
.na
\fB\fB\(mi\fR\fR
.ad
.RS 9n
.rt  
Discarded by the clustering algorithm.
.RE

.sp
.ne 2
.mk
.na
\fB\fB+\fR\fR
.ad
.RS 9n
.rt  
Included in the final selection set.
.RE

.sp
.ne 2
.mk
.na
\fB\fB#\fR\fR
.ad
.RS 9n
.rt  
Selected for synchronization; but distance exceeds maximum.
.RE

.sp
.ne 2
.mk
.na
\fB\fB*\fR\fR
.ad
.RS 9n
.rt  
Selected for synchronization.
.RE

.sp
.ne 2
.mk
.na
\fB\fBo\fR\fR
.ad
.RS 9n
.rt  
Selected for synchronization, pps signal in use.
.RE

Since the \fBpeers\fR command depends on the ability to parse the values in the responses it gets, it may fail to work from time to time with servers which poorly control the data formats.
.sp
The contents of the host field may be given in one of four forms. It may be a host name, an IP address, a reference clock implementation name with its parameter or, \fBREFCLK\fR(\fIimplementation number\fR, \fIparameter\fR). On "hostnames
no" only IP\(miaddresses will be displayed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlpeers\fR\fR
.ad
.sp .6
.RS 4n
Like \fBpeers\fR, except a summary of all associations for which the server is maintaining state is printed. This can produce a much longer list of peers from inadequate servers.
.RE

.sp
.ne 2
.mk
.na
\fB\fBopeers\fR\fR
.ad
.sp .6
.RS 4n
An old form of the \fBpeers\fR command with the reference ID replaced by the local interface address.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWntpu
.TE

.SH SEE ALSO
.LP
\fBattributes\fR(5)
.SH BUGS
.LP
The \fBpeers\fR command is non-atomic. It may occasionally result in spurious error messages about invalid associations occurring and terminating the command.
.LP
The timeout value is a fixed constant. As a result, it often waits a long time to timeout, since the fixed value assumes sort of a worst case. The program should improve the time out estimate as it sends queries to a particular host; but it does not.
