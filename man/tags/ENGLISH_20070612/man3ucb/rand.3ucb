'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"  Copyright (c) 1988 Sun Microsystems, Inc. - All Rights Reserved.
.TH rand 3UCB "12 Feb 1993" "SunOS 5.11" "SunOS/BSD Compatibility Library Functions"
.SH NAME
rand, srand \- simple random number generator
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/cc\fR[ \fIflag\fR ... ] \fIfile\fR ...
int \fBrand()\fR

\fBint\fR \fBsrand\fR(\fB\fR \fIseed\fRunsigned \fIseed\fR;
.fi

.SH DESCRIPTION
.LP
\fBrand()\fR uses a multiplicative congruential random number generator with period 2^32 to return successive pseudo-random numbers in the range from 0 to "2^31 \(mi\|1."
.LP
\fBsrand()\fR can be called at any time to reset the random-number generator to a random starting point. The generator is initially seeded with a value of 1.
.SH SEE ALSO
.LP
\fBdrand48\fR(3C), \fBrand\fR(3C), \fBrandom\fR(3C)
.SH NOTES
.LP
Use of these interfaces should be restricted to only applications written on BSD platforms.  Use of these interfaces with any of the system libraries or in multi-thread applications is unsupported.
.LP
The spectral properties of \fBrand()\fR leave a great deal to be desired. \fBdrand48\fR(3C) and \fBrandom\fR(3C) provide
much better, though more elaborate, random-number generators.
.LP
The low bits of the numbers generated are not very random; use the middle bits. In particular the lowest bit alternates between 0 and 1.
