'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.TH vatan_ 3MVEC "19 Nov 2003" "SunOS 5.11" "Vector Math Library Functions"
.SH NAME
vatan_, vatanf_, vatan2_, vatan2f_, vcos_, vcosf_, vexp_, vexpf_, vhypot_, vhypotf_, vlog_, vlogf_, vpow_, vpowf_, vrhypot_, vrhypotf_, vrsqrt_, vrsqrtf_, vsin_, vsinf_, vsincos_, vsincosf_, vsqrt_, vsqrtf_ \- vector versions of common mathematical functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lmvec\fR [ \fIlibrary\fR\&.\|.\|. ]

\fBvoid\fR \fBvatan_\fR(\fBint *\fR\fIn\fR,\fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvatanf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvatan2_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR,
    \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR, \fBdouble * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvatan2f_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR,
    \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR, \fBfloat * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvcos_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvcosf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvexp_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvexpf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvhypot_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR, \fBdouble * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvhypotf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR, \fBfloat * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvlog_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvlogf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvpow_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR, \fBdouble * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvpowf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR, \fBfloat * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvrhypot_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR, \fBdouble * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvrhypotf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR, \fBfloat * restrict\fR \fIz\fR,
    \fBint *\fR\fIstridez\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvrsqrt_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvrsqrtf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvsin_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvsinf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvsincos_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIs\fR, \fBint *\fR\fIstrides\fR, \fBdouble * restrict\fR \fIc\fR,
    \fBint *\fR\fIstridec\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvsincosf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIs\fR, \fBint *\fR\fIstrides\fR, \fBfloat * restrict\fR \fIc\fR,
    \fBint *\fR\fIstridec\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvsqrt_\fR(\fBint *\fR\fIn\fR, \fBdouble * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBdouble * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBvsqrtf_\fR(\fBint *\fR\fIn\fR, \fBfloat * restrict\fR \fIx\fR, \fBint *\fR\fIstridex\fR,
    \fBfloat * restrict\fR \fIy\fR, \fBint *\fR\fIstridey\fR);
.fi

.SH DESCRIPTION
.LP
These functions evaluate common mathematical functions for an entire vector of values at once. The first parameter specifies the number of function values to compute and must be positive. Subsequent parameters specify vectors holding the argument and result values. Each vector is specified
by a pointer to its first element and a stride, which is the increment between successive elements.
.LP
The call \fBvatan_(n, x, sx, y, sy)\fR sets\fBy[i * (*sy)] = atan(x[i * (*sx)])\fR for each \fBi = 0, 1, ..., *n - 1\fR. Analogous descriptions apply to \fBvcos_()\fR, \fBvexp_()\fR, \fBvlog_()\fR, \fBvsin_()\fR,
and \fBvsqrt_()\fR.
.LP
The call \fBvatan2_(n, y, sy, x, sx, z, sz)\fR sets \fBz[i * (*sz)] = atan2(y[i * (*sy)], x[i * (*sx)])\fR. Analogous descriptions apply to \fBvhypot_()\fR and \fBvpow_()\fR.
.LP
The call \fBvrhypot_(n, x, sx, y, sy, z, sz)\fR sets \fBz[i * (*sz)] = 1 / hypot(x[i * (*sx)], y[i * (*sy)])\fR.
.LP
The call \fBvrsqrt_(n, x, sx, y, sy)\fR sets \fBy[i * (*sy)] = 1 / sqrt(x[i * (*sx)])\fR.
.LP
The call \fBvsincos_(n, x, sx, s, ss, c, sc)\fR simultaneously sets \fBs[i * (*ss)] = sin(x[i * (*sx)]) and c[i * (*sc)] = cos(x[i * (*sx)])\fR.
.LP
The \fBvatanf_()\fR, \fBvatan2f_()\fR, \fBvcosf_()\fR, \fBvexpf_()\fR, \fBvhypotf_()\fR, \fBvlogf_()\fR, \fBvpowf_()\fR, \fBvrhypotf_()\fR, \fBvrsqrtf_()\fR, \fBvsinf_()\fR, \fBvsincosf_()\fR, and \fBvsqrtf_()\fR functions are single precision versions of the double precision functions listed above.
.LP
For each function, the element count *\fIn\fR must be positive. The strides for the argument and result arrays can be arbitrary integers, but the arrays themselves must not be the same or overlap. For example, the results of the code fragment
.sp
.in +2
.nf
double  x[100];
int     n = 100, s = 1;

vexp_(&n, x, &s, x, &s);
.fi
.in -2

.LP
are undefined. A stride can be zero, which effectively collapses the entire vector into a single element. For example, one can use \fBvpow_()\fR to compute values of \fBpow(x[i], y)\fR for a fixed value of \fIy\fR by specifying *\fIstridey\fR =
0.  A stride can also be negative, but the corresponding pointer must still point to the first element of the vector to be used; if the stride is negative, this will be the highest-addressed element in memory.  (This convention differs from the Level 1 BLAS, in which array parameters always refer
to the lowest-addressed element in memory even when negative increments are used.)
.SH ERRORS
.LP
The vector functions listed above handle exceptional cases in the same way as the corresponding scalar functions in \fBlibm\fR(3LIB) when C99 \fBMATHERREXCEPT\fR conventions are in effect, namely by raising floating point exceptions and, if those exceptions are not trapped, delivering the best available result, which can be a finite number, infinity, or Not-a-Number (NaN). Some vector functions can raise the inexact exception even when all elements
of the argument array are such that the numerical results are exact.
.SH USAGE
.LP
The vector functions assume that the round-to-nearest floating point rounding mode is in effect. If a program changes the rounding mode from the default round-to-nearest, it must reestablish that mode before calling any of these functions. The result of calling a vector function with a rounding
mode other than round-to-nearest in effect is undefined.
.LP
The vector functions are not guaranteed to deliver results that are identical to the results of the corresponding scalar functions given the same arguments. In particular, the \fBvsqrt_()\fR and \fBvsqrtf_()\fR functions do not always deliver correctly rounded results.
However, all of the functions listed above deliver results that are accurate to within one unit in the last place.
.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.LP
\fBatan\fR(3M), \fBatan2\fR(3M), \fBcos\fR(3M), \fBexp\fR(3M), \fBhypot\fR(3M), \fBlibm\fR(3LIB), \fBlog\fR(3M), \fBpow\fR(3M), \fBsin\fR(3M), \fBsqrt\fR(3M), \fBattributes\fR(5)
