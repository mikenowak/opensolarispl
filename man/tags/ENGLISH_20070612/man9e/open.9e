'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"  Copyright 2003 AT&T
.\"  Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved
.TH open 9E "30 May 2003" "SunOS 5.11" "Driver Entry Points"
.SH NAME
open \- gain access to a device
.SH SYNOPSIS
.SS "Block and Character"
.LP
.nf
#include <sys/types.h>
#include <sys/file.h>
#include <sys/errno.h>
#include <sys/open.h>
#include <sys/cred.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fR\fBopen\fR(\fBdev_t *\fR\fIdevp\fR, \fBint\fR \fIflag\fR, \fBint\fR \fIotyp\fR, 
    \fBcred_t *\fR\fIcred_p\fR);
.fi

.SS "STREAMS"
.LP
.nf
#include <sys/file.h>
#include <sys/stream.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fR\fBopen\fR(\fBqueue_t *\fR\fIq\fR, \fBdev_t *\fR\fIdevp\fR, \fBint\fR \fIoflag\fR, \fBint\fR \fIsflag\fR, 
    \fBcred_t *\fR\fIcred_p\fR);
.fi

.SH INTERFACE LEVEL
.LP
Architecture independent level 1 (DDI/DKI). This entry point is required, but it can be \fBnulldev\fR(9F) 
.SH PARAMETERS
.SS "Block and Character"
.sp
.ne 2
.mk
.na
\fB\fIdevp\fR \fR
.ad
.RS 11n
.rt  
Pointer to a device number. 
.RE

.sp
.ne 2
.mk
.na
\fB\fIflag\fR \fR
.ad
.RS 11n
.rt  
A bit field passed from the user program  \fBopen\fR(2) system call that instructs the driver on how to open the file.   Valid settings are: 
.sp
.ne 2
.mk
.na
\fB\fBFEXCL\fR \fR
.ad
.RS 12n
.rt  
Open the device with exclusive access; fail all other attempts to open the device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBFNDELAY\fR \fR
.ad
.RS 12n
.rt  
Open the device and return immediately. Do not block the open even if something is wrong.
.RE

.sp
.ne 2
.mk
.na
\fB\fBFREAD\fR \fR
.ad
.RS 12n
.rt  
Open the device with read-only permission (if \fBOR\fRed with  \fBFWRITE\fR, then allow both read and write access)
.RE

.sp
.ne 2
.mk
.na
\fB\fBFWRITE\fR \fR
.ad
.RS 12n
.rt  
Open a device with write-only permission (if ORed with  \fBFREAD\fR, then allow both read and write access)
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fIotyp\fR \fR
.ad
.RS 11n
.rt  
Parameter supplied so that the driver can determine how many times a device was opened and for what reasons.   For \fBOTYP_BLK\fR and \fBOTYP_CHR\fR, the  \fBopen()\fR routine may be called many times, but the  \fBclose\fR(9E) routine is called only when the last reference to a device is removed. If the device is accessed through file descriptors, this is by a call to \fBclose\fR(2) or \fBexit\fR(2) If the device is accessed through
memory mapping, this is by a call to  \fBmunmap\fR(2) or \fBexit\fR(2) For \fBOTYP_LYR\fR, there is exactly one  \fBclose\fR(9E) for each  \fBopen()\fR called. This permits software drivers
to exist above hardware drivers and removes any ambiguity from the hardware driver regarding how a device is used. 
.sp
.ne 2
.mk
.na
\fB\fBOTYP_BLK\fR \fR
.ad
.RS 13n
.rt  
Open occurred through block interface for the device 
.RE

.sp
.ne 2
.mk
.na
\fB\fBOTYP_CHR\fR \fR
.ad
.RS 13n
.rt  
Open occurred through the raw/character interface for the device
.RE

.sp
.ne 2
.mk
.na
\fB\fBOTYP_LYR\fR \fR
.ad
.RS 13n
.rt  
Open a layered process. This flag is used when one driver calls another driver's  \fBopen()\fR or  \fBclose\fR(9E) routine. The calling
driver will make sure that there is one layered close for each layered open. This flag applies to both block and character devices.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fIcred_p\fR \fR
.ad
.RS 11n
.rt  
Pointer to the  user credential structure.
.RE

.SS "STREAMS"
.sp
.ne 2
.mk
.na
\fB\fIq\fR \fR
.ad
.RS 11n
.rt  
A pointer to the read  \fBqueue\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fIdevp\fR \fR
.ad
.RS 11n
.rt  
Pointer to a device number.  For \fBSTREAMS \fRmodules,  \fIdevp\fR always points to the device number associated with the driver at the end (tail) of the stream.
.RE

.sp
.ne 2
.mk
.na
\fB\fIoflag\fR \fR
.ad
.RS 11n
.rt  
Valid  \fIoflag\fR values are  \fBFEXCL\fR, \fBFNDELAY\fR, \fBFREAD\fR, and \fBFWRITEL\fR, the same as those listed above for \fIflag.\fR For \fBSTREAMS \fRmodules,  \fIoflag\fR is
always set to  \fB0\fR. 
.RE

.sp
.ne 2
.mk
.na
\fB\fIsflag\fR \fR
.ad
.RS 11n
.rt  
Valid values are as follows: 
.sp
.ne 2
.mk
.na
\fB\fBCLONEOPEN\fR \fR
.ad
.RS 14n
.rt  
Indicates that the \fBopen()\fR routine is called through the clone driver. The driver should return a unique device number.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMODOPEN\fR \fR
.ad
.RS 14n
.rt  
Modules should be called with \fIsflag\fR set to this value. Modules should return an error if they are called with \fIsflag\fR set to a different value. Drivers should return an error if they are called with \fIsflag\fR set to
this value.
.RE

.sp
.ne 2
.mk
.na
\fB\fB0\fR \fR
.ad
.RS 14n
.rt  
Indicates a driver is opened directly, without calling the clone driver.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fIcred_p\fR \fR
.ad
.RS 11n
.rt  
Pointer to the  user credential structure.
.RE

.SH DESCRIPTION
.LP
The driver's  \fBopen()\fR routine is called by the kernel during an  \fBopen\fR(2) or a  \fBmount\fR(2) on the special file for the device.  The routine should verify that the minor number component of \fI*devp\fR is valid, that the type of access requested by  \fIotyp\fR and  \fIflag\fR is appropriate for the device, and, if required, check permissions using the user credentials pointed to by  \fIcred_p\fR. 
.LP
The \fBopen()\fR routine is passed a pointer to a device number so that the driver can change the minor number. This allows drivers to dynamically  create minor instances of the device. An example of this might be a  pseudo-terminal driver that creates a new pseudo-terminal
whenever it  is opened.  A driver that chooses the minor number dynamically, normally creates only one minor device node in  \fBattach\fR(9E) with \fBddi_create_minor_node\fR(9F) then changes the minor number component of \fI*devp\fR using \fBmakedevice\fR(9F) and \fBgetmajor\fR(9F) The driver needs to keep track of available minor
numbers internally:
.sp
.in +2
.nf
*devp = makedevice(getmajor(*devp), new_minor);
.fi
.in -2

.SH RETURN VALUES
.LP
The  \fBopen()\fR routine should return  \fB0\fR for success, or the appropriate error number.
.SH SEE ALSO
.LP
\fBclose\fR(2), \fBexit\fR(2), \fBmmap\fR(2), \fBmount\fR(2), \fBmunmap\fR(2), \fBopen\fR(2), \fBintro\fR(9E), \fBattach\fR(9E), \fBclose\fR(9E), \fBddi_create_minor_node\fR(9F), \fBgetmajor\fR(9F), \fBgetminor\fR(9F), \fBmakedevice\fR(9F), \fBnulldev\fR(9F) 
.LP
\fI\fR 
.LP
\fI\fR 
.SH WARNINGS
.LP
Do not attempt to change the major number.
.LP
When a driver modifies the device number passed in, it must not change the major number portion of the device number. Unless CLONEOPEN is specified, the modified device number must map to the same driver instance indicated by the driver's  getinfo(9e) implementation. In other words, cloning
across different drivers is not supported. Cloning across different instances of the same driver in only permitted if the driver specified in CLONE_DEV in \fBddi_create_minor_node\fR(9F) is not supported.
