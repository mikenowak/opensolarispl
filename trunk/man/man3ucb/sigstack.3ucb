'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"  Copyright (c) 1983 Regents of the University of California.  All rights reserved.  The Berkeley software License Agreement specifies the terms and conditions for redistribution.
.\"    Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.TH sigstack 3UCB "22 Jan 1997" "SunOS 5.11" "SunOS/BSD Compatibility Library Functions"
.SH NAME
sigstack \- set and/or get signal stack context
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/cc\fR [ \fIflag\fR ... ] \fIfile\fR ...
#include <signal.h>

\fBint\fR \fBsigstack\fR(\fB\fR \fInss\fR, \fB\fR \fIoss\fRstruct sigstack \fI*nss\fR, *\fIoss\fR;
.fi

.SH DESCRIPTION
.LP
The \fBsigstack()\fR function allows users to define an alternate stack, called the "signal stack", on which signals are to be processed.  When a signal's action indicates
its handler should execute on the signal stack (specified with a \fBsigvec\fR(3UCB) call), the system
checks to see if the process is currently executing on that stack.  If the process is not currently executing on the signal stack, the system arranges a switch to the signal stack for the duration of the
signal handler's execution.
.LP
A signal stack is specified by a \fBsigstack()\fR structure, which includes the following members:
.sp
.in +2
.nf
char  *ss_sp;        /* signal stack pointer */
int   ss_onstack;    /* current status */
.fi
.in -2

.LP
The \fBss_sp\fR member is the initial value to be assigned to the stack pointer when the system switches the process to the signal stack. Note that, on machines where the stack grows
downwards in memory, this is \fInot\fR the address of the beginning of the signal stack area.  The \fBss_onstack\fR member is zero or non-zero depending on whether the
process is currently executing on the signal stack or not.
.LP
If \fInss\fR is not a null pointer, \fBsigstack()\fR sets the signal stack state to the value in the \fBsigstack()\fR structure pointed to by \fInss\fR. If \fInss\fR is a \fBnull\fR pointer, the signal stack state will be unchanged.  If \fIoss\fR is not a \fBnull\fR pointer, the current signal stack state is stored in the \fBsigstack()\fR structure pointed to by \fIoss\fR.
.SH RETURN VALUES
.LP
Upon successful completion, \fB0\fR is returned.  Otherwise, \fB\(mi1\fR is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.LP
The \fBsigstack()\fR function will fail and the signal stack context will remain unchanged if one of the following occurs.
.sp
.ne 2
.mk
.na
\fB\fBEFAULT\fR\fR
.ad
.RS 10n
.rt  
Either \fInss\fR or \fIoss\fR points to memory that is not a valid part of the process address space.
.RE

.SH SEE ALSO
.LP
\fBsigaltstack\fR(2), \fBsigvec\fR(3UCB), \fBsignal\fR(3C)
.SH WARNINGS
.LP
Signal stacks are not "grown" automatically, as is done for the normal stack.  If the stack overflows unpredictable results may occur.
.SH NOTES
.LP
Use of these interfaces should be restricted to only applications written on BSD platforms.  Use of these interfaces with any of the system libraries or in multi-threaded applications is unsupported.
