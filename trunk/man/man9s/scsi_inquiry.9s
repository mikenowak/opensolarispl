'\" te
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").  
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"  Copyright (c) 2000, Sun Microsystems, Inc. , All Rights Reserved
.TH scsi_inquiry 9S "1 Apr 1997" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
scsi_inquiry \- SCSI inquiry structure 
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>
.fi

.SH INTERFACE LEVEL
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.LP
The \fBscsi_inquiry\fR structure contains 36 required bytes, followed by a variable number of vendor-specific parameters. Bytes 59 through 95, if returned, are reserved for future standardization. This structure is part of  \fBscsi_device\fR(9S) structure and typically filled in by  \fBscsi_probe\fR(9F). 
.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
uchar_t  inq_dtype;         /* Periph. qualifier, dev. type */
uchar_t  inq_rmb      :1;   /* Removable media */
uchar_t  inq_qual     :7;   /* Dev. type qualifier */
uchar_t  inq_iso      :2;   /* ISO version */
uchar_t  inq_ecma     :3;   /* ANSI version */
uchar_t  inq_aenc     :1;   /* Async event notif. cap. */
uchar_t  inq_trmiop   :1;   /* Supports TERMINATE I/O PROC msg */
uchar_t  inq_rdf      :4;   /* Response data format */
uchar_t  inq_len;           /* Additional length */
uchar_t  inq_reladdr  :1;   /* Supports relative addressing */
uchar_t  inq_wbus32   :1;   /* Supports 32 bit wide data xfers */
uchar_t  inq_wbus16   :1;   /* Supports 16 bit wide data xfers */
uchar_t  inq_sync     :1;   /* Supports synchron. data xfers */
uchar_t  inq_linked   :1;   /* Supports linked commands */
uchar_t  inq_cmd_que  :1;   /* Supports command queueing */
uchar_t  inq_sftre    :1;   /* Supports Soft Reset option */
char     inq_vid[8];        /* Vendor ID */
char     inq_pid[16];       /* Product ID */
char     inq_revision[4];   /* Revision level */
.fi
.in -2

.LP
\fBinq_dtype\fR identifies the type of device. Bits 0 - 4 represent the Peripheral Device Type and bits 5 - 7 represent the Peripheral Qualifier. The following values are appropriate for Peripheral Device Type field:
.sp
.ne 2
.mk
.na
\fB\fBDTYPE_ARRAY_CTRL\fR \fR
.ad
.RS 21n
.rt  
Array controller device (for example, \fBRAID\fR).
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_DIRECT\fR \fR
.ad
.RS 21n
.rt  
Direct-access device (for example, magnetic disk).
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_ESI\fR \fR
.ad
.RS 21n
.rt  
Enclosure services device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_SEQUENTIAL\fR \fR
.ad
.RS 21n
.rt  
Sequential-access device (for example, magnetic tape).
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_PRINTER\fR \fR
.ad
.RS 21n
.rt  
Printer device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_PROCESSOR\fR \fR
.ad
.RS 21n
.rt  
Processor device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_WORM\fR \fR
.ad
.RS 21n
.rt  
Write-once device (for example, some optical disks).
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_RODIRECT\fR \fR
.ad
.RS 21n
.rt  
CD-ROM device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_SCANNER\fR \fR
.ad
.RS 21n
.rt  
Scanner device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_OPTICAL\fR \fR
.ad
.RS 21n
.rt  
Optical memory device (for example, some optical disks).
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_CHANGER\fR \fR
.ad
.RS 21n
.rt  
Medium Changer device (for example, jukeboxes).
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_COMM\fR \fR
.ad
.RS 21n
.rt  
Communications device.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_UNKNOWN\fR \fR
.ad
.RS 21n
.rt  
Unknown or no device type.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDTYPE_MASK\fR \fR
.ad
.RS 21n
.rt  
Mask to isolate Peripheral Device Type field.
.RE

.LP
The following values are appropriate for the Peripheral Qualifier field:
.sp
.ne 2
.mk
.na
\fB\fBDPQ_POSSIBLE\fR \fR
.ad
.RS 18n
.rt  
The specified peripheral device type is currently connected to this logical unit. If the target cannot determine whether or not a physical device is currently connected, it uses this peripheral qualifier when returning the \fBINQUIRY\fR data. This peripheral qualifier
does not imply that the device is ready for access by the initiator.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDPQ_SUPPORTED\fR \fR
.ad
.RS 18n
.rt  
The target is capable of supporting the specified peripheral device type on this logical unit. However, the physical device is not currently connected to this logical unit.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDPQ_NEVER\fR \fR
.ad
.RS 18n
.rt  
The target is not capable of supporting a physical device on this logical unit.  For this peripheral qualifier,  the peripheral device type shall be set to  \fBDTYPE_UNKNOWN\fR to provide compatibility with previous versions of \fBSCSI\fR. For all other
peripheral device type values, this  peripheral qualifier is reserved.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDPQ_VUNIQ\fR \fR
.ad
.RS 18n
.rt  
This is a vendor-unique qualifier.
.RE

.LP
\fBDTYPE_NOTPRESENT\fR is the peripheral qualifier \fBDPQ_NEVER\fR and the peripheral device type \fBDTYPE_UNKNOWN\fR combined.
.LP
\fBinq_rmb\fR, if set, indicates that the medium is removable.
.LP
\fBinq_qual\fR is a device type qualifier.
.LP
\fBinq_iso\fR indicates  \fBISO \fRversion.
.LP
\fBinq_ecma\fR indicates  \fBECMA \fRversion.
.LP
\fBinq_ansi\fR indicates  \fBANSI \fRversion.
.LP
\fBinq_aenc\fR, if set, indicates that the device supports asynchronous event notification capability as defined in  \fBSCSI-2 \fRspecification.
.LP
\fBinq_trmiop\fR, if set, indicates that the device supports the  \fBTERMINATE I/O PROCESS \fRmessage.
.LP
\fBinq_rdf\fR, if reset, indicates the  \fBINQUIRY\fR data format is as specified in \fBSCSI-1\fR.
.LP
\fBinq_inq_len\fR is the additional length field that specifies the length in bytes of the parameters.
.LP
\fBinq_reladdr\fR, if set, indicates that the device supports the relative addressing mode of this logical unit.
.LP
\fBinq_wbus32\fR, if set, indicates that the device supports 32-bit wide data transfers.
.LP
\fBinq_wbus16\fR, if set, indicates that the device supports 16-bit wide data transfers.
.LP
\fBinq_sync\fR, if set, indicates that the device supports synchronous data transfers.
.LP
\fBinq_linked\fR, if set, indicates that the device supports linked commands for this logical unit.
.LP
\fBinq_cmdque\fR, if set, indicates that the device supports tagged command queueing.
.LP
\fBinq_sftre\fR, if reset, indicates that the device responds to the  \fBRESET\fR condition with the hard  \fBRESET\fR alternative. If this bit is set, this indicates that the device responds with the soft  \fBRESET \fRalternative.
.LP
\fBinq_vid\fR contains eight bytes of  \fBASCII \fRdata identifying the vendor of the product.
.LP
\fBinq_pid\fR contains sixteen bytes of  \fBASCII \fRdata as defined by the vendor.
.LP
\fBinq_revision\fR contains four bytes of  \fBASCII \fRdata as defined by the vendor.
.SH SEE ALSO
.LP
\fBscsi_probe\fR(9F), \fBscsi_device\fR(9S) 
.LP
\fIANSI Small Computer System Interface-2 (SCSI-2)\fR 
.LP
\fI\fR 
