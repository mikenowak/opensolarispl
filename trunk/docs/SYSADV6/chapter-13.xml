<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML//EN" "docbook.dtd"[
	<!ENTITY % xinclude SYSTEM "xinclude.mod">
	%xinclude;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="scftask-1">



<title>Solaris Cryptographic
Framework (Tasks)</title>
<toc>
<para>This chapter describes how to use the Solaris Cryptographic Framework. The following
is a list of information in this chapter.</para>
<itemizedlist>
<listitem>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-2">Using the Cryptographic Framework (Task
Map)</olink>
</para>
</listitem>
<listitem>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-24">Protecting Files With the Solaris Cryptographic
Framework (Task Map)</olink>
</para>
</listitem>
<listitem>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-28">Administering the Cryptographic Framework
(Task Map)</olink>
</para>
</listitem>
</itemizedlist>
</toc>
<sect1 xml:id="scftask-2">
<title>Using the Cryptographic Framework (Task Map)</title>
<indexterm xml:id="indexterm-1534">
<primary>RC4</primary>
<see>
ARCFOUR kernel provider</see>
</indexterm>
<indexterm xml:id="indexterm-1535">
<primary>using</primary>
<secondary>cryptographic framework task map</secondary>
</indexterm>
<indexterm xml:id="indexterm-1536">
<primary>task maps</primary>
<secondary>cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1537">
<primary>task maps</primary>
<secondary>using the cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1538">
<primary>cryptographic framework</primary>
<secondary>task maps</secondary>
</indexterm>
<para>The following task map points to tasks for using the cryptographic framework.</para>
<informaltable frame="all" pgwide="1">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="colspec0" colwidth="21.80*"/>
<colspec colname="colspec1" colwidth="44.20*"/>
<colspec colname="colspec2" colwidth="33.00*"/>
<thead>
<row rowsep="1">
<entry>
<para>Task</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>For Instructions</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>Protect individual files or sets of files</para>
</entry>
<entry>
<para>Ensures that file content has not been tampered with. Prevents files from being
read by intruders. These procedures can be done by ordinary users.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-24">Protecting Files With the Solaris Cryptographic
Framework (Task Map)</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Administer the framework</para>
</entry>
<entry>
<para>Adds, configures, and removes software providers. Disables and enables hardware
provider mechanisms. These procedures are administrative procedures.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-28">Administering the Cryptographic Framework (Task
Map)</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Sign a provider</para>
</entry>
<entry>
<para>Enables a provider to be added to the Solaris Cryptographic Framework.  These
procedures are developer procedures.</para>
</entry>
<entry>
<para>
<olink remap="external" targetdoc="819-2145" targetptr="pkg">Appendix F, <citetitle remap="appendix">Packaging and Signing Cryptographic Providers,</citetitle> in <citetitle remap="book">Solaris Security for Developers Guide</citetitle>
</olink>.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect1>
<sect1 xml:id="scftask-24">
<title>Protecting Files With the Solaris Cryptographic Framework
(Task Map)</title>
<indexterm xml:id="indexterm-1539">
<primary>encrypting</primary>
<secondary>files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1540">
<primary>hashing</primary>
<secondary>files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1541">
<primary>files</primary>
<secondary>encrypting</secondary>
</indexterm>
<indexterm xml:id="indexterm-1542">
<primary>files</primary>
<secondary>security</secondary>
<tertiary>encryption</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1543">
<primary>files</primary>
<secondary>hashing</secondary>
</indexterm>
<indexterm xml:id="indexterm-1544">
<primary>task maps</primary>
<secondary>protecting files with cryptographic mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1545">
<primary>protecting</primary>
<secondary>files with cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1546">
<primary>user procedures</primary>
<secondary>encrypting files</secondary>
</indexterm>
<para>The Solaris Cryptographic Framework can help you protect your files. The following
task map points to procedures for listing the available algorithms, and for protecting
your files cryptographically.</para>
<informaltable frame="all" pgwide="1">
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="colspec0" colwidth="24.40*"/>
<colspec colname="colspec1" colwidth="44.80*"/>
<colspec colname="colspec2" colwidth="29.80*"/>
<thead>
<row rowsep="1">
<entry colsep="1" rowsep="1">
<para>Task</para>
</entry>
<entry colsep="1" rowsep="1">
<para>Description</para>
</entry>
<entry colsep="1" rowsep="1">
<para>For Instructions</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry colsep="1" rowsep="1">
<para>Generate a symmetric key</para>
</entry>
<entry colsep="1" rowsep="1">
<para>Generates a random key for use with the <command>encrypt</command> command or
the <command>mac</command> command.</para>
</entry>
<entry colsep="1" rowsep="1">
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-10">How to Generate a Symmetric Key</olink>
</para>
</entry>
</row>
<row>
<entry colsep="1" rowsep="1">
<para>Provide a checksum that ensures the integrity of a file</para>
</entry>
<entry colsep="1" rowsep="1">
<para>Verifies that the receiver's copy of a file is identical to the file that was
sent.</para>
</entry>
<entry colsep="1" rowsep="1">
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-22">How to Compute a Digest of a File</olink>
</para>
</entry>
</row>
<row>
<entry colsep="1" rowsep="1">
<para>Protect a file with a message authentication code (MAC)</para>
</entry>
<entry colsep="1" rowsep="1">
<para>Verifies to the receiver of your message that you were the sender.</para>
</entry>
<entry colsep="1" rowsep="1">
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-20">How to Compute a MAC of a File</olink>
</para>
</entry>
</row>
<row>
<entry colsep="1" rowsep="1">
<para>Encrypt a file, and then decrypt the encrypted file</para>
</entry>
<entry colsep="1" rowsep="1">
<para>Protects the content of files by encrypting the file. Provides the encryption
parameters to decrypt the file.</para>
</entry>
<entry colsep="1" rowsep="1">
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-4">How to Encrypt and Decrypt a File</olink>
</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect1>
<sect1 xml:id="scftask-3">
<title>Protecting Files With the Solaris Cryptographic Framework</title>
<para>This section describes how to generate symmetric keys, how to create checksums
for file integrity, and how to protect files from eavesdropping. The commands in this
section can be run by ordinary users. Developers can write scripts that use these
commands.</para>
<sect2>
<title/>
<task id="scftask-10">

<title>How to Generate a Symmetric Key</title>
<indexterm xml:id="indexterm-1547">
<primary>generating</primary>
<secondary>symmetric key for encryption</secondary>
</indexterm>
<indexterm xml:id="indexterm-1548">
<primary>encryption</primary>
<secondary>generating symmetric key for</secondary>
</indexterm>
<indexterm xml:id="indexterm-1549">
<primary>computing</primary>
<secondary>secret key</secondary>
</indexterm>
<indexterm xml:id="indexterm-1550">
<primary>secret keys</primary>
<secondary>generating</secondary>
</indexterm>
<indexterm xml:id="indexterm-1551">
<primary>keys</primary>
<secondary>generating symmetric key</secondary>
</indexterm>
<indexterm xml:id="indexterm-1552">
<primary>devices</primary>
<secondary>
<filename>/dev/urandom</filename> device</secondary>
</indexterm>
<indexterm xml:id="indexterm-1553">
<primary>
<filename>/dev/urandom</filename> device</primary>
</indexterm>
<indexterm xml:id="indexterm-1554">
<primary>secret keys</primary>
<secondary>creating</secondary>
</indexterm>
<indexterm xml:id="indexterm-1555">
<primary>creating</primary>
<secondary>secret keys</secondary>
<tertiary>for encryption</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1556">
<primary>secret keys</primary>
<secondary>generating</secondary>
</indexterm>
<indexterm xml:id="indexterm-1557">
<primary>random numbers</primary>
<secondary>
<command>od</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1558">
<primary>
<command>od</command> command</primary>
<secondary>generating secret keys</secondary>
</indexterm>
<indexterm xml:id="indexterm-1559">
<primary>user procedures</primary>
<secondary>generating a symmetric key</secondary>
</indexterm>
<tasksummary>
<para>A key is needed to encrypt files, and to generate the MAC of a file. The key
should be derived from a random pool of numbers.</para>
<para>If your site has a random number generator, use the generator. Otherwise, you
can use the <command>dd</command> command with the Solaris <filename>/dev/urandom</filename> device as input. For more information, see the <olink remap="external" targetdoc="819-2240" targetptr="dd-1m">
<citerefentry>
<refentrytitle>dd</refentrytitle>
<manvolnum>
1M
</manvolnum>
</citerefentry>
</olink> man page.</para>
</tasksummary>
<procedure>
<step>
<para>Determine the key length that your algorithm requires.</para>
<substeps>
<step>
<para>
<indexterm xml:id="indexterm-1560">
<primary>
<command>encrypt</command> command</primary>
<secondary>syntax</secondary>
</indexterm>
<indexterm xml:id="indexterm-1561">
<primary>
<option>
l</option> option</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>List the available
algorithms.</para>
<screen>% encrypt -l
Algorithm       Keysize:  Min   Max (bits)
------------------------------------------
aes                       128   128
arcfour                     8   128
des                        64    64
3des                      192   192

% mac -l
Algorithm       Keysize:  Min   Max (bits)
------------------------------------------
des_mac                    64    64
sha1_hmac                   8   512
md5_hmac                    8   512</screen>
</step>
<step>
<para>Determine the key length in bytes to pass to the <command>dd</command> command.</para>
<para>Divide the minimum and maximum key sizes by 8. When
the minimum and maximum key sizes are different, intermediate key sizes are possible.
For example, the value 8, 16, or 64 can be passed to the <command>dd</command> command
for the <literal>sha1_hmac</literal> and <literal>md5_hmac</literal> functions.</para>
</step>
</substeps>
</step>
<step>
<para>Generate the symmetric key.</para>
<screen>% dd if=/dev/urandom of=<replaceable>keyfile</replaceable> bs=<replaceable>n</replaceable> count=<replaceable>n</replaceable>
</screen>
<variablelist>
<varlistentry>
<term>
<option role="nodash">if=</option>
<replaceable>file</replaceable>
</term>
<listitem>
<para>Is the input file. For a random key, use the <filename>/dev/urandom</filename> file.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option role="nodash">of=</option>
<replaceable>keyfile</replaceable>
</term>
<listitem>
<para>Is the output file that holds the generated key.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option role="nodash">bs=</option>
<replaceable>n</replaceable>
</term>
<listitem>
<para>Is the key size in bytes. For the length in bytes, divide the key
length in bits by 8.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option role="nodash">count=</option>
<replaceable>n</replaceable>
</term>
<listitem>
<para>Is the count of the input blocks. The number for <replaceable>n</replaceable> should
be <literal>1</literal>.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
<step>
<para>Store your key in a protected directory.</para>
<para>The key file should
not be readable by anyone but the user.</para>
<screen>% chmod 400 <replaceable>keyfile</replaceable>
</screen>
</step>
</procedure>
<example xml:id="scftask-18">

<title>Creating a Key for the AES Algorithm</title>
<para>In the following example, a secret key for the AES algorithm is created. The
key is also stored for later decryption. AES mechanisms use a 128-bit key. The key
is expressed as 16 bytes in the <command>dd</command> command.</para>
<screen>% <userinput>ls -al ~/keyf</userinput>
drwx------   2 jdoe  staff        512 May 3 11:32 ./
% <userinput>dd if=/dev/urandom of=$HOME/keyf/05.07.aes16 bs=16  count=1</userinput>
% <userinput>chmod 400 ~/keyf/05.07.aes16</userinput>
</screen>
</example>
<example xml:id="scftask-32">

<title>Creating a Key for the DES Algorithm</title>
<para>In the following example, a secret key for the DES algorithm is created. The
key is also stored for later decryption. DES mechanisms use a 64-bit key. The key
is expressed as 8 bytes in the <command>dd</command> command.</para>
<screen>% <userinput>dd if=/dev/urandom of=$HOME/keyf/05.07.des8 bs=8  count=1</userinput>
% <userinput>chmod 400 ~/keyf/05.07.des8</userinput>
</screen>
</example>
<example xml:id="scftask-33">

<title>Creating a Key for the 3DES Algorithm</title>
<para>In the following example, a secret key for the 3DES algorithm is created. The
key is also stored for later decryption. 3DES mechanisms use a 192-bit key. The key
is expressed as 24 bytes in the <command>dd</command> command.</para>
<screen>% <userinput>dd if=/dev/urandom of=$HOME/keyf/05.07.3des.24 bs=24 count=1</userinput>
% <userinput>chmod 400 ~/keyf/05.07.3des.24</userinput>
</screen>
</example>
<example xml:id="scftask-14">

<title>Creating a Key for the MD5 Algorithm</title>
<para>In the following example, a secret key for the MD5 algorithm is created. The
key is also stored for later decryption.  The key is expressed as 64 bytes in the <command>dd</command> command.</para>
<screen>% <userinput>dd if=/dev/urandom of=$HOME/keyf/05.07.mack64 bs=64 count=1</userinput>
% <userinput>chmod 400 ~/keyf/05.07.mack64</userinput>
</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-22">

<title>How to Compute a Digest of a File</title>
<indexterm xml:id="indexterm-1562">
<primary>new features</primary>
<secondary>commands</secondary>
<tertiary>
<command>digest</command>
</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1563">
<primary>computing</primary>
<secondary>digest of a file</secondary>
</indexterm>
<indexterm xml:id="indexterm-1564">
<primary>digests</primary>
<secondary>computing for file</secondary>
</indexterm>
<indexterm xml:id="indexterm-1565">
<primary>files</primary>
<secondary>computing digests of</secondary>
</indexterm>
<indexterm xml:id="indexterm-1566">
<primary>security</primary>
<secondary>computing digest of files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1567">
<primary>users</primary>
<secondary>computing digest of files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1568">
<primary>using</primary>
<secondary>
<command>digest</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1569">
<primary>digests</primary>
<secondary>of files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1570">
<primary>creating</primary>
<secondary>file digests</secondary>
</indexterm>
<indexterm xml:id="indexterm-1571">
<primary>files</primary>
<secondary>computing a digest</secondary>
</indexterm>
<indexterm xml:id="indexterm-1572">
<primary>files</primary>
<secondary>verifying integrity with <command>digest</command>
</secondary>
</indexterm>
<indexterm xml:id="indexterm-1573">
<primary>files</primary>
<secondary>digest of</secondary>
</indexterm>
<indexterm xml:id="indexterm-1574">
<primary>user procedures</primary>
<secondary>computing digest of a file</secondary>
</indexterm>
<tasksummary>
<para>When you compute a digest of a file, you can check to see that the file has
not been tampered with by comparing digest outputs. A digest does not alter the original
file.</para>
</tasksummary>
<procedure>
<step xml:id="scftask-digest-1">
<para>
<indexterm xml:id="indexterm-1575">
<primary>
<command>digest</command> command</primary>
<secondary>syntax</secondary>
</indexterm>
<indexterm xml:id="indexterm-1576">
<primary>
<option>
l</option> option</primary>
<secondary>
<command>digest</command> command</secondary>
</indexterm>List
the available digest algorithms.</para>
<screen>% digest -l
md5
sha1</screen>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1577">
<primary>
<option>
a</option> option</primary>
<secondary>
<command>digest</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1578">
<primary>
<option>
v</option> option</primary>
<secondary>
<command>digest</command> command</secondary>
</indexterm>Compute
the digest of the file and save the digest listing.</para>
<para>Provide an algorithm
with the <command>digest</command> command.</para>
<screen>% digest -v -a <replaceable>algorithm input-file</replaceable> &gt; <replaceable>digest-listing</replaceable>
</screen>
<variablelist>
<varlistentry>
<term>
<option>
v</option>
</term>
<listitem>
<para>Displays the output in the following format:</para>
<screen>
<replaceable>algorithm</replaceable> (<replaceable>input-file</replaceable>) = <replaceable>digest</replaceable>
</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>
a</option> <replaceable>algorithm</replaceable>
</term>
<listitem>
<para>Is the algorithm to use to compute a digest of the file. Type the
algorithm as the algorithm appears in the output of <olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-digest-1">Step 1</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<replaceable>input-file</replaceable>
</term>
<listitem>
<para>Is the input file for the <command>digest</command> command.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<replaceable>digest-listing</replaceable>
</term>
<listitem>
<para>Is the output file for the <command>digest</command> command.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
</procedure>
<example xml:id="scftask-34">

<title>Computing a Digest With the MD5 Mechanism</title>
<para>
<indexterm xml:id="indexterm-1579">
<primary>digests</primary>
<secondary>of files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1580">
<primary>files</primary>
<secondary>computing digests of</secondary>
</indexterm>
<indexterm xml:id="indexterm-1581">
<primary>
<command>digest</command> command</primary>
<secondary>example</secondary>
</indexterm>
<indexterm xml:id="indexterm-1582">
<primary>viewing</primary>
<secondary>digest of a file</secondary>
</indexterm>In the following example, the <command>digest</command> command uses the
MD5 mechanism to compute a digest for an email attachment.</para>
<screen>% <userinput>digest -v -a md5 email.attach &gt;&gt;  $HOME/digest.emails.05.07</userinput>
% <userinput>cat  ~/digest.emails.05.07</userinput>
md5 (email.attach) = 85c0a53d1a5cc71ea34d9ee7b1b28b01</screen>
<para>When the <option>
v</option> option is not used, the digest is saved with no
accompanying information:</para>
<screen>% <userinput>digest -a md5 email.attach &gt;&gt;  $HOME/digest.emails.05.07</userinput>
% <userinput>cat  ~/digest.emails.05.07</userinput>
85c0a53d1a5cc71ea34d9ee7b1b28b01</screen>
</example>
<example xml:id="scftask-35">

<title>Computing a Digest With the SHA1 Mechanism</title>
<para>In the following example, the <command>digest</command> command uses the SHA1
mechanism to provide a directory listing. The results are placed in a file.</para>
<screen>% <userinput>digest -v -a sha1 docs/* &gt; $HOME/digest.docs.legal.05.07</userinput>
% <userinput>more ~/digest.docs.legal.05.07</userinput>
sha1 (docs/legal1) = 1df50e8ad219e34f0b911e097b7b588e31f9b435
sha1 (docs/legal2) = 68efa5a636291bde8f33e046eb33508c94842c38
sha1 (docs/legal3) = 085d991238d61bd0cfa2946c183be8e32cccf6c9
sha1 (docs/legal4) = f3085eae7e2c8d008816564fdf28027d10e1d983</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-20">

<title>How to Compute a MAC of a File</title>
<indexterm xml:id="indexterm-1583">
<primary>new features</primary>
<secondary>commands</secondary>
<tertiary>
<command>mac</command>
</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1584">
<primary>computing</primary>
<secondary>MAC of a file</secondary>
</indexterm>
<indexterm xml:id="indexterm-1585">
<primary>message authentication code (MAC)</primary>
<secondary>computing for file</secondary>
</indexterm>
<indexterm xml:id="indexterm-1586">
<primary>files</primary>
<secondary>computing MAC of</secondary>
</indexterm>
<indexterm xml:id="indexterm-1587">
<primary>security</primary>
<secondary>computing MAC of files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1588">
<primary>users</primary>
<secondary>computing MAC of files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1589">
<primary>using</primary>
<secondary>
<command>mac</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1590">
<primary>user procedures</primary>
<secondary>computing MAC of a file</secondary>
</indexterm>
<tasksummary>
<para>A message authentication code, or MAC, computes a digest for the file and uses
a secret key to further protect the digest. A MAC does not alter the original file.</para>
</tasksummary>
<procedure>
<step>
<para>
<indexterm xml:id="indexterm-1591">
<primary>
<command>mac</command> command</primary>
<secondary>syntax</secondary>
</indexterm>
<indexterm xml:id="indexterm-1592">
<primary>
<option>
l</option> option</primary>
<secondary>
<command>mac</command> command</secondary>
</indexterm>List the available
mechanisms.</para>
<screen>% mac -l
Algorithm       Keysize:  Min   Max
-----------------------------------
des_mac                    64    64
sha1_hmac                   8   512
md5_hmac                    8   512</screen>
</step>
<step xml:id="scftask-genkey-1">
<para>Generate a symmetric key of the appropriate length.</para>
<para>You have two options. You can provide a <olink remap="external" targetdoc="glossary-1.xml" targetptr="glossary-101">passphrase</olink> from which a key will be generated. Or you can provide a key.</para>
<itemizedlist>
<listitem>
<para>
<indexterm xml:id="indexterm-1593">
<primary>passphrases</primary>
<secondary>
<command>mac</command> command</secondary>
</indexterm>If you provide a passphrase, you must store or remember the
passphrase. If you store the passphrase online, the passphrase file should be readable
only by you.</para>
</listitem>
<listitem>
<para>If you provide a key, it must be the correct size for the mechanism.
For the procedure, see <olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-10">How to Generate a Symmetric Key</olink>.</para>
</listitem>
</itemizedlist>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1594">
<primary>
<option>
a</option> option</primary>
<secondary>
<command>mac</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1595">
<primary>
<option>
v</option> option</primary>
<secondary>
<command>mac</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1596">
<primary>
<option>
k</option> option</primary>
<secondary>
<command>mac</command> command</secondary>
</indexterm>Create a MAC for a file.</para>
<para>Provide a key and use
a symmetric key algorithm with the <command>mac</command> command.</para>
<screen>% mac -v -a <replaceable>algorithm</replaceable> [ -k <replaceable>keyfile</replaceable> ] <replaceable>input-file</replaceable>
</screen>
<variablelist>
<varlistentry>
<term>
<option>
v</option>
</term>
<listitem>
<para>Displays the output in the following format:</para>
<screen>
<replaceable>algorithm</replaceable> (<replaceable>input-file</replaceable>) = <replaceable>mac</replaceable>
</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>
a</option> <replaceable>algorithm</replaceable>
</term>
<listitem>
<para>Is the algorithm to use to compute the MAC. Type the algorithm as
the algorithm appears in the output of the <command>mac -l</command> command.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>
k</option> <replaceable>keyfile</replaceable>
</term>
<listitem>
<para>Is the file that contains a key of algorithm-specified length.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<replaceable>input-file</replaceable>
</term>
<listitem>
<para>Is the input file for the MAC.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
</procedure>
<example xml:id="scftask-36">

<title>Computing a MAC With DES_MAC and a Passphrase</title>
<indexterm xml:id="indexterm-1597">
<primary>passphrases</primary>
<secondary>using for MAC</secondary>
</indexterm>
<para>In the following example, the email attachment is authenticated with the DES_MAC
mechanism and a key that is derived from a passphrase. The MAC listing is saved to
a file. If the passphrase is stored in a file, the file should not be readable by
anyone but the user.</para>
<screen>% <userinput>mac -v -a des_mac email.attach</userinput>
Enter key: <lineannotation>&lt;Type passphrase&gt;
</lineannotation>
des_mac (email.attach) = dd27870a
% <userinput>echo "des_mac (email.attach) = dd27870a" &gt;&gt; ~/desmac.daily.05.07</userinput>
</screen>
</example>
<example xml:id="scftask-45">

<title>Computing a MAC With MD5_HMAC and a Key File</title>
<indexterm xml:id="indexterm-1598">
<primary>keys</primary>
<secondary>using for MAC</secondary>
</indexterm>
<indexterm xml:id="indexterm-1599">
<primary>viewing</primary>
<secondary>MAC of a file</secondary>
</indexterm>
<para>In the following example, the email attachment is authenticated with the MD5_HMAC
mechanism and a secret key. The MAC listing is saved to a file.</para>
<screen>% <userinput>mac -v -a md5_hmac -k $HOME/keyf/05.07.mack64 email.attach</userinput>
md5_hmac (email.attach) = 02df6eb6c123ff25d78877eb1d55710c
% <userinput>echo "md5_hmac (email.attach) = 02df6eb6c123ff25d78877eb1d55710c" \</userinput>
<userinput>&gt;&gt; ~/mac.daily.05.07</userinput>
</screen>
</example>
<example xml:id="scftask-37">

<title>Computing a MAC With SHA1_HMAC and a Key File</title>
<para>In the following example, the directory manifest is authenticated with the SHA1_HMAC
mechanism and a secret key. The results are placed in a file.</para>
<screen>% <userinput>mac -v -a sha1_hmac \</userinput>
<userinput>-k $HOME/keyf/05.07.mack64 docs/* &gt; $HOME/mac.docs.legal.05.07</userinput>
% <userinput>more ~/mac.docs.legal.05.07</userinput>
sha1_hmac (docs/legal1) = 9b31536d3b3c0c6b25d653418db8e765e17fe07a
sha1_hmac (docs/legal2) = 865af61a3002f8a457462a428cdb1a88c1b51ff5
sha1_hmac (docs/legal3) = 076c944cb2528536c9aebd3b9fbe367e07b61dc7
sha1_hmac (docs/legal4) = 7aede27602ef6e4454748cbd3821e0152e45beb4</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-4">

<title>How to Encrypt and Decrypt a File</title>
<indexterm xml:id="indexterm-1600">
<primary>new features</primary>
<secondary>commands</secondary>
<tertiary>
<command>encrypt</command>
</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1601">
<primary>encrypting</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1602">
<primary>files</primary>
<secondary>encrypting</secondary>
</indexterm>
<indexterm xml:id="indexterm-1603">
<primary>security</primary>
<secondary>encrypting files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1604">
<primary>users</primary>
<secondary>encrypting files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1605">
<primary>using</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1606">
<primary>encrypting</primary>
<secondary>files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1607">
<primary>user procedures</primary>
<secondary>decrypting files</secondary>
</indexterm>
<tasksummary>
<para>When you encrypt a file, the original file is not removed or changed. The output
file is encrypted.</para>
<para>For solutions to common errors from the <command>encrypt</command> command,
see the section that follows the examples.</para>
</tasksummary>
<procedure>
<step xml:id="scftask-genkey-2">
<para>Create a symmetric key of the appropriate length.</para>
<para>
<indexterm xml:id="indexterm-1608">
<primary>passphrases</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>You have two options. You can provide a <olink remap="external" targetdoc="glossary-1.xml" targetptr="glossary-101">passphrase</olink> from which a key will be generated. Or
you can provide a key.</para>
<itemizedlist>
<listitem>
<para>If you provide a passphrase, you must store or remember the passphrase.
If you store the passphrase online, the passphrase file should be readable only by
you.</para>
</listitem>
<listitem>
<para>If you provide a key, it must be the correct size for the mechanism.
For the procedure, see <olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-10">How to Generate a Symmetric Key</olink>.</para>
</listitem>
</itemizedlist>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1609">
<primary>
<option>
a</option> option</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1610">
<primary>
<option>
i</option> option</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1611">
<primary>
<option>
k</option> option</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1612">
<primary>
<option>
o</option> option</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>Encrypt
a file.</para>
<para>Provide a key and use a symmetric key algorithm with the <command>encrypt</command> command.</para>
<screen>% encrypt -a <replaceable>algorithm</replaceable>  [ -k <replaceable>keyfile</replaceable> ] -i <replaceable>input-file</replaceable> -o <replaceable>output-file</replaceable>
</screen>
<variablelist>
<varlistentry>
<term>
<option>
a</option> <replaceable>algorithm</replaceable>
</term>
<listitem>
<para>Is the algorithm to use to encrypt the file.  Type the algorithm as
the algorithm appears in the output of the <command>encrypt -l</command> command.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>
k</option> <replaceable>keyfile</replaceable>
</term>
<listitem>
<para>Is the file that contains a key of algorithm-specified length.  The
key length for each algorithm is listed, in bits, in the output of the <command>encrypt
-l</command> command.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>
i</option> <replaceable>input-file</replaceable>
</term>
<listitem>
<para>Is the input file that you want to encrypt. This file is left unchanged
by the command.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>
o</option> <replaceable>output-file</replaceable>
</term>
<listitem>
<para>Is the output file that is the encrypted form of the input file.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
</procedure>
<example xml:id="scftask-47">

<title>Encrypting and Decrypting With AES and a Passphrase</title>
<indexterm xml:id="indexterm-1613">
<primary>decrypting</primary>
<secondary>files</secondary>
</indexterm>
<indexterm xml:id="indexterm-1614">
<primary>files</primary>
<secondary>decrypting</secondary>
</indexterm>
<indexterm xml:id="indexterm-1615">
<primary>
<command>decrypt</command> command</primary>
<secondary>syntax</secondary>
</indexterm>
<para>
<indexterm xml:id="indexterm-1616">
<primary>passphrases</primary>
<secondary>storing safely</secondary>
</indexterm>
<indexterm xml:id="indexterm-1617">
<primary>storing</primary>
<secondary>passphrase</secondary>
</indexterm>In the following example, a file is encrypted with the AES algorithm.
The key is generated from the passphrase. If the passphrase is stored in a file, the
file should not be readable by anyone but the user.</para>
<screen>% <userinput>encrypt -a aes -i ticket.to.ride -o ~/enc/e.ticket.to.ride</userinput>
Enter key: <lineannotation>&lt;Type passphrase&gt;
</lineannotation>
</screen>
<para>The input file, <filename>ticket.to.ride</filename>, still exists in its original
form.</para>
<para>
<indexterm xml:id="indexterm-1618">
<primary>new features</primary>
<secondary>commands</secondary>
<tertiary>
<command>decrypt</command>
</tertiary>
</indexterm>To decrypt the output file, the user uses
the same passphrase and encryption mechanism that encrypted the file.</para>
<screen>% <userinput>decrypt -a aes -i ~/enc/e.ticket.to.ride -o ~/d.ticket.to.ride</userinput>
Enter key: <lineannotation>&lt;Type passphrase&gt;
</lineannotation>
</screen>
</example>
<example xml:id="scftask-38">

<title>Encrypting and Decrypting With AES and a Key File</title>
<para>In the following example, a file is encrypted with the AES algorithm. AES mechanisms
use a key of 128 bits, or 16 bytes.</para>
<screen>% <userinput>encrypt -a aes -k ~/keyf/05.07.aes16 \</userinput>
<userinput>-i ticket.to.ride -o ~/enc/e.ticket.to.ride</userinput> </screen>
<para>The input file, <filename>ticket.to.ride</filename>, still exists in its original
form.</para>
<para>To decrypt the output file, the user uses the same key and encryption mechanism
that encrypted the file.</para>
<screen>% <userinput>decrypt -a aes -k ~/keyf/05.07.aes16  \</userinput>
<userinput>-i ~/enc/e.ticket.to.ride -o ~/d.ticket.to.ride</userinput>
</screen>
</example>
<example xml:id="scftask-39">

<title>Encrypting and Decrypting With ARCFOUR and a Key File</title>
<para>In the following example, a file is encrypted with the ARCFOUR algorithm. The
ARCFOUR algorithm accepts a key of 8 bits (1 byte), 64 bits (8 bytes), or 128 bits
(16 bytes).</para>
<screen>% <userinput>encrypt -a arcfour -i personal.txt \</userinput>
<userinput>-k ~/keyf/05.07.rc4.8 -o ~/enc/e.personal.txt</userinput>
</screen>
<para>To decrypt the output file, the user uses the same key and encryption mechanism
that encrypted the file.</para>
<screen>% <userinput>decrypt -a arcfour -i ~/enc/e.personal.txt \</userinput>
<userinput>-k ~/keyf/05.07.rc4.8 -o ~/personal.txt</userinput>
</screen>
</example>
<example xml:id="scftask-40">

<title>Encrypting and Decrypting With 3DES and a Key File</title>
<para>In the following example, a file is encrypted with the 3DES algorithm. The 3DES
algorithm requires a key of 192 bits, or 24 bytes.</para>
<screen>% <userinput>encrypt -a 3des -k ~/keyf/05.07.des24 \</userinput>
<userinput>-i ~/personal2.txt -o ~/enc/e.personal2.txt</userinput>
</screen>
<para>To decrypt the output file, the user uses the same key and encryption mechanism
that encrypted the file.</para>
<screen>% <userinput>decrypt -a 3des -k ~/keyf/05.07.des24 \</userinput>
<userinput>-i ~/enc/e.personal2.txt -o ~/personal2.txt</userinput>
</screen>
</example>
<taskrelated role="troubleshooting">

<para>
<indexterm xml:id="indexterm-1619">
<primary>cryptographic framework</primary>
<secondary>error messages</secondary>
</indexterm>
<indexterm xml:id="indexterm-1620">
<primary>troubleshooting</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1621">
<primary>error messages</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1622">
<primary>troubleshooting</primary>
<secondary>
<command>encrypt</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1623">
<primary>
<command>encrypt</command> command</primary>
<secondary>troubleshooting</secondary>
</indexterm>
<indexterm xml:id="indexterm-1624">
<primary>
<command>encrypt</command> command</primary>
<secondary>error messages</secondary>
</indexterm>The following messages
indicate that the key that you provided to the <command>encrypt</command> command
is not permitted by the algorithm that you are using.</para>
<itemizedlist>
<listitem>
<para>
<literal>encrypt: unable to create key for crypto operation: CKR_ATTRIBUTE_VALUE_INVALID</literal>
</para>
</listitem>
<listitem>
<para>
<literal>encrypt: failed to initialize crypto operation: CKR_KEY_SIZE_RANGE</literal>
</para>
</listitem>
</itemizedlist>
<para>If you pass a key that does not meet the requirements of the algorithm, you
must supply a better key.</para>
<itemizedlist>
<listitem>
<para>One option is to use a passphrase. The framework then provides a key
that meets the requirements.</para>
</listitem>
<listitem>
<para>The second option is to pass a key size that the algorithm accepts.
For example, the DES algorithm requires a key of 64 bits. The 3DES algorithm requires
a key of 192 bits.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task>
</sect2>
</sect1>
<sect1 xml:id="scftask-28">
<title>Administering the Cryptographic Framework (Task Map)</title>
<indexterm xml:id="indexterm-1625">
<primary>task maps</primary>
<secondary>administering cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1626">
<primary>administering</primary>
<secondary>cryptographic framework task map</secondary>
</indexterm>
<para>The following task map points to procedures for administering software and hardware
providers in the Solaris Cryptographic Framework.</para>
<informaltable frame="topbot" pgwide="1">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="colspec0" colwidth="24.40*"/>
<colspec colname="colspec1" colwidth="39.40*"/>
<colspec colname="colspec2" colwidth="35.20*"/>
<thead>
<row rowsep="1">
<entry>
<para>Task</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>For Instructions</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>List the providers in the Solaris Cryptographic Framework</para>
</entry>
<entry>
<para>Lists the algorithms, libraries, and hardware devices that are available for
use in the Solaris Cryptographic Framework.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-6">How to List Available Providers</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Add a software provider</para>
</entry>
<entry>
<para>Adds a PKCS #11 library or a kernel module to the Solaris Cryptographic Framework.
The provider must be signed.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-11">How to Add a Software Provider</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Prevent the use of a user-level mechanism</para>
</entry>
<entry>
<para>Removes a software mechanism from use. The mechanism can be enabled again.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-25">How to Prevent the Use of a User-Level Mechanism</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Temporarily disable mechanisms from a kernel module</para>
</entry>
<entry>
<para>Temporarily removes a mechanism from use. Usually used for testing.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-17">How to Prevent the Use of a Kernel Software Provider</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Uninstall a provider</para>
</entry>
<entry>
<para>Removes a kernel software provider from use.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-21">Example 13–22</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>List available hardware providers</para>
</entry>
<entry>
<para>Shows the attached hardware, shows the mechanisms that the hardware provides,
and shows which mechanisms are enabled for use.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-13">How to List Hardware Providers</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Disable mechanisms from a hardware provider</para>
</entry>
<entry>
<para>Ensures that selected mechanisms on a hardware accelerator are not used.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-41">How to Disable Hardware Provider Mechanisms and
Features</olink>
</para>
</entry>
</row>
<row>
<entry>
<para>Restart or refresh cryptographic services</para>
</entry>
<entry>
<para>Ensures that cryptographic services are available.</para>
</entry>
<entry>
<para>
<olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-50">How to Refresh or Restart All Cryptographic Services</olink>
</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect1>
<sect1 xml:id="scftask-8">
<title>Administering the Cryptographic Framework</title>
<para>
<indexterm xml:id="indexterm-1627">
<primary>using</primary>
<secondary>
<command>cryptoadm</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1628">
<primary>new features</primary>
<secondary>commands</secondary>
<tertiary>
<command>cryptoadm</command>
</tertiary>
</indexterm>This section
describes how to administer the software providers and the hardware providers in the
Solaris Cryptographic Framework. Software providers and hardware providers can be
removed from use when desirable. For example, you can disable the implementation of
an algorithm from one software provider. You can then force the system to use the
algorithm from a different software provider.</para>
<sect2>
<title/>
<task id="scftask-6">

<title>How to List Available Providers</title>
<indexterm xml:id="indexterm-1629">
<primary>listing</primary>
<secondary>available providers in cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1630">
<primary>providers</primary>
<secondary>listing in cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1631">
<primary>cryptographic framework</primary>
<secondary>listing providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1632">
<primary>listing</primary>
<secondary>providers in the cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1633">
<primary>displaying</primary>
<secondary>providers in the cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1634">
<primary>cryptographic framework</primary>
<secondary>listing providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1635">
<primary>algorithms</primary>
<secondary>listing in the cryptographic framework</secondary>
</indexterm>
<tasksummary>
<para>The Solaris Cryptographic Framework provides algorithms for several types of
consumers:</para>
<itemizedlist>
<listitem>
<para>User-level providers provide a PKCS #11 cryptographic interface to
applications that are linked with the <literal>libpkcs11</literal> library</para>
</listitem>
<listitem>
<para>Kernel software providers provide algorithms for IPsec, Kerberos,
and other Solaris kernel components</para>
</listitem>
<listitem>
<para>Kernel hardware providers provide algorithms that are available to
kernel consumers and to applications through the <literal>pkcs11_kernel</literal> library</para>
</listitem>
</itemizedlist>
</tasksummary>
<procedure>
<step>
<para>
<indexterm xml:id="indexterm-1636">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>listing providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1637">
<primary>ARCFOUR kernel provider</primary>
</indexterm>
<indexterm xml:id="indexterm-1638">
<primary>AES kernel provider</primary>
</indexterm>
<indexterm xml:id="indexterm-1639">
<primary>Blowfish encryption algorithm</primary>
<secondary>kernel provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1640">
<primary>DES encryption</primary>
<secondary>kernel provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1641">
<primary>RSA kernel provider</primary>
</indexterm>
<indexterm xml:id="indexterm-1642">
<primary>SHA1 kernel provider</primary>
</indexterm>
<indexterm xml:id="indexterm-1643">
<primary>MD5 encryption algorithm</primary>
<secondary>kernel provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1644">
<primary>
<filename>pkcs11_kernel.so</filename> user-level provider</primary>
</indexterm>
<indexterm xml:id="indexterm-1645">
<primary>
<filename>pkcs11_softtoken.so</filename> user-level provider</primary>
</indexterm>
<indexterm xml:id="indexterm-1646">
<primary>libraries</primary>
<secondary>user-level providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1647">
<primary>kernel providers</primary>
<secondary>listing</secondary>
</indexterm>List
the providers in a brief format.</para>
<para>Only those mechanisms at the user level
are available for use by ordinary users.</para>
<screen>% <userinput>cryptoadm list</userinput>
user-level providers:
    /usr/lib/security/$ISA/pkcs11_kernel.so
    /usr/lib/security/$ISA/pkcs11_softtoken.so

kernel software providers:
    des
    aes
    blowfish
    arcfour
    sha1
    md5
    rsa

kernel hardware providers:
    dca/0</screen>
</step>
<step>
<para>List the providers and their mechanisms in the Solaris Cryptographic Framework.</para>
<para>
<indexterm xml:id="indexterm-1648">
<primary>viewing</primary>
<secondary>cryptographic mechanisms</secondary>
<tertiary>existing</tertiary>
</indexterm>All mechanisms are listed in
the following output. However, some of the listed mechanisms might be unavailable
for use. To list only the mechanisms that the administrator has approved for use,
see <olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-31">Example 13–15</olink>.</para>
<para>The output
is reformatted for display purposes.</para>
<screen>% <userinput>cryptoadm list -m</userinput>
user-level providers:
=====================
/usr/lib/security/$ISA/pkcs11_kernel.so: CKM_MD5,CKM_MD5_HMAC,
CKM_MD5_HMAC_GENERAL,CKM_SHA_1,CKM_SHA_1_HMAC,CKM_SHA_1_HMAC_GENERAL,
…
/usr/lib/security/$ISA/pkcs11_softtoken.so: 
CKM_DES_CBC,CKM_DES_CBC_PAD,CKM_DES_ECB,CKM_DES_KEY_GEN,
CKM_DES3_CBC,CKM_DES3_CBC_PAD,CKM_DES3_ECB,CKM_DES3_KEY_GEN,
CKM_AES_CBC,CKM_AES_CBC_PAD,CKM_AES_ECB,CKM_AES_KEY_GEN,
…
kernel software providers:
==========================
des: CKM_DES_ECB,CKM_DES_CBC,CKM_DES3_ECB,CKM_DES3_CBC
aes: CKM_AES_ECB,CKM_AES_CBC
blowfish: CKM_BF_ECB,CKM_BF_CBC
arcfour: CKM_RC4
sha1: CKM_SHA_1,CKM_SHA_1_HMAC,CKM_SHA_1_HMAC_GENERAL
md5: CKM_MD5,CKM_MD5_HMAC,CKM_MD5_HMAC_GENERAL
rsa: CKM_RSA_PKCS,CKM_RSA_X_509,CKM_MD5_RSA_PKCS,CKM_SHA1_RSA_PKCS
swrand: No mechanisms presented.

kernel hardware providers:
==========================
dca/0: CKM_MD5,CKM_MD5_HMAC,CKM_MD5_HMAC_GENERAL,…</screen>
</step>
</procedure>
<example xml:id="scftask-12">

<title>Finding the Existing Cryptographic Mechanisms</title>
<para>
<indexterm xml:id="indexterm-1649">
<primary>viewing</primary>
<secondary>cryptographic mechanisms</secondary>
<tertiary>existing</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1650">
<primary>viewing</primary>
<secondary>existing cryptographic mechanisms</secondary>
</indexterm>In the following example,
all mechanisms that the user-level library, <literal>pkcs11_softtoken</literal>, offers
are listed.</para>
<screen>% <userinput>cryptoadm list -m provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so:
CKM_DES_CBC,CKM_DES_CBC_PAD,CKM_DES_ECB,CKM_DES_KEY_GEN,
CKM_DES3_CBC,CKM_DES3_CBC_PAD,CKM_DES3_ECB,CKM_DES3_KEY_GEN,
…
CKM_SSL3_KEY_AND_MAC_DERIVE,CKM_TLS_KEY_AND_MAC_DERIVE</screen>
</example>
<example xml:id="scftask-31">

<title>Finding the Available Cryptographic Mechanisms</title>
<para>
<indexterm xml:id="indexterm-1651">
<primary>viewing</primary>
<secondary>cryptographic mechanisms</secondary>
<tertiary>available</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1652">
<primary>viewing</primary>
<secondary>available cryptographic mechanisms</secondary>
</indexterm>Policy determines which
mechanisms are available for use. The administrator sets the policy. An administrator
can choose to disable mechanisms from a particular provider. The <option>
p</option> option
displays the list of mechanisms that are permitted by the policy that the administrator
has set.</para>
<screen>% <userinput>cryptoadm list -p</userinput>
user-level providers:
=====================
/usr/lib/security/$ISA/pkcs11_kernel.so: all mechanisms are enabled.
random is enabled.
/usr/lib/security/$ISA/pkcs11_softtoken.so: all mechanisms are enabled.
random is enabled.

kernel software providers:
==========================
des: all mechanisms are enabled.
aes: all mechanisms are enabled.
blowfish: all mechanisms are enabled.
arcfour: all mechanisms are enabled.
sha1: all mechanisms are enabled.
md5: all mechanisms are enabled.
rsa: all mechanisms are enabled.
swrand: random is enabled.

kernel hardware providers:
==========================
dca/0: all mechanisms are enabled. random is enabled.</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-11">

<title>How to Add a Software Provider</title>
<indexterm xml:id="indexterm-1653">
<primary>adding</primary>
<secondary>software provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1654">
<primary>providers</primary>
<secondary>adding software provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1655">
<primary>adding</primary>
<secondary>plugins to cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1656">
<primary>
<command>svcadm</command> command</primary>
<secondary>refreshing cryptographic framework</secondary>
</indexterm>
<procedure>
<step>
<para>Assume the Primary Administrator role, or become superuser.</para>
<para>The Primary Administrator role includes the Primary Administrator profile. To create
the role and assign the role to a user, see <olink remap="external" targetdoc="819-2379" targetptr="smcover-1">Chapter 2, <citetitle remap="chapter">Working With the Solaris Management Console (Tasks),</citetitle> in <citetitle remap="book">System Administration Guide: Basic Administration</citetitle>
</olink>.</para>
</step>
<step>
<para>List the software providers that are available to the system.</para>
<screen># <userinput>cryptoadm list</userinput>
user-level providers:
        /usr/lib/security/$ISA/pkcs11_kernel.so
        /usr/lib/security/$ISA/pkcs11_softtoken.so

kernel software providers:
    des
    aes
    blowfish
    arcfour
    sha1
    md5
    rsa
    swrand

kernel hardware providers:
     dca/0</screen>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1657">
<primary>
<command>pkgadd</command> command</primary>
<secondary>installing third-party providers</secondary>
</indexterm>Add the provider's package
by using the <command>pkgadd</command> command.</para>
<screen># <userinput>pkgadd -d</userinput> <replaceable>/path/to/package</replaceable> <replaceable>pkginst</replaceable>
</screen>
<para>The package must include software that has been signed by a certificate from
Sun. To request a certificate from Sun and to sign a provider, see <olink remap="external" targetdoc="819-2145" targetptr="pkg">Appendix F, <citetitle remap="appendix">Packaging and Signing Cryptographic Providers,</citetitle> in <citetitle remap="book">Solaris Security for Developers Guide</citetitle>
</olink>.</para>
<para>The package should have scripts that notify
the cryptographic framework that another provider with a set of mechanisms is available.
For information on the packaging requirements, see <olink remap="external" targetdoc="819-2145" targetptr="pkg">Appendix F, <citetitle remap="appendix">Packaging and Signing Cryptographic Providers,</citetitle> in <citetitle remap="book">Solaris Security for Developers Guide</citetitle>
</olink>.</para>
</step>
<step>
<para>Refresh the providers.</para>
<para>
<indexterm xml:id="indexterm-1658">
<primary>service management facility</primary>
<secondary>refreshing cryptographic framework</secondary>
</indexterm>You
need to refresh providers if you added a software provider, or if you added hardware
and specified policy for the hardware.</para>
<screen># <userinput>svcadm refresh svc:/system/cryptosvc</userinput>
</screen>
</step>
<step>
<para>Locate the new provider on the list.</para>
<para>In this case, a new kernel
software provider was installed.</para>
<screen># <userinput>cryptoadm list</userinput> 
…
kernel software providers:
    des
    aes
    blowfish
    arcfour
    sha1
    md5
    rsa
    swrand
    ecc <lineannotation>&lt;-- added provider</lineannotation>
…</screen>
</step>
</procedure>
<example xml:id="scftask-48">

<title>Adding a User-Level Software Provider</title>
<indexterm xml:id="indexterm-1659">
<primary>adding</primary>
<secondary>user-level software provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1660">
<primary>providers</primary>
<secondary>adding user-level software provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1661">
<primary>providers</primary>
<secondary>adding library</secondary>
</indexterm>
<indexterm xml:id="indexterm-1662">
<primary>adding</primary>
<secondary>library plugin</secondary>
</indexterm>
<indexterm xml:id="indexterm-1663">
<primary>PKCS #11 library</primary>
<secondary>adding as provider</secondary>
</indexterm>
<para>In the following example, a signed PKCS #11 library is installed.</para>
<screen># <userinput>pkgadd -d /cdrom/cdrom0/SolarisNew</userinput>
<lineannotation>Answer the prompts</lineannotation>
# <userinput>svcadm refresh system/cryptosvc</userinput>
# <userinput>cryptoadm list</userinput>
user-level providers:
==========================
    /usr/lib/security/$ISA/pkcs11_kernel.so
    /usr/lib/security/$ISA/pkcs11_softtoken.so
    /opt/SUNWconn/lib/$ISA/libpkcs11.so.1 <lineannotation>&lt;-- added provider</lineannotation>
</screen>
<para>
<indexterm xml:id="indexterm-1664">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>installing PKCS #11 library</secondary>
</indexterm>
<indexterm xml:id="indexterm-1665">
<primary>
<command>cryptoadm install</command> command</primary>
<secondary>installing PKCS #11 library</secondary>
</indexterm>
<indexterm xml:id="indexterm-1666">
<primary>
<command>install</command> subcommand</primary>
<secondary>
<command>cryptoadm</command> command</secondary>
</indexterm>Developers who are testing a library
with the cryptographic framework can install the library manually.</para>
<screen># <userinput>cryptoadm install provider=/opt/SUNWconn/lib/'$ISA'/libpkcs11.so.1</userinput>
</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-25">

<title>How to Prevent the Use of a User-Level Mechanism</title>
<tasksummary>
<para>
<indexterm xml:id="indexterm-1667">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>disabling cryptographic mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1668">
<primary>disabling</primary>
<secondary>cryptographic mechanisms</secondary>
</indexterm>If some of the
cryptographic mechanisms from a library provider should not be used, you can remove
selected mechanisms. This procedure uses the DES mechanisms in the <filename>pkcs11_softtoken</filename> library as an example.</para>
</tasksummary>
<procedure>
<step>
<para>
<indexterm xml:id="indexterm-1669">
<primary>Crypto Management (RBAC)</primary>
<secondary>use of rights profile</secondary>
</indexterm>Become superuser or assume a role that includes
the Crypto Management rights profile.</para>
<para>To create a role that includes the
Crypto Management rights profile and assign the role to a user, see <olink remap="external" targetdoc="chapter-8.xml" targetptr="rbactask-17">Example 8–7</olink>.</para>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1670">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>
<option>
m</option> option</secondary>
</indexterm>
<indexterm xml:id="indexterm-1671">
<primary>
<option>
m</option> option</primary>
<secondary>
<command>cryptoadm</command> command</secondary>
</indexterm>List
the mechanisms that are offered by a particular user-level software provider.</para>
<screen>% <userinput>cryptoadm list -m provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so:
CKM_DES_CBC,CKM_DES_CBC_PAD,CKM_DES_ECB,CKM_DES_KEY_GEN,
CKM_DES3_CBC,CKM_DES3_CBC_PAD,CKM_DES3_ECB,CKM_DES3_KEY_GEN,
CKM_AES_CBC,CKM_AES_CBC_PAD,CKM_AES_ECB,CKM_AES_KEY_GEN,
…</screen>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1672">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>
<option>
p</option> option</secondary>
</indexterm>
<indexterm xml:id="indexterm-1673">
<primary>
<option>
p</option> option</primary>
<secondary>
<command>cryptoadm</command> command</secondary>
</indexterm>List
the mechanisms that are available for use.</para>
<screen>$ <userinput>cryptoadm list -p</userinput>
user-level providers:
=====================
…
/usr/lib/security/$ISA/pkcs11_softtoken.so: all mechanisms are enabled.
random is enabled.
…</screen>
</step>
<step>
<para>Disable the mechanisms that should not be used.</para>
<screen>$ <userinput>cryptoadm disable provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so \</userinput>
&gt; <userinput>mechanism=CKM_DES_CBC,CKM_DES_CBC_PAD,CKM_DES_ECB</userinput>
</screen>
</step>
<step>
<para>List the mechanisms that are available for use.</para>
<screen>$ <userinput>cryptoadm list -p provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so: all mechanisms are enabled,
except CKM_DES_ECB,CKM_DES_CBC_PAD,CKM_DES_CBC. random is enabled.</screen>
</step>
</procedure>
<example xml:id="scftask-46">

<title>Enabling a User-Level Software Provider Mechanism</title>
<para>In the following example, a disabled DES mechanism is again made available for
use.</para>
<screen>$ <userinput>cryptoadm list -m provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so:
CKM_DES_CBC,CKM_DES_CBC_PAD,CKM_DES_ECB,CKM_DES_KEY_GEN,
CKM_DES3_CBC,CKM_DES3_CBC_PAD,CKM_DES3_ECB,CKM_DES3_KEY_GEN,
…
$ <userinput>cryptoadm list -p provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so: all mechanisms are enabled,
except CKM_DES_ECB,CKM_DES_CBC_PAD,CKM_DES_CBC. random is enabled.
$ <userinput>cryptoadm enable provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so \</userinput>
&gt; <userinput>mechanism=CKM_DES_ECB</userinput>
$ <userinput>cryptoadm list -p provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so: all mechanisms are enabled,
except CKM_DES_CBC_PAD,CKM_DES_CBC. random is enabled.</screen>
</example>
<example xml:id="scftask-44">

<title>Enabling All User-Level Software Provider Mechanisms</title>
<para>
<indexterm xml:id="indexterm-1674">
<primary>enabling</primary>
<secondary>cryptographic mechanisms</secondary>
</indexterm>In the following example, all mechanisms from the user-level library are
enabled.</para>
<screen>$ <userinput>cryptoadm enable provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so all</userinput>
$ <userinput>cryptoadm list -p provider=/usr/lib/security/'$ISA'/pkcs11_softtoken.so</userinput>
/usr/lib/security/$ISA/pkcs11_softtoken.so: all mechanisms are enabled.
random is enabled.</screen>
</example>
<example xml:id="scftask-43">

<title>Permanently Removing User-Level Software Provider Availability</title>
<para>
<indexterm xml:id="indexterm-1675">
<primary>removing</primary>
<secondary>cryptographic providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1676">
<primary>uninstalling</primary>
<secondary>cryptographic providers</secondary>
</indexterm>In the following example, the <filename>libpkcs11.so.1</filename> library
is removed.</para>
<screen>$ <userinput>cryptoadm uninstall provider=/opt/SUNWconn/lib/'$ISA'/libpkcs11.so.1</userinput>
$ <userinput>cryptoadm list</userinput>
user-level providers:
    /usr/lib/security/$ISA/pkcs11_kernel.so
    /usr/lib/security/$ISA/pkcs11_softtoken.so

kernel software providers:
…</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-17">

<title>How to Prevent the Use of a Kernel Software Provider</title>
<indexterm xml:id="indexterm-1677">
<primary>preventing</primary>
<secondary>kernel software provider use</secondary>
</indexterm>
<indexterm xml:id="indexterm-1678">
<primary>providers</primary>
<secondary>preventing use of kernel software provider</secondary>
</indexterm>
<tasksummary>
<para>
<indexterm xml:id="indexterm-1679">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>disabling cryptographic mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1680">
<primary>removing</primary>
<secondary>cryptographic providers</secondary>
</indexterm>If the cryptographic
framework provides multiple modes of a provider such as AES, you might remove a slow
mechanism from use, or a corrupted mechanism. This procedure uses the AES algorithm
as an example.</para>
</tasksummary>
<procedure>
<step>
<para>
<indexterm xml:id="indexterm-1681">
<primary>Crypto Management (RBAC)</primary>
<secondary>use of rights profile</secondary>
</indexterm>Become superuser or assume a role that includes
the Crypto Management rights profile.</para>
<para>To create a role that includes the
Crypto Management rights profile and assign the role to a user, see <olink remap="external" targetdoc="chapter-8.xml" targetptr="rbactask-17">Example 8–7</olink>.</para>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1682">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>
<option>
m</option> option</secondary>
</indexterm>
<indexterm xml:id="indexterm-1683">
<primary>
<option>
m</option> option</primary>
<secondary>
<command>cryptoadm</command> command</secondary>
</indexterm>
<indexterm xml:id="indexterm-1684">
<primary>viewing</primary>
<secondary>cryptographic mechanisms</secondary>
<tertiary>available</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1685">
<primary>viewing</primary>
<secondary>available cryptographic mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1686">
<primary>viewing</primary>
<secondary>cryptographic mechanisms</secondary>
<tertiary>existing</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1687">
<primary>viewing</primary>
<secondary>existing cryptographic mechanisms</secondary>
</indexterm>List the mechanisms that are offered by a particular kernel software provider.</para>
<screen>$ <userinput>cryptoadm list -m provider=aes</userinput>
aes: CKM_AES_ECB,CKM_AES_CBC</screen>
</step>
<step>
<para>List the mechanisms that are available for use.</para>
<screen>$ <userinput>cryptoadm list -p provider=aes</userinput>
aes: all mechanisms are enabled.</screen>
</step>
<step>
<para>
<indexterm xml:id="indexterm-1688">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>
<option>
p</option> option</secondary>
</indexterm>
<indexterm xml:id="indexterm-1689">
<primary>
<option>
p</option> option</primary>
<secondary>
<command>cryptoadm</command> command</secondary>
</indexterm>Disable
the mechanism that should not be used.</para>
<screen>$ <userinput>cryptoadm disable provider=aes mechanism=CKM_AES_ECB</userinput>
</screen>
</step>
<step>
<para>List the mechanisms that are available for use.</para>
<screen>$ <userinput>cryptoadm list -p provider=aes</userinput>
aes: all mechanisms are enabled, except CKM_AES_ECB.</screen>
</step>
</procedure>
<example xml:id="scftask-23">

<title>Enabling a Kernel Software Provider Mechanism</title>
<indexterm xml:id="indexterm-1690">
<primary>enabling</primary>
<secondary>kernel software provider use</secondary>
</indexterm>
<indexterm xml:id="indexterm-1691">
<primary>providers</primary>
<secondary>restoring use of kernel software provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1692">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>restoring kernel software provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1693">
<primary>restoring</primary>
<secondary>cryptographic providers</secondary>
</indexterm>
<para>In the following example, a disabled AES mechanism is again made available for
use.</para>
<screen>
<userinput>cryptoadm list -m provider=aes</userinput>
aes: CKM_AES_ECB,CKM_AES_CBC
$ <userinput>cryptoadm list -p provider=aes</userinput>
aes: all mechanisms are enabled, except CKM_AES_ECB.
$ <userinput>cryptoadm enable provider=aes mechanism=CKM_AES_ECB</userinput>
$ <userinput>cryptoadm list -p provider=aes</userinput>
aes: all mechanisms are enabled.</screen>
</example>
<example xml:id="scftask-19">

<title>Temporarily Removing Kernel Software Provider Availability</title>
<para>
<indexterm xml:id="indexterm-1694">
<primary>removing</primary>
<secondary>software providers</secondary>
<tertiary>temporarily</tertiary>
</indexterm>In the following example, the AES provider
is temporarily removed from use. The <literal>unload</literal> subcommand is useful
to prevent a provider from being loaded automatically while the provider is being
uninstalled. For example, the <command>unload</command> subcommand would be used when
installing a patch that affects the provider.</para>
<screen>$ <userinput>cryptoadm unload provider=aes</userinput>
$ <userinput>cryptoadm list</userinput>
...
kernel software providers:
         des
         aes (inactive)
         blowfish
         arcfour
         sha1
         md5
         rsa
         swrand</screen>
<para>The AES provider is unavailable until the cryptographic framework is refreshed.</para>
<screen>$ <userinput>svcadm refresh system/cryptosvc</userinput>
$ <userinput>cryptoadm list</userinput>
...
kernel software providers:
         des
         aes
         blowfish
         arcfour
         sha1
         md5
         rsa
         swrand</screen>
<para>If a kernel consumer is using the kernel software provider, the software is
not unloaded. An error message is displayed and the provider continues to be available
for use.</para>
</example>
<example xml:id="scftask-21">

<title>Permanently Removing Software Provider Availability</title>
<para>
<indexterm xml:id="indexterm-1695">
<primary>removing</primary>
<secondary>software providers</secondary>
<tertiary>permanently</tertiary>
</indexterm>In the following example, the AES provider
is removed from use. Once removed, the AES provider does not appear in the policy
listing of kernel software providers.</para>
<screen>$ <userinput>cryptoadm uninstall provider=aes</userinput>
$ <userinput>cryptoadm list</userinput>
…
kernel software providers:
         des
         blowfish
         arcfour
         sha1
         md5
         rsa
         swrand</screen>
<para>If a kernel consumer is using the kernel software provider, an error message
is displayed and the provider continues to be available for use.</para>
</example>
<example xml:id="scftask-26">

<title>Reinstalling a Removed Kernel Software Provider</title>
<para>
<indexterm xml:id="indexterm-1696">
<primary>removing</primary>
<secondary>software providers</secondary>
<tertiary>permanently</tertiary>
</indexterm>In the following example, the AES kernel
software provider is reinstalled.</para>
<screen>$ <userinput>cryptoadm install provider=aes mechanism=CKM_AES_ECB,CKM_AES_CBC</userinput>
$ <userinput>cryptoadm list</userinput>
…
kernel software providers:
         des
         aes
         blowfish
         arcfour
         sha1
         md5
         rsa
         swrand</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-13">

<title>How to List Hardware Providers</title>
<indexterm xml:id="indexterm-1697">
<primary>listing</primary>
<secondary>hardware providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1698">
<primary>providers</primary>
<secondary>listing hardware providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1699">
<primary>hardware providers</primary>
<secondary>listing</secondary>
</indexterm>
<indexterm xml:id="indexterm-1700">
<primary>listing</primary>
<secondary>cryptographic framework providers</secondary>
</indexterm>
<indexterm xml:id="indexterm-1701">
<primary>hardware</primary>
<secondary>listing attached hardware accelerators</secondary>
</indexterm>
<tasksummary>
<para>
<indexterm xml:id="indexterm-1702">
<primary>hardware providers</primary>
<secondary>loading</secondary>
</indexterm>Hardware providers are automatically located and loaded. For more information,
see <olink remap="external" targetdoc="819-2251" targetptr="driver.conf-4">
<citerefentry>
<refentrytitle>driver.conf</refentrytitle>
<manvolnum>
4
</manvolnum>
</citerefentry>
</olink> man page.</para>
</tasksummary>
<taskprerequisites>

<para>When you add hardware that expects to be used within the Solaris Cryptographic
Framework, the hardware registers with the SPI in the kernel. The framework checks
that the hardware driver is signed. Specifically, the framework checks that the object
file of the driver is signed with a certificate that Sun issues.</para>
</taskprerequisites>
<procedure>
<step>
<para>List the hardware providers that are available on the system.</para>
<screen>% <userinput>cryptoadm list</userinput>
… 
kernel hardware providers:
   dca/0</screen>
</step>
<step>
<para>List the mechanisms that the board provides.</para>
<screen>% <userinput>cryptoadm list -m provider=dca/0</userinput>
dca/0: CKM_MD5,CKM_MD5_HMAC,CKM_MD5_HMAC_GENERAL,…</screen>
</step>
<step>
<para>List the mechanisms that are available for use on the board.</para>
<screen>% <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is enabled.</screen>
</step>
</procedure>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-41">

<title>How to Disable Hardware Provider Mechanisms and Features</title>
<indexterm xml:id="indexterm-1703">
<primary>providers</primary>
<secondary>disabling hardware mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1704">
<primary>hardware providers</primary>
<secondary>disabling cryptographic mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1705">
<primary>
<command>cryptoadm</command> command</primary>
<secondary>disabling hardware mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1706">
<primary>disabling</primary>
<secondary>hardware mechanisms</secondary>
</indexterm>
<indexterm xml:id="indexterm-1707">
<primary>preventing</primary>
<secondary>use of hardware mechanism</secondary>
</indexterm>
<indexterm xml:id="indexterm-1708">
<primary>mechanisms</primary>
<secondary>disabling all on hardware provider</secondary>
</indexterm>
<tasksummary>
<para>You can selectively disable mechanisms and the random number feature from a
hardware provider. To enable them again, see <olink remap="internal" targetdoc="chapter-13.xml" targetptr="scftask-42">Example 13–24</olink>.</para>
</tasksummary>
<procedure>
<step>
<para>List the mechanisms and features that are available from the board.</para>
<screen>% <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is enabled.</screen>
</step>
<step>
<para>Become superuser or assume a role that includes the Crypto Management
rights profile.</para>
<para>To create a role that includes the Crypto Management rights
profile and assign the role to a user, see <olink remap="external" targetdoc="chapter-8.xml" targetptr="rbactask-17">Example 8–7</olink>.</para>
</step>
<step>
<para>Choose the mechanisms or feature to disable:</para>
<stepalternatives>
<step>
<para>Disable selected mechanisms.</para>
<screen># <userinput>cryptoadm list -m provider=dca/0</userinput>
dca/0: CKM_MD5,CKM_MD5_HMAC,CKM_MD5_HMAC_GENERAL,…
CKM_DES_ECB,CKM_DES3_ECB…
random is enabled.
# <userinput>cryptoadm disable provider=dca/0 mechanism=CKM_DES_ECB,CKM_DES3_ECB</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled except CKM_DES_ECB,CKM_DES3_ECB.
random is enabled.</screen>
</step>
<step>
<para>Disable the random number generator.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is enabled.
# <userinput>cryptoadm disable provider=dca/0 random</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is disabled.</screen>
</step>
<step>
<para>Disable all mechanisms. Do not disable the random number generator.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is enabled.
# <userinput>cryptoadm disable provider=dca/0 mechanism=all</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are disabled. random is enabled.</screen>
</step>
<step>
<para>Disable every feature and mechanism on the hardware.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is enabled.
# <userinput>cryptoadm disable provider=dca/0 all</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are disabled. random is disabled.</screen>
</step>
</stepalternatives>
</step>
</procedure>
<example xml:id="scftask-42">

<title>Enabling Mechanisms and Features on a Hardware Provider</title>
<para>
<indexterm xml:id="indexterm-1709">
<primary>hardware providers</primary>
<secondary>enabling mechanisms and features on</secondary>
</indexterm>
<indexterm xml:id="indexterm-1710">
<primary>mechanisms</primary>
<secondary>enabling some on hardware provider</secondary>
</indexterm>
<indexterm xml:id="indexterm-1711">
<primary>adding</primary>
<secondary>hardware provider mechanisms and features</secondary>
</indexterm>
<indexterm xml:id="indexterm-1712">
<primary>enabling</primary>
<secondary>mechanisms and features on hardware provider</secondary>
</indexterm>In the following examples, disabled mechanisms on a piece
of hardware are selectively enabled.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled except CKM_DES_ECB,CKM_DES3_ECB.
random is enabled.
# <userinput>cryptoadm enable provider=dca/0 mechanism=CKM_DES3_ECB</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled except CKM_DES_ECB. random is enabled.</screen>
<para>In the following example, only the random generator is enabled.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled, except CKM_MD5,CKM_MD5_HMAC,…. 
random is disabled.
# <userinput>cryptoadm enable provider=dca/0 random</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled, except CKM_MD5,CKM_MD5_HMAC,….
random is enabled.</screen>
<para>In the following example, only the mechanisms are enabled. The random generator
continues to be disabled.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled, except CKM_MD5,CKM_MD5_HMAC,…. 
random is disabled.
# <userinput>cryptoadm enable provider=dca/0 mechanism=all</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is disabled.</screen>
<para>In the following example, every feature and mechanism on the board is enabled.</para>
<screen># <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled, except CKM_DES_ECB,CKM_DES3_ECB.
random is disabled.
# <userinput>cryptoadm enable provider=dca/0 all</userinput>
# <userinput>cryptoadm list -p provider=dca/0</userinput>
dca/0: all mechanisms are enabled. random is enabled.</screen>
</example>
</task>
</sect2>
<sect2>
<title/>
<task id="scftask-50">

<title>How to Refresh or Restart All Cryptographic Services</title>
<indexterm xml:id="indexterm-1713">
<primary>service management facility</primary>
<secondary>restarting cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1714">
<primary>
<command>svcadm</command> command</primary>
<secondary>enabling cryptographic framework</secondary>
</indexterm>
<indexterm xml:id="indexterm-1715">
<primary>
<command>svcs</command> command</primary>
<secondary>listing cryptographic services</secondary>
</indexterm>
<indexterm xml:id="indexterm-1716">
<primary>restarting</primary>
<secondary>cryptographic services</secondary>
</indexterm>
<indexterm xml:id="indexterm-1717">
<primary>cryptographic framework</primary>
<secondary>restarting</secondary>
</indexterm>
<indexterm xml:id="indexterm-1718">
<primary>refreshing</primary>
<secondary>cryptographic services</secondary>
</indexterm>
<indexterm xml:id="indexterm-1719">
<primary>cryptographic framework</primary>
<secondary>refreshing</secondary>
</indexterm>
<indexterm xml:id="indexterm-1720">
<primary>cryptographic framework</primary>
<secondary>zones and</secondary>
</indexterm>
<indexterm xml:id="indexterm-1721">
<primary>zones</primary>
<secondary>cryptographic services and</secondary>
</indexterm>
<indexterm xml:id="indexterm-1722">
<primary>new features</primary>
<secondary>commands</secondary>
<tertiary>
<command>kcfd</command>
</tertiary>
</indexterm>
<indexterm xml:id="indexterm-1723">
<primary>
<command>kcfd</command> daemon</primary>
</indexterm>
<tasksummary>
<para>By default, the Solaris Cryptographic Framework is enabled. When the <command>kcfd</command> daemon fails for any reason, the service management facility can be
used to restart cryptographic services. For more information, see the <olink remap="external" targetdoc="819-2252" targetptr="smf-5">
<citerefentry>
<refentrytitle>smf</refentrytitle>
<manvolnum>
5
</manvolnum>
</citerefentry>
</olink> and <olink remap="external" targetdoc="819-2240" targetptr="svcadm-1m">
<citerefentry>
<refentrytitle>svcadm</refentrytitle>
<manvolnum>
1M
</manvolnum>
</citerefentry>
</olink> man
pages. For the effect on zones of restarting cryptographic services, see <olink remap="external" targetdoc="chapter-12.xml" targetptr="scf-17">Cryptographic Services and Zones</olink>.</para>
</tasksummary>
<procedure>
<step>
<para>Check the status of cryptographic services.</para>
<screen>% <userinput>svcs \*cryptosvc\*</userinput>
 STATE          STIME    FMRI
offline         Dec_09   svc:/system/cryptosvc:default</screen>
</step>
<step>
<para>Become superuser or assume an equivalent role to enable cryptographic
services.</para>
<para>Roles contain authorizations and privileged commands. For more
information about roles, see <olink remap="external" targetdoc="chapter-8.xml" targetptr="rbactask-15">Configuring RBAC (Task
Map)</olink>.</para>
<screen># <userinput>svcadm enable svc:/system/cryptosvc</userinput>
</screen>
</step>
</procedure>
<example xml:id="scftask-51">

<title>Refreshing Cryptographic Services</title>
<para>In the following example, cryptographic services are refreshed in the global
zone. Therefore, kernel-level cryptographic policy in every non-global zone is also
refreshed.</para>
<screen># <userinput>svcadm refresh system/cryptosvc</userinput>
</screen>
</example>
</task>
</sect2>
</sect1>
</chapter>
