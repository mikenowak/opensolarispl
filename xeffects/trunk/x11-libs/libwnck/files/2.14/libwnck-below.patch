--- libwnck/window.c	2006-06-12 23:39:52.000000000 +0200
+++ libwnck/window.c	2006-06-13 10:42:53.000000000 +0200
@@ -52,7 +52,8 @@ static GHashTable *window_hash = NULL;
     ((window)->priv->is_fullscreen       << 8) |        \
     ((window)->priv->demands_attention   << 9) |        \
     ((window)->priv->is_urgent           << 10)|        \
-    ((window)->priv->is_above            << 11))
+    ((window)->priv->is_above            << 11)|	\
+    ((window)->priv->is_below            << 12))
 
 struct _WnckWindowPrivate
 {
@@ -104,6 +105,7 @@ struct _WnckWindowPrivate
   guint is_maximized_vert : 1;
   guint is_shaded : 1;
   guint is_above : 1;
+  guint is_below : 1;
   guint skip_pager : 1;
   guint skip_taskbar : 1;
   guint is_sticky : 1;
@@ -880,6 +882,14 @@ wnck_window_is_above                  (W
 }
 
 gboolean
+wnck_window_is_below                  (WnckWindow *window)
+{
+  g_return_val_if_fail (WNCK_IS_WINDOW (window), FALSE);
+
+  return window->priv->is_below;
+}
+
+gboolean
 wnck_window_is_skip_pager             (WnckWindow *window)
 {
   g_return_val_if_fail (WNCK_IS_WINDOW (window), FALSE);
@@ -1107,6 +1117,30 @@ wnck_window_unmake_above (WnckWindow *wi
 }
 
 void
+wnck_window_make_below (WnckWindow *window)
+{
+  g_return_if_fail (WNCK_IS_WINDOW (window));
+
+  _wnck_change_state (WNCK_SCREEN_XSCREEN (window->priv->screen),
+                      window->priv->xwindow,
+                      TRUE,
+                      _wnck_atom_get ("_NET_WM_STATE_BELOW"),
+                      0);
+}
+
+void
+wnck_window_unmake_below (WnckWindow *window)
+{
+  g_return_if_fail (WNCK_IS_WINDOW (window));
+
+  _wnck_change_state (WNCK_SCREEN_XSCREEN (window->priv->screen),
+                      window->priv->xwindow,
+                      FALSE,
+                      _wnck_atom_get ("_NET_WM_STATE_BELOW"),
+                      0);
+}
+
+void
 wnck_window_stick                   (WnckWindow *window)
 {
   g_return_if_fail (WNCK_IS_WINDOW (window));
@@ -1960,6 +1994,7 @@ update_state (WnckWindow *window)
       window->priv->is_sticky = FALSE;
       window->priv->is_shaded = FALSE;
       window->priv->is_above = FALSE;
+      window->priv->is_below = FALSE;
       window->priv->skip_taskbar = FALSE;
       window->priv->skip_pager = FALSE;
       window->priv->net_wm_state_hidden = FALSE;
@@ -1987,6 +2022,8 @@ update_state (WnckWindow *window)
             window->priv->is_shaded = TRUE;
           else if (atoms[i] == _wnck_atom_get ("_NET_WM_STATE_ABOVE"))
             window->priv->is_above = TRUE;
+          else if (atoms[i] == _wnck_atom_get ("_NET_WM_STATE_BELOW"))
+            window->priv->is_below = TRUE;
           else if (atoms[i] == _wnck_atom_get ("_NET_WM_STATE_FULLSCREEN"))
             window->priv->is_fullscreen = TRUE;
           else if (atoms[i] == _wnck_atom_get ("_NET_WM_STATE_SKIP_TASKBAR"))
@@ -2159,6 +2196,7 @@ update_actions (WnckWindow *window)
                 WNCK_WINDOW_ACTION_RESIZE                  |
                 WNCK_WINDOW_ACTION_SHADE                   |
                 WNCK_WINDOW_ACTION_ABOVE                   |
+                WNCK_WINDOW_ACTION_BELOW                   |
                 WNCK_WINDOW_ACTION_STICK                   |
                 WNCK_WINDOW_ACTION_MAXIMIZE_HORIZONTALLY   |
                 WNCK_WINDOW_ACTION_MAXIMIZE_VERTICALLY     |
@@ -2236,6 +2274,12 @@ update_actions (WnckWindow *window)
   if (wnck_screen_net_wm_supports (wnck_window_get_screen (window),
 				   "_NET_WM_STATE_ABOVE"))
       window->priv->actions |= WNCK_WINDOW_ACTION_ABOVE;
+
+  /* There's no _NET_WM_ACTION_BELOW hint so always add it if
+     window manager claims to support_NET_WM_STATE_BELOW */
+  if (wnck_screen_net_wm_supports (wnck_window_get_screen (window),
+				   "_NET_WM_STATE_BELOW"))
+      window->priv->actions |= WNCK_WINDOW_ACTION_BELOW;
 }
 
 static void
--- libwnck/window.h	2006-06-12 23:44:46.000000000 +0200
+++ libwnck/window.h	2006-06-12 23:46:01.000000000 +0200
@@ -45,7 +45,8 @@ typedef enum
   WNCK_WINDOW_STATE_FULLSCREEN             = 1 << 8,
   WNCK_WINDOW_STATE_DEMANDS_ATTENTION      = 1 << 9,
   WNCK_WINDOW_STATE_URGENT                 = 1 << 10,
-  WNCK_WINDOW_STATE_ABOVE                  = 1 << 11
+  WNCK_WINDOW_STATE_ABOVE                  = 1 << 11,
+  WNCK_WINDOW_STATE_BELOW                  = 1 << 12
 } WnckWindowState;
 
 typedef enum
@@ -67,7 +68,8 @@ typedef enum
   WNCK_WINDOW_ACTION_MAXIMIZE                = 1 << 14,
   WNCK_WINDOW_ACTION_UNMAXIMIZE              = 1 << 15,
   WNCK_WINDOW_ACTION_FULLSCREEN              = 1 << 16,
-  WNCK_WINDOW_ACTION_ABOVE                   = 1 << 17
+  WNCK_WINDOW_ACTION_ABOVE                   = 1 << 17,
+  WNCK_WINDOW_ACTION_BELOW                   = 1 << 18
 } WnckWindowActions;
 
 typedef enum
@@ -169,6 +171,7 @@ gboolean wnck_window_is_maximized_vertic
 gboolean wnck_window_is_maximized              (WnckWindow *window);
 gboolean wnck_window_is_shaded                 (WnckWindow *window);
 gboolean wnck_window_is_above                  (WnckWindow *window);
+gboolean wnck_window_is_below                  (WnckWindow *window);
 gboolean wnck_window_is_skip_pager             (WnckWindow *window);
 gboolean wnck_window_is_skip_tasklist          (WnckWindow *window);
 gboolean wnck_window_is_fullscreen             (WnckWindow *window);
@@ -198,6 +201,8 @@ void wnck_window_shade                  
 void wnck_window_unshade                 (WnckWindow *window);
 void wnck_window_make_above              (WnckWindow *window);
 void wnck_window_unmake_above            (WnckWindow *window);
+void wnck_window_make_below              (WnckWindow *window);
+void wnck_window_unmake_below            (WnckWindow *window);
 void wnck_window_stick                   (WnckWindow *window);
 void wnck_window_unstick                 (WnckWindow *window);
 void wnck_window_keyboard_move           (WnckWindow *window);
--- libwnck/window-action-menu.c	2006-06-13 02:47:07.000000000 +0200
+++ libwnck/window-action-menu.c	2006-06-13 14:18:29.000000000 +0200
@@ -34,6 +34,7 @@ typedef enum
   MINIMIZE,
   MAXIMIZE,
   ABOVE,
+  BELOW,
   MOVE,
   RESIZE,
   CHANGE_OPACITY,
@@ -62,6 +63,7 @@ struct _ActionMenuData
   GtkWidget *minimize_item;
   GtkWidget *maximize_item;
   GtkWidget *above_item;
+  GtkWidget *below_item;
   GtkWidget *move_item;
   GtkWidget *resize_item;
   GtkWidget *appearance_item;
@@ -165,6 +167,12 @@ item_activated_callback (GtkWidget *menu
       else
         wnck_window_make_above (amd->window);
       break;
+    case BELOW:
+      if (wnck_window_is_below (amd->window))
+        wnck_window_unmake_below (amd->window);
+      else
+        wnck_window_make_below (amd->window);
+      break;
     case MOVE:
       wnck_window_keyboard_move (amd->window);
       break;
@@ -409,6 +417,18 @@ update_menu_state (ActionMenuData *amd)
   gtk_widget_set_sensitive (amd->above_item,
                             (actions & WNCK_WINDOW_ACTION_ABOVE) != 0);
 
+  g_signal_handlers_block_by_func (G_OBJECT (amd->below_item),
+                                   item_activated_callback,
+                                   GINT_TO_POINTER (BELOW));
+  gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (amd->below_item),
+                                  wnck_window_is_below (amd->window));
+  g_signal_handlers_unblock_by_func (G_OBJECT (amd->below_item),
+                                     item_activated_callback,
+                                     GINT_TO_POINTER (BELOW));
+
+  gtk_widget_set_sensitive (amd->below_item,
+                            (actions & WNCK_WINDOW_ACTION_BELOW) != 0);
+
   if (wnck_window_is_pinned (amd->window))
     {
       set_item_text (amd->pin_item, _("_Only on This Workspace"));
@@ -730,6 +750,12 @@ wnck_create_window_action_menu (WnckWind
   gtk_menu_shell_append (GTK_MENU_SHELL (menu),
                          amd->above_item);
 
+  amd->below_item = make_check_menu_item (amd, BELOW,
+                                          _("_Below other windows"));
+  
+  gtk_menu_shell_append (GTK_MENU_SHELL (menu),
+                         amd->below_item);
+
   amd->move_item = make_menu_item (amd, MOVE);
   gtk_menu_shell_append (GTK_MENU_SHELL (menu),
                          amd->move_item);  
