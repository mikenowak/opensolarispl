#!/bin/bash
# Originally by Smoked
# Developers: Smoked
#	nesl247 < nesl247@gmail.com >

# TODO

beryl_packages="x11-wm/beryl-core x11-plugins/beryl-plugins x11-plugins/beryl-dbus x11-misc/beryl-manager x11-misc/beryl-settings x11-misc/emerald-themes x11-wm/emerald"
beryl_svn_packages="${beryl_packages}"
mask_file_path=/etc/portage/package.keywords

use=$( emerge --info | grep USE | sed 's/USE="//' | sed 's/"//' )

use_kde=0
use_gnome=0
use_vidcap=0

for i in ${use}
do
	if [[ ${i} == "kde" ]]; then
		use_kde=1
	elif [[ ${i} == "gnome" ]]; then
		use_gnome=1
	elif [[ ${i} == "vidcap" ]]; then
		use_vidcap=1
	fi
done

if [[ ${use_gnome} == 1 ]]; then
	beryl_svn_packages="${beryl_svn_packages} x11-wm/heliodor"
fi

if [[ ${use_kde} == 1 ]]; then
	beryl_svn_packages="${beryl_svn_packages} x11-wm/aquamarine"
fi

if [[ ${use_vidcap} == 1 ]]; then
	beryl_svn_packages="${beryl_svn_packages} x11-plugins/beryl-vidcap"
fi

cmd_args="$@"
export cmd_args

check_root() {
        if [[ ${UID} != 0  || ${USER} != "root" ]]; then
                echo "*** You must be root to run this script ***"
                echo "Please enter your root password if prompted."
                exec su -c "${0} ${cmd_args}"
                exit $(?)
        fi
}

update_overlay() {
	overlay=${2:-$( cat /etc/make.conf | grep BERYL_OVERLAY | sed 's/BERYL_OVERLAY="//' | sed 's/"//' )}

	if [[ -z ${overlay} ]]; then
		echo "BERYL_OVERLAY is not set. Please add:"
		echo "BERYL_OVERLAY=\"/path/to/the/xeffects/overlay\" to /etc/make.conf"
		exit 0
	fi

	if [[ -e /usr/bin/svn ]]; then
		echo "Updating the overlay in ${overlay}"
		svn up ${overlay}
	else
		echo "You do not have subversion installed."
		read -ep "Would you like to emerge it?" emerge_subversion

		case ${emerge_subversion} in
			[yY][eE][sS])
				emerge -1 subversion
				;;
			[nN][oO])
				exit 0
				;;
		esac

		echo "Updating the overlay in ${overlay}"
		svn up ${overlay}
	fi

}

unmask() {
        if [[ -d /etc/portage/package.keywords ]]; then
                p_k_dir=1
        else
                p_k_dir=0
        fi
	if [[ ${i} == "kde" ]]; then
		beryl_svn_packages="${beryl_svn_packages} x11-wm/aquamarine"
	elif [[ ${i} == "gnome" ]]; then
		beryl_svn_packages="${beryl_svn_packages} x11-wm/heliodor"
	elif [[ ${i} == "vidcap" ]]; then
		beryl_svn_packages="${beryl_svn_packages} x11-plugins/beryl-vidcap"
	fi
        unmask_status=0
        for package in $( echo ${beryl_svn_packages} )
        do
		p_k_file_grep=$( grep "${package}" ${mask_file_path} )
		p_k_dir_grep=$( grep -HR "${package}" ${mask_file_path}/* )

                if [[ ${p_k_dir} == 0 ]]; then
			if [[ -n ${p_k_file_grep} && ${p_k_file_grep} != "${package} -*" ]]; then
				sed "s|${package}\(.*\)|${package} -*|" ${mask_file_path}
			elif [[ ${p_k_file_grep} != "${package} -*" ]]; then
				echo "${package} -*" >> ${mask_file_path}
			fi

                        if [[ ${unmask_status} != 1 ]]; then
                                echo "Unmasking missing keywords masked packages"
                        fi

                elif [[ ${p_k_dir} == 1 ]]; then
			mask_file=$( echo ${p_k_dir_grep} | awk -F: '{print $1}' )

			if [[ -z ${mask_file} ]]; then
				mask_file="${mask_file_path}/beryl"
				touch ${mask_file}
			fi

			if [[ -n ${p_k_dir_grep} && $( cat ${mask_file} | grep ${package} ) != "${package} -*" ]]; then
				sed "s|${package}\(.*\)|${package} -*|" ${mask_file}
			elif [[ $( cat ${mask_file} | grep ${package} ) != "${package} -*" ]]; then
				echo "${package} -*" >> ${mask_file}
			fi

                        if [[ ${unmask_status} != 1 ]]; then
                                echo "Unmasking missing keywords masked packages"
                        fi
		fi

		unmask_status=1
        done
}

mask() {
        if [[ -d /etc/portage/package.keywords ]]; then
                p_k_dir=1
        else
                p_k_dir=0
        fi

	emerge_info=$( emerge --info )

	arch=$( echo ${emerge_info} | grep ACCEPT_KEYWORDS | sed 's/~.*//' | sed 's/ACCEPT_KEYWORDS="//' )
	arch=$( echo ${emerge_info} | grep ACCEPT_KEYWORDS | grep "~${arch}" )

        mask_status=0
        for package in $( echo ${beryl_svn_packages} )
        do
		p_k_file_grep=$( grep "${package}" ${mask_file_path} )
		p_k_dir_grep=$( grep -HR "${package}" ${mask_file_path}/* )

                if [[ ${p_k_dir} == 0 ]]; then
			if [[ -n ${p_k_file_grep} && ${p_k_file_grep} == "${package} -*" ]]; then
				if [[ -z ${arch} ]]; then
					sed -i "s|${package}\(.*\)|${package}|" ${mask_file_path}
				else
					sed -i "\#${package} -\*#D" ${mask_file_path}
				fi
			fi

                        if [[ ${unmask_status} != 1 ]]; then
                                echo "Masking beryl svn packages"
                        fi

                elif [[ ${p_k_dir} == 1 ]]; then
			mask_file=$( echo ${p_k_dir_grep} | awk -F: '{print $1}' )

			if [[ -z ${mask_file} ]]; then
				mask_file="${mask_file_path}/beryl"
			fi

			if [[ -n ${p_k_dir_grep} && $( cat ${mask_file} | grep ${package} ) == "${package} -*" ]]; then
				if [[ -z ${arch} ]]; then
					sed -i "s|${package}\(.*\)|${package}|" ${mask_file}
				else
					sed -i "\#${package} -\*#D" ${mask_file}
				fi
			fi

                        if [[ ${mask_status} != 1 ]]; then
                                echo "Unmasking missing keywords masked packages"
                        fi
		fi

		mask_status=1
        done

	if [[ -e ${mask_file_path} || -e ${mask_file} ]]; then
		if [[ $( du -h ${mask_file_path} | cut -c1 ) == 0 || $( du -h ${mask_file} | cut -c1 ) ]]; then
			rm -f ${mask_file_path} ${mask_file} &> /dev/null
		fi
	fi
}       

case "$1" in
        "merge")
                check_root

                echo "===== DON'T FORGET TO RUN backup FIRST IF YOU WANT TO BE ABLE TO USE revert ======"
                unmask
		update_overlay
                echo "(re)building beryl subversion packages"
                emerge --oneshot --ask --verbose ${beryl_svn_packages}
                ;;

        "backup")
                check_root

                echo "Making binary package backups of currently emerged beryl packages."
                quickpkg ${beryl_svn_packages}
                ;;

        "unmerge")
                check_root

                echo "Remasking missing keywords masked packages."
                mask

                echo "Reverting to non-svn packages. Using binary backups if available."
                emerge --oneshot --ask --verbose --usepkg ${beryl_packages}
                ;;

        "revert")
                check_root

                unmask
                echo "Reverting to the most recent binary backups of the beryl svn packages."
                emerge --oneshot --ask --verbose --usepkgonly  ${beryl_svn_packages}
                ;;

	"mask")
		check_root
		mask
		;;

	"unmask")
		check_root
		unmask
		;;

        *)
                echo "`basename ${0}` usage:"
                echo
                echo "`basename ${0}` backup"
                echo "Make binary packages out of the currently merged beryl packages."
                echo
                echo "`basename ${0}` merge"
                echo "Make sure the svn packages are unmasked and (re)merge the packages."
                echo
                echo "`basename ${0}` revert"
                echo "Make sure the svn packages are unmasked, and revert to the most recent binary backups of the beryl svn packages. Will fail if no binary packages are available."
                echo
                echo "`basename ${0}` unmerge"
                echo "Remask the svn packages and revert to the non-svn packages. Use binary package backups if available."
		echo
		echo "`basename ${0}` unmask"
		echo "Unmask the svn packages."
		echo
		echo "`basename ${0}` mask"
		echo "Mask the svn packages."
                ;;
esac

exit 0
