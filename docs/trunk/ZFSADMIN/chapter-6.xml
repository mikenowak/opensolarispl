<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML//EN" "docbook.dtd"[
	<!ENTITY % xinclude SYSTEM "xinclude.mod">
	%xinclude;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="gavvx">



<title>Praca z migawkami i klonami ZFS-a</title>
<toc>
<para>Rozdział ten opisuje jak stworzyć i zarządzać obrazami i klonami ZFS (snapshots and clones).
Rozdział ten informuje również jak zapisywać stworzone obrazy.</para>
<para>W rozdziale omówiono poniższe zagadnienia:</para>
<itemizedlist>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbciq">Obrazy ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbcya">Tworzenie i niszczenie obrazów ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbiqe">Wyświetlanie i uzyskiwanie dostępu do obrazów ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbcxk">Uzyskiwanie dostępu i przywracanie obrazów ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbcxz">Klony ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbcyg">Tworzenie klona ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbiob">Niszczenie klona ZFS</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbchx">Zapis i odtwarzanie danych ZFS</olink>
</para>
</listitem>
</itemizedlist>
</toc>
<sect1 xml:id="gbciq">
<title>Obrazy ZFS</title>
<para><emphasis>Obraz</emphasis> jest kopią systemu plików (tylko do odczytu) lub woluminu. Obrazy mogą być stworzone niemal natychmiastowo i początkowo nie nie zajmują dodatkowego miejsca na dysku poza pulą. Niemniej jednak, wraz z kolejnymi zmianami danych, obraz pochłania przestrzeń dyskową poprzez czynienie kolejnych odniesień do starych danych.<indexterm xml:id="indexterm-376">
<primary>System plików ZFS</primary>
<secondary>obraz</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-377">
<primary>obraz</primary>
<secondary>funkcje</secondary>
</indexterm>
</para>
<para>Obrazy ZFS zawierają następujące funkcje:</para>
<itemizedlist>
<listitem>
<para>Zapewniają trwałość danych.</para>
</listitem>
<listitem>
<para>Teoretyczna liczba możliwych do stworzenia obrazów wynosi 2<superscript>64</superscript>.</para>
</listitem>
<listitem>
<para>Nie używa osobnego nośnika danych na potrzeby kopii. Obrazy pochłaniają zajmują przestrzeń dyskową bezpośrednio z puli nośników danych tak samo jak system plików, pod którym zostały stworzone.</para>
</listitem>
</itemizedlist>
<para>Obrazy woluminów nie są dostępne bezpośrednio, mogą być jednakże klonowane, zapisywane, przywracane i tak dalej. Więcej informacji o  zapisywaniu obrazu ZFS-a w <olink targetdoc="" remap="internal" targetptr="gbchx">Zapis i odtwarzanie danych ZFS</olink>.</para>
<sect2 xml:id="gbcya">
<title>Tworzenie i niszczenie obrazów ZFS-a</title>
<para>Obrazy tworzone są za pomocą komendy <command>zfs snapshot</command>, której jedynym argumentem jest nazwa obrazu do utworzenia. Nazwę tworzy się w sposób nastepujący:</para>
<screen>
<replaceable>systemplików@nazwaobrazu</replaceable>
<replaceable>wolumin@nazwaobrazu</replaceable>
</screen>
<para>Nazwa obrazu musi spełniać wymogi konwencji zdefiniowane w <olink targetdoc="" remap="internal" targetptr="gbcpt">Wymogi nazewnicze komponentów ZFS-a</olink>.</para>
<para>W poniższym przykładzie utworzony zostanie obraz systemu plików <filename>tank/home/ahrens</filename> o nazwie <filename>friday</filename>.<indexterm xml:id="indexterm-378">
<primary>systemy plików ZFS-a</primary>
<secondary>obraz</secondary>
<tertiary>tworzenie</tertiary>
</indexterm>
<indexterm xml:id="indexterm-379">
<primary>tworzenie</primary>
<secondary>obrazu ZFS-a</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-380">
<primary>obraz</primary>
<secondary>tworzenie</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># <userinput>zfs snapshot tank/home/ahrens@friday</userinput>
</screen>
<para>Obrazy nie mają żadnych modyfikowalnych właściwości, nie można też do obrazu przypisać właściwości datasetu.</para>
<screen># zfs set compression=on tank/home/ahrens@tuesday
cannot set compression property for 'tank/home/ahrens@tuesday': snapshot
properties cannot be modified</screen>
<para>Obrazy niszczy się za pomocą komendy <command>zfs destroy</command>. Na przykład:</para>
<screen># <userinput>zfs destroy tank/home/ahrens@friday</userinput>
</screen>
<para>Nie można zniszczyć datasetu, jeśli wciąż istnieją obrazy tego datasetu. Na przykład:</para>
<screen># <userinput>zfs destroy tank/home/ahrens</userinput>
cannot destroy 'tank/home/ahrens': filesystem has children
use '-r' to destroy the following datasets:
tank/home/ahrens@tuesday
tank/home/ahrens@wednesday
tank/home/ahrens@thursday</screen>
<para>Jeśli dodatkowo istnieją klony obrazu, muszą zostać zniszczone zanim zniszczony będzie obraz.<indexterm xml:id="indexterm-381">
<primary>systemy plików ZFS-a</primary>
<secondary>obraz</secondary>
<tertiary>niszczenie</tertiary>
</indexterm>
<indexterm xml:id="indexterm-382">
<primary>niszczenie</primary>
<secondary>obrazy ZFS-a</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-383">
<primary>obraz</primary>
<secondary>niszczenie</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<para>Więcej informacji o podkomendzie <command>destroy</command> w <olink targetdoc="" remap="internal" targetptr="gammq">Niszczenie systemów plików ZFS-a</olink>.</para>
<sect3 xml:id="gbion">
<title>Zmiana nazwy obrazu ZFS-a</title>
<para>Zmiana nazwy obrazu jest możliwa, musi się jednak odbyć w ramach puli i datasetu, z których został utworzony. Na przykład:<indexterm xml:id="indexterm-384">
<primary>systemy plików ZFS-a</primary>
<secondary>obraz</secondary>
<tertiary>zmiana nazwy</tertiary>
</indexterm>
<indexterm xml:id="indexterm-385">
<primary>zmiana nazwy</primary>
<secondary>obraz ZFS-a</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-386">
<primary>obraz</primary>
<secondary>zmiana nazwy</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># zfs rename tank/home/cindys@031306 tank/home/cindys@today</screen>
<para>Poniższej operacji zmiany nazwy nie da się wykonać, ponieważ docelowa pula i system plików są inne, niż pula i system plików, dla których utworzono obraz.</para>
<screen># zfs rename tank/home/cindys@today pool/home/cindys@saturday
cannot rename to 'pool/home/cindys@today': snapshots must be part of same 
dataset</screen>
</sect3>
</sect2>
<sect2 xml:id="gbiqe">
<title>Przeglądanie i dostęp do obrazów ZFS-a</title>
<para>Obrazy systemu plików dostępne są w katalogu <filename>.zfs/snapshot</filename> w szczycie hierarchii zawierającego obraz systemu plików. Na przykład, jeśli system plików <filename>tank/home/ahrens</filename> zamontowano w katalogu  <filename>/home/ahrens</filename>, to obraz <filename>tank/home/ahrens@thursday</filename> będzie dostępny w katalogu <filename>/home/ahrens/.zfs/snapshot/thursday</filename>.<indexterm xml:id="indexterm-387">
<primary>systemy plików ZFS-a</primary>
<secondary>obraz</secondary>
<tertiary>dostęp</tertiary>
</indexterm>
<indexterm xml:id="indexterm-388">
<primary>dostęp</primary>
<secondary>ZFS snapshot</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-389">
<primary>obraz</primary>
<secondary>dostęp</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># <userinput>ls /home/ahrens/.zfs/snapshot</userinput>
tuesday wednesday thursday</screen>
<para>Listę obrazów można wydrukować nastepująco:</para>
<screen># <userinput>zfs list -t snapshot</userinput>
NAME                        USED  AVAIL  REFER  MOUNTPOINT
pool/home/anne@monday          0      -   780K  -
pool/home/bob@monday           0      -  1.01M  -
tank/home/ahrens@tuesday   8.50K      -   780K  -
tank/home/ahrens@wednesday 8.50K      -  1.01M  -
tank/home/ahrens@thursday      0      -  1.77M  -
tank/home/cindys@today     8.50K      -   524K  -</screen>
<para>Listę obrazów dla konkretnego systemu plików można wydrukować następująco:</para>
<screen># <userinput>zfs list -r -t snapshot -o name,creation pool/home</userinput>
NAME                   CREATION
pool/home/anne@monday  Mon Mar 13 11:46 2006
pool/home/bob@monday   Mon Mar 13 11:46 2006</screen>
<sect3 xml:id="gbcxc">
<title>Zużycie miejsca przez obraz</title>
<para>Po utworzeniu obrazu współdzieli on początkowo miejsce z systemem plików oraz, być może, z poprzednimi obrazami. Wraz z postępowaniem zmian w systemie plików, współdzielone uprzednio miejsce staje się unikalne dla obrazu i zostaje wliczone do właściwości obrazu <property>used</property>. Dodatkowo, usunięcie obrazu może spowodować wzrost unikalnej przestrzeni 
(a tym samym również <emphasis>used</emphasis>) innych obrazów.</para>
<para>Właściwość <property>referenced</property> przestrzeni obrazu jest taka sama jak systemu plików, kiedy obraz został utworzony.<indexterm xml:id="indexterm-390">
<primary>systemy plików ZFS-a</primary>
<secondary>zużycie miejsca przez obraz</secondary>
</indexterm>
<indexterm xml:id="indexterm-391">
<primary>obraz</primary>
<secondary>zużycie miejsca</secondary>
</indexterm>
</para>
</sect3>
</sect2>
<sect2 xml:id="gbcxk">
<title>Powrót do obrazu ZFS-a</title>
<para>Przy pomocy komendy <command>zfs rollback</command> mozna cofnąć wszystkie zmiany aż do momentu utworzenia dowolnego obrazu. System plików powraca do stanu z momentu utworzenia obrazu. Domyślnie nie można cofnąć się dalej, niż do ostatniego obrazu.</para>
<para>Zanim będzie można cofnąć się do wcześniejszego obrazu, wszystkie obrazy utworzone później należy zniszczyć. Można to zrobić za pomocą opcji <option> r</option>.</para>
<para>Jeśli istnieją klony pośrednich obrazów, należy zniszczyć je za pomocą opcji <option>R</option>. </para>
<note>
<para>Należy odmontować i ponownie zamontować system plików, aby cofnięcie do obrazu powiodło się. Jeśli nie można odmontować systemu plików, nie uda się wycofanie zmian. W celu wymuszenia odmontowania systemu plików można użyć opcji <option>f</option>.</para>
</note>
<para>W poniższym przykładzie system plików <filename>tank/home/ahrens</filename> cofany jest do obrazu o nazwie <filename>tuesday</filename>:<indexterm xml:id="indexterm-392">
<primary>systemy plików ZFS-a</primary>
<secondary>obraz</secondary>
<tertiary>wycofywanie zmian</tertiary>
</indexterm>
<indexterm xml:id="indexterm-393">
<primary>wycofywanie zmian</primary>
<secondary>obraz ZFS-a</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-394">
<primary>obraz</primary>
<secondary>wycofywanie zmian</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># <userinput>zfs rollback tank/home/ahrens@tuesday</userinput>
cannot rollback to 'tank/home/ahrens@tuesday': more recent snapshots exist
use '-r' to force deletion of the following snapshots:
tank/home/ahrens@wednesday
tank/home/ahrens@thursday
# <userinput>zfs rollback -r tank/home/ahrens@tuesday</userinput>
</screen>
<para>W powyższym przykładzie obrazy o nazwach <literal>wednesday</literal> i <literal>thursday</literal> zostały zniszczone, ponieważ wycofywano system do poprzedzającego je obrazu o nazwie <literal>tuesday</literal>.</para>
<screen># <userinput>zfs list -r -t snapshot -o name,creation tank/home/ahrens</userinput>
NAME                  CREATION
tank/home/ahrens@tuesday  Mon Mar 13 11:05 2006</screen>
</sect2>
</sect1>
<sect1 xml:id="gbcxz">
<title>Klony ZFS-a</title>
<para><emphasis>Klon</emphasis> jest zapisywalnym woluminem lub systemem plików, którego początkowa zawartość jest taka sama, jak zawartość datasetu, z którego został utworzony. Podobnie jak w przypadku obrazów, tworzenie klonów jest natychmiastowe i początkowo nie zajmuje miejsca na dysku.<indexterm xml:id="indexterm-395">
<primary>systemy plików ZFS-a</primary>
<secondary>klony</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-396">
<primary>klony</primary>
<secondary>możliwości</secondary>
</indexterm>
</para>
<para>Klony można utworzyć wyłącznie z obrazu. Po sklonowaniu obrazu powstaje implikowana zależność między klonem a obrazem. Pomimo tego, że klon jest tworzony w innym miejscu hierarchii datasetu, nie można zniszczyć oryginalnego obrazu tak długo, jak długo istnieje jego klon. Właściwość <property>origin</property> eksponuje tę zależność, a komenda <command>zfs destroy</command> podaje listę takich zależności, jeśli istnieją.</para>
<para>Klony nie dziedziczą właściwości dataestu, z którego są tworzone, ale raczej dziedziczą właściwości wynikłe z miejsca utworzenia ich w hierarchii puli. Do drukowania i modyfikowania właściwości sklonowanego datasetu służą odpowiednio komendy <command>zfs get</command> i <command>zfs set</command>.
Więcej informacji o ustawianiu właściwości datasetu ZFS-a w <olink targetdoc="" remap="internal" targetptr="gazsp">Ustawianie własciwości ZFS-a</olink>.</para>
<para>Klon zaraz po utworzeniu współdzieli przestrzeń dyskową z oryginalnym obrazem, dlatego jego właściwość <property>used</property> jest początkowo równa zeru. W miarę postępowania zmian w klonie, zaczyna on zużywac więcej przestrzeni. Właściwość <property>used</property> oryginalnego obrazu nie obejmuje przestrzeni zużytej przez jego klony.</para>
<sect2 xml:id="gbcyg">
<title>Creating a ZFS Clone</title>
<para>To create a clone, use the <command>zfs clone</command> command, specifying
the snapshot from which to create the clone, and the name of the new file
system or volume. The new file system or volume can be located anywhere in
the ZFS hierarchy. The type of the new dataset (for example, file system or
volume) is the same type as the snapshot from which the clone was created.
You cannot create clone of a file system in a pool that this different from
where the original file system snapshot resides. <indexterm xml:id="indexterm-397">
<primary>systemy plików ZFS-a</primary>
<secondary>clone</secondary>
<tertiary>tworzenie</tertiary>
</indexterm>
<indexterm xml:id="indexterm-398">
<primary>tworzenie</primary>
<secondary>ZFS clone</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-399">
<primary>clones</primary>
<secondary>tworzenie</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<para>In the following example, a new clone named <literal>tank/home/ahrens/bug123</literal> with the same initial contents as the snapshot <literal>tank/ws/gate@yesterday</literal> is created.</para>
<screen># <userinput>zfs snapshot tank/ws/gate@yesterday</userinput>
# <userinput>zfs clone tank/ws/gate@yesterday tank/home/ahrens/bug123</userinput>
</screen>
<para>In the following example, a cloned workspace is created from the <filename>projects/newproject@today</filename> snapshot for a temporary user as <filename>projects/teamA/tempuser</filename>. Then, properties are set on the cloned workspace.</para>
<screen># <userinput>zfs snapshot projects/newproject@today</userinput>
# <userinput>zfs clone projects/newproject@today projects/teamA/tempuser</userinput>
# <userinput>zfs set sharenfs=on projects/teamA/tempuser</userinput>
# <userinput>zfs set quota=5G projects/teamA/tempuser</userinput>
</screen>
</sect2>
<sect2 xml:id="gbiob">
<title>Destroying a ZFS Clone</title>
<para>ZFS clones are destroyed by using the <command>zfs destroy</command> command.
For example:<indexterm xml:id="indexterm-400">
<primary>systemy plików ZFS-a</primary>
<secondary>clone</secondary>
<tertiary>destroying</tertiary>
</indexterm>
<indexterm xml:id="indexterm-401">
<primary>destroying</primary>
<secondary>ZFS clone</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-402">
<primary>clones</primary>
<secondary>destroying</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># <userinput>zfs destroy tank/home/ahrens/bug123</userinput>
</screen>
<para>Clones must be destroyed before the parent snapshot can be destroyed.</para>
</sect2>
</sect1>
<sect1 xml:id="gbchx">
<title>Saving and Restoring ZFS Data</title>
<para>The <command>zfs send</command> command creates a stream representation
of a snapshot that is written to standard output. By default, a full stream
is generated. You can redirect the output to a file or to a different system.
The <command>zfs receive</command> command creates a snapshot whose contents
are specified in the stream that is provided on standard input. If a full
stream is received, a new file system is created as well. You can save ZFS
snapshot data and restore ZFS snapshot data and file systems with these commands.
See the examples in the next section.<indexterm xml:id="indexterm-403">
<primary>saving and restoring</primary>
<secondary>ZFS file system data</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-404">
<primary>systemy plików ZFS-a</primary>
<secondary>saving and restoring</secondary>
<tertiary>opis</tertiary>
</indexterm>
</para>
<para>The following solutions for saving ZFS data are provided:</para>
<itemizedlist>
<listitem>
<para>Saving ZFS snapshots and rolling back snapshots, if necessary.</para>
</listitem>
<listitem>
<para>Saving full and incremental copies of ZFS snapshots and restoring
the snapshots and file systems, if necessary.</para>
</listitem>
<listitem>
<para>Remotely replicating ZFS file systems by saving and restoring
ZFS snapshots and file systems.</para>
</listitem>
<listitem>
<para>Saving ZFS data with archive utilities such as <command>tar</command> and <command>cpio</command> or third-party backup products.</para>
</listitem>
</itemizedlist>
<para>Consider the following when choosing a solution for saving ZFS data:</para>
<itemizedlist>
<listitem>
<para>File system snapshots and rolling back snapshots – Use
the <command>zfs snapshot</command> and <command>zfs rollback</command> commands
if you want to easily create a copy of a file system and revert back to a
previous file system version, if necessary. For example, if you want to restore
a file or files from a previous version of a file system, you could use this
solution.</para>
<para>For more information about creating and rolling back
to a snapshot, see <olink targetdoc="" remap="internal" targetptr="gbciq">ZFS Snapshots</olink>.</para>
</listitem>
<listitem>
<para>Saving snapshots – Use the <command>zfs send</command> and <command>zfs receive</command> commands to save and restore a ZFS snapshot. You can
save incremental changes between snapshots, but you cannot restore files individually.
You must restore the entire file system snapshot.</para>
</listitem>
<listitem>
<para>Remote replication – Use the <command>zfs send</command> and <command>zfs receive</command> commands when you want to copy
a file system from one system to another. This process is different from a
traditional volume management product that might mirror devices across a WAN.
No special configuration or hardware is required. The advantage of replicating
a ZFS file system is that you can re-create a file system on a storage pool
on another system, and specify different levels of configuration for the newly
created pool, such as RAID-Z, but with identical file system data.</para>
</listitem>
</itemizedlist>
<sect2 xml:id="gbscu">
<title>Saving ZFS Data With Other Backup Products</title>
<para>In addition to the <command>zfs send</command> and <command>zfs receive</command> commands,
you can also use archive utilities, such as the <command>tar</command> and <command>cpio</command> commands, to save ZFS files. All of these utilities save and
restore ZFS file attributes and ACLs. Check the appropriate options for both
the <command>tar</command> and <command>cpio</command> commands.</para>
<para>For update-to-date information about issues with ZFS and third-party
backup products, please see the Solaris Express release notes.</para>
</sect2>
<sect2 xml:id="gbinw">
<title>Saving a ZFS Snapshot</title>
<para>The simplest form of the <command>zfs send</command> command is to save
a copy of a snapshot. For example:<indexterm xml:id="indexterm-405">
<primary>saving</primary>
<secondary>ZFS file system data (<command>zfs send</command>)</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-406">
<primary>
<command>zfs send</command>
</primary>
<secondary>(przykład)</secondary>
</indexterm>
<indexterm xml:id="indexterm-407">
<primary>systemy plików ZFS-a</primary>
<secondary>saving data streams (<command>zfs send</command>)</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># <userinput>zfs send tank/dana@040706 &gt; /dev/rmt/0</userinput>
</screen>
<para>You can save incremental data by using the <command>zfs send</command> <option>
i</option> option. For example:</para>
<screen># <userinput>zfs send -i tank/dana@040706 tank/dana@040806 &gt; /dev/rmt/0</userinput>
</screen>
<para>Note that the first argument is the earlier snapshot and the second
argument is the later snapshot.</para>
<para>If you need to store many copies, you might consider compressing a ZFS
snapshot stream representation with the <command>gzip</command> command. For
example:</para>
<screen># <userinput>zfs send pool/fs@snap | gzip &gt; backupfile.gz</userinput>
</screen>
</sect2>
<sect2 xml:id="gbimy">
<title>Restoring a ZFS Snapshot</title>
<para>When you restore a file system snapshot, the file system is restored
as well. The file system is unmounted and is inaccessible while it is being
restored. In addition, the original file system to be restored must not exist
while it is being restored. If a conflicting file system name exists, <command>zfs
rename</command> can be used to rename the file system. For example:<indexterm xml:id="indexterm-408">
<primary>restoring</primary>
<secondary>ZFS file system data (<command>zfs receive</command>)</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-409">
<primary>
<command>zfs receive</command>
</primary>
<secondary>(przykład)</secondary>
</indexterm>
<indexterm xml:id="indexterm-410">
<primary>systemy plików ZFS-a</primary>
<secondary>restoring data streams (<command>zfs receive</command>)</secondary>
<tertiary>(przykład)</tertiary>
</indexterm>
</para>
<screen># <userinput>zfs send tank/gozer@040706 &gt; /dev/rmt/0</userinput>

.
.
.
# <userinput>zfs receive tank/gozer2@today &lt; /dev/rmt/0</userinput>
# <userinput>zfs rename tank/gozer tank/gozer.old</userinput>
# <userinput>zfs rename tank/gozer2 tank/gozer</userinput>
</screen>
<para>You can use <command>zfs recv</command> as an alias for the <command>zfs
receive</command> command.</para>
<para>When you restore an incremental file system snapshot, the most recent
snapshot must first be rolled back. In addition, the destination file system
must exist. In the following example, the previous incremental saved copy
of <filename>tank/dana</filename> is restored.</para>
<screen># <userinput>zfs rollback tank/dana@040706</userinput>
cannot rollback to 'tank/dana@040706': more recent snapshots exist
use '-r' to force deletion of the following snapshots:
tank/dana@now
# <userinput>zfs rollback -r tank/dana@040706/</userinput>
# <userinput>zfs recv tank/dana &lt; /dev/rmt/0</userinput>
</screen>
<para>During the incremental restore process, the file system is unmounted
and cannot be accessed.</para>
</sect2>
<sect2 xml:id="gbinz">
<title>Remote Replication of ZFS Data</title>
<para>You can use the <command>zfs send</command> and <command>zfs recv</command> commands
to remotely copy a snapshot stream representation from one system to another
system. For example:</para>
<screen># <userinput>zfs send tank/cindy@today | ssh newsys zfs recv sandbox/restfs@today</userinput>
</screen>
<para>This command saves the <filename>tank/cindy@today</filename> snapshot
data and restores it into the <filename>sandbox/restfs</filename> file system
and also creates a <filename>restfs@today</filename> snapshot on the <literal>newsys</literal> system. In this example, the user has been configured to use <command>ssh</command> on the remote system.</para>
</sect2>
</sect1>
</chapter>
