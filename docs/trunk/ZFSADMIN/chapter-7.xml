<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML//EN" "docbook.dtd"[
	<!ENTITY % xinclude SYSTEM "xinclude.mod">
	%xinclude;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ftyxi">



<title>Używanie ACL do ochrony plików w ZFS-ie</title>
<toc>
<para>Ten rozdział dostarcza informacji na temat używania list kontroli dostępu (ACL)
do ochrony plików w ZFS-ie poprzez dostarczenie bardziej dokładnych uprawnień niż
standardowe UNIX.</para>
<para>Rozdział składa się z następujących podrozdziałów:</para>
<itemizedlist>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbacb">Nowy model ACL-i w Solarisie</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbace">Ustawianie ACL-i dla plików w ZFS-ie</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbabw">Ustawianie i wyświetlanie ACL-i dla plików w ZFS-ie w formacie rozszerzonym</olink>
</para>
</listitem>
<listitem>
<para>
<olink targetdoc="" remap="internal" targetptr="gbchf">Ustawianie i wyświetlanie ACL-i dla plików w ZFS-ie w formacie skróconym</olink>
</para>
</listitem>
</itemizedlist>
</toc>
<sect1 xml:id="gbacb">
<title>Nowy model ACL-i w Solarisie</title>
<para>Do niedawna poprzednie wersje Solarisa wspierały implementację ACL, która
była przede wszystkim oparta na specyfikacji POSIX-draft. ACL oparte na tej
specyfikacji są używane do ochrony plików dla UFS-a i tłumaczone dla NFS-a
w wersji poprzedniej niż NFSv4.<indexterm xml:id="indexterm-411">
<primary>ACL-e</primary>
<secondary>opis</secondary>
</indexterm>
<indexterm xml:id="indexterm-412">
<primary>NFSv4 ACLs</primary>
<secondary>model</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-413">
<primary>ACL-e Solarisa</primary>
<secondary>nowy model</secondary>
<tertiary>opis</tertiary>
</indexterm>
</para>
<para>Wraz z wprowadzeniem NFSv4 został określony nowy model ACL, który w pełni wspiera
współpracę, jaką NFSv4 zapewnia pomiędzy klientami UNIX-owymi jak i nie-UNIX-owymi.
Nowa implementacja ACL-i zdefiniowana w specyfikacji NFSv4 dostarcza znacznie bogatszą
semantykę opartą o ACL-e w stylu NT.</para>
<para>Główne różnice w nowym modelu ACL są następujące:</para>
<itemizedlist>
<listitem>
<para>Oparte o specyfikację NFSv4 i podobne do ACL-i w stylu NT.</para>
</listitem>
<listitem>
<para>Dostarczają bardziej dokładny zestaw uprawnień dostępu. Więcej informacji znajduje się
w <olink targetdoc="" remap="internal" targetptr="gbbht">tabeli 7–2</olink>.</para>
</listitem>
<listitem>
<para>Ustawiane i wyświetlane raczej za pomocą poleceń <command>chmod</command> oraz <command>ls</command> niż <command>setfacl</command> i <command>getfacl</command>.</para>
</listitem>
<listitem>
<para>Dostarczają bogatszą semantykę dziedziczenia do określania jak prawa dostępu
są przenoszone z katalogu na podkatalogi i głębiej. Więcej informacji znajduje się pod
<olink targetdoc="" remap="internal" targetptr="gbaax">ACL Inheritance</olink>.</para>
</listitem>
</itemizedlist>
<para>Obydwa modele ACL dostarczają bardziej szczegółową kontrolę dostępu niż
standardowe uprawnienia plików. Podobnie jak ACL-e oparte o POSIX-draft (nieostateczną wersję dokumentu, szkic), nowe ACL-e
są słożone z wielu wpisów kontroli dostępu (ACE).</para>
<para>ACL oparty o POSIX-draft używa pojedynczego wpisu w celu zdefiniowania jakie prawa
są zdefiniowane, a jakie zabronione. Nowy model ACL ma dwa rodzaje wpisów ACE, które
wpływają na sprawdzanie dostępu: <literal>ALLOW</literal> oraz <literal>DENY</literal>.
W związku z tym nie można wywnioskować z jakiegokolwiek pojedynczego wpisu ACE, czy
definiuje prawa dostępu bądź nie, jeśli nie zostanie zdefiniowany, czy ten
ACE jest dozwolony, czy zabroniony.<indexterm xml:id="indexterm-414">
<primary>ACL-e</primary>
<secondary>różnice w stosunku do ACL-i z POSIX-draft</secondary>
</indexterm>
<indexterm xml:id="indexterm-415">
<primary>ACL-e NFSv4</primary>
<secondary>różnice w stosunku do ACL-i z POSIX-draft</secondary>
</indexterm>
<indexterm xml:id="indexterm-416">
<primary>ACL-e Solarisa</primary>
<secondary>różnice w stosunku do ACL-i z POSIX-draft</secondary>
</indexterm>
<indexterm xml:id="indexterm-417">
<primary>ACL-E z POSIX-draft</primary>
<secondary>opis</secondary>
</indexterm>
</para>
<para>Konwersja ACL-i pomiędzy tymi w stylu NFSv4 a POSIX-draft przebiega następująco:</para>
<itemizedlist>
<listitem>
<para>W przypadku używania narzędzi świadomych ACL-i, takich jak polecenia <command>cp</command>, <command>mv</command>, <command>tar</command>, <command>cpio</command> lub <command>rcp</command> do przeniesienia plików z UFS-a z ACL-ami na ZFS, ACL-e POSIX-draft są tłumaczone na odpowiednie ACL-e w stylu NFSv4.</para>
</listitem>
<listitem>
<para>Niektóre ACL-e w stylu NFSv4 są tłumaczone na ACL-e POSIX-draft.
W przypadku, gdy wpis ACL w stylu NFSv4 nie jest tłumaczony na odpowiedni ACL POSIX-draft,
pokaże się komunikat podobny do poniższego:</para>
<screen># cp -p filea /var/tmp
cp: failed to set acl entries on /var/tmp/filea</screen>
</listitem>
<listitem>
<para>W przypadku utworzenia archiwum UFS <command>tar</command> or <command>cpio</command>
z opcją zachowywania ACL (<command>tar</command> <option>
p</option> lib <command>cpio</command> <option>
P</option>) na systemie, który działa pod kontrolą aktualnego wydania Solarisa,
ACL-e zostaną stracone w przypadku odtworzenia tego archiwum na systemie,
który działa pod kontrolą poprzedniego wydania Solarisa.</para>
<para>Wszystkie pliki zostaną odtworzone z prawidłowymi standardowymi uprawnieniami,
ale wpisy ACL zostaną zignorowane.</para>
</listitem>
<listitem>
<para>Można użyć polecenia <command>ufsrestore</command> do odtworzenia danych
na system plików ZFS, ale wpisy ACL zostaną utracone.</para>
</listitem>
<listitem>
<para>Przy próbie ustawienia ACL-a w stylu NFSv4 dla pliku na UFS-ie, pokaże
się komunikat podobny do poniższego:</para>
<screen>chmod: ERROR: ACL type's are different</screen>
</listitem>
<listitem>
<para>Przy próbie ustawienia ACL-a w stylu POSIX dla pliku na ZFS-ie, pokaże
się komunikat podobny do poniższego:</para>
<screen># getfacl filea
File system doesn't support aclent_t style ACL's.
See acl(5) for more information on Solaris ACL support.</screen>
</listitem>
</itemizedlist>
<para>Więcej informacji na temat ograniczeń związanych z ACL-ami i produktami do backupu znajduje się
pod <olink targetdoc="" remap="internal" targetptr="gbscu">Saving ZFS Data With Other Backup Products</olink>.</para>
<sect2 xml:id="gbaay">
<title>Opis składni dla ustawiania ACL-i</title>
<para>Dostarczane są dwa podstawowe formaty ACL-i:<indexterm xml:id="indexterm-418">
<primary>ACL-e</primary>
<secondary>opis formatu</secondary>
</indexterm>
<indexterm xml:id="indexterm-419">
<primary>NFSv4 ACLs</primary>
<secondary>opis formatu</secondary>
</indexterm>
<indexterm xml:id="indexterm-420">
<primary>ACL-e Solarisa</primary>
<secondary>opis formatu</secondary>
</indexterm>
</para>
<para>
<emphasis role="strong">Składnia dla ustawiania podstawowych ACL-i</emphasis>
</para>
<para>
<literal>chmod [opcje] A[indeks]{+|=}owner@, group@, everyone@:</literal>
<emphasis>prawa-dostępu</emphasis>/...[:<emphasis>flagi-dziedziczenia</emphasis>]:<literal>deny | allow</literal> <replaceable>plik</replaceable>
</para>
<para>
<literal>chmod [opcje] A-owner@, group@, everyone@:</literal>
<emphasis>prawa-dostępu</emphasis>/...[:<emphasis>flagi-dziedziczenia</emphasis>]:<literal>deny | allow</literal> <replaceable>plik ...</replaceable>
</para>
<para>
<literal>chmod [opcje] A[indeks]-</literal> <replaceable>plik</replaceable>
</para>
<para>
<emphasis role="strong">Składnia dla ustawiania dokładnych ACL-i</emphasis>
</para>
<para>
<literal>chmod [opcje] A[indeks]{+|=}user|group:</literal>
<emphasis>prawa-dostępu</emphasis>/...[:<emphasis>flagi-dziedziczenia</emphasis>]<literal>:deny | allow</literal> <replaceable>plik</replaceable>
</para>
<para>
<literal>chmod [opcje] A-user|group:</literal>
<emphasis>prawa-dostępu</emphasis>/...[:<emphasis>flagi-dziedziczenia</emphasis>]<literal>:deny | allow</literal> <replaceable>plik ...</replaceable>
</para>
<para>
<literal>chmod [opcje] A[indeks]-</literal> <replaceable>plik</replaceable>
</para>
<variablelist>
<varlistentry>
<term>owner@, group@, everyone@</term>
<listitem>
<para>Określa <emphasis>typ-wpisu-ACL</emphasis> dla podstawowej składni ACL
Opis <emphasis>typów-wpisu-ACL</emphasis> znajduje się w <olink targetdoc="" remap="internal" targetptr="gbbhr">tabeli 7–1</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>user lub group:<emphasis>ID-wpisu-ACL=nazwausera lub nazwagrupy</emphasis>
</term>
<listitem>
<para>Określa <emphasis>typ-wpisu-ACL</emphasis> dla dokładnej składni ACL.
Wpis tego typu musi także zawierać <emphasis>ID-wpisu-ACL</emphasis>, <emphasis>nazwausera</emphasis> lub <emphasis>nazwagrupy</emphasis>. Opis <emphasis>typów-wpisu-ACL</emphasis> znajduje się w <olink targetdoc="" remap="internal" targetptr="gbbhr">tabeli 7–1</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>prawa-dostępu</emphasis>/.../</term>
<listitem>
<para>Określa prawa dostępu, które mogą być przydzielone lub zabronione. Opis praw dostępu ACL
znajduje się w <olink targetdoc="" remap="internal" targetptr="gbbht">tabeli 7–2</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>flagi-dziedziczenia</emphasis>
</term>
<listitem>
<para>Określa listę opcjonalnych flag dziedziczenia wpisów ACL.
Opis flag dziedziczenia ACL znajduje się w <olink targetdoc="" remap="internal" targetptr="gbbhx">tabeli 7–3</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>deny</literal> | <literal>allow</literal>
</term>
<listitem>
<para>Określa, czy podane uprawnienia są dozwolone, czy zabronione.</para>
</listitem>
</varlistentry>
</variablelist>
<para>W poniższym przykładzie wartość <emphasis>ID-wpisu-ACL</emphasis>
jest nieistotna. </para>
<screen>group@:write_data/append_data/execute:deny</screen>
<para>Poniższy przykład zawiera podaną wartość <emphasis>ID-wpisu-ACL</emphasis>,
ponieważ w ACL (<emphasis>typ-wpisu-ACL</emphasis>) jest zawarty określony użytkownik.</para>
<screen>0:user:gozer:list_directory/read_data/execute:allow</screen>
<para>Wyświetlony wpis ACL wygląda podobnie jak poniżej:</para>
<screen>
<userinput>2</userinput>:group@:write_data/append_data/execute:deny</screen>
<para>Liczba <emphasis role="strong">2</emphasis> lub określony <emphasis>indeks-ID</emphasis>
w tym przykładzie określa wpis ACL w większej liście, która może mieć wiele
wpisów dla właściciela pliku, określonych UID-ów, grupy lub każdego. Można
określać <emphasis>indeks-ID</emphasis> przy użyciu polecenia <command>chmod</command>
w celu wskazania właściwej części listy ACL do modyfikacji. Na przykład
w celu wskazania wpisu o indeksie ID 3, można użyć opcji <literal>A3</literal>
dla polecenia <command>chmod</command> w sposób podobny do poniższego:</para>
<screen>chmod A3=user:venkman:read_acl:allow <emphasis>plik</emphasis>
</screen>
<para>Typy wpisów ACL, które są reprezentacją właściciela, grupy i pozostałych użytkowników,
są opisane w poniższej tabeli.<indexterm xml:id="indexterm-421">
<primary>ACL-e</primary>
<secondary>typy wpisów</secondary>
</indexterm>
</para>
<table frame="topbot" xml:id="gbbhr">

<title>Typy wpisów ACL</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="23.49*"/>
<colspec colwidth="76.51*"/>
<thead>
<row rowsep="1">
<entry>
<para>Typ wpisu ACL</para>
</entry>
<entry>
<para>Opis</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>
<literal>owner@</literal>
</para>
</entry>
<entry>
<para>Określa dostęp przyznany dla właściciela obiektu.</para>
</entry>
</row>
<row>
<entry>
<para>
<literal>group@</literal>
</para>
</entry>
<entry>
<para>Określa dostęp przyznany dla przynależącej grupy dla obiektu.</para>
</entry>
</row>
<row>
<entry>
<para>
<literal>everyone@</literal>
</para>
</entry>
<entry>
<para>Określa dostęp przyznany jakiemukolwiek użytkownikowi lub grupie, która nie
pasuje do jakiegokolwiek pozostałego wpisu ACL.</para>
</entry>
</row>
<row>
<entry>
<para>
<literal>user</literal>
</para>
</entry>
<entry>
<para>Z podaną nazwą użytkownika określa dostęp przyznany dodatkowemu użytkownikowi
do obiektu. Musi zawierać <emphasis>ID-wpisu-ACL</emphasis>, która zawiera
<replaceable>nazwę użytkownika</replaceable> lub <replaceable>ID użytkownika</replaceable>.
Jeśli wartość nie jest prawidłową wartością numeryczną UID lub <replaceable>nazwą użytkownika</replaceable>,
ten typ wpisu ACL jest nieprawidłowy.</para>
</entry>
</row>
<row>
<entry>
<para>
<literal>group</literal> </para>
</entry>
<entry>
<para>Z podaną nazwą grupy określa dostęp przyznany dodatkowej grupie do
obiektu. Musi zawierać <emphasis>ID-wpisu-ACL</emphasis>, która zawiera
<replaceable>nazwę grupy</replaceable> lub <replaceable>ID grupy</replaceable>.
Jeśli wartość nie jest prawidłową wartością numeryczną GID lub <replaceable>nazwą użytkownika</replaceable>,
ten typ wpisu ACL jest nieprawidłowy.</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para>Prawa dostępu ACL są opisane w poniższej tabeli.<indexterm xml:id="indexterm-422">
<primary>ACL-e</primary>
<secondary>przywileje ACL</secondary>
</indexterm>
</para>
<table frame="topbot" xml:id="gbbht">

<title>Prawa dostępu ACL</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colwidth="23.20*"/>
<colspec colname="colspec0" colwidth="23.20*"/>
<colspec colwidth="76.80*"/>
<thead>
<row rowsep="1">
<entry>
<para>Prawa dostępu</para>
</entry>
<entry>
<para>Podstawowe prawa dostępu</para>
</entry>
<entry>
<para>Opis</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>add_file</para>
</entry>
<entry>
<para>w</para>
</entry>
<entry>
<para>Zezwala na tworzenie nowego pliku w katalogu.</para>
</entry>
</row>
<row>
<entry>
<para>add_subdirectory</para>
</entry>
<entry>
<para>p</para>
</entry>
<entry>
<para>Zezwala na tworzenie nowego podkatalogu w katalogu.</para>
</entry>
</row>
<row>
<entry>
<para>append_data</para>
</entry>
<entry>
<para>p</para>
</entry>
<entry>
<para>Dla pliku - pozwala na modyfikację zawartości pliku.</para>
</entry>
</row>
<row>
<entry>
<para>delete</para>
</entry>
<entry>
<para>d</para>
</entry>
<entry>
<para>Pozwala na usunięcie pliku.</para>
</entry>
</row>
<row>
<entry>
<para>delete_child</para>
</entry>
<entry>
<para>D</para>
</entry>
<entry>
<para>Zezwala na usunięcie pliku lub podkatalogu wewnątrz katalogu.</para>
</entry>
</row>
<row>
<entry>
<para>execute</para>
</entry>
<entry>
<para>x</para>
</entry>
<entry>
<para>Pozwala na wykonanie pliku lub przeszukiwanie zawartości katalogu.</para>
</entry>
</row>
<row>
<entry>
<para>list_directory</para>
</entry>
<entry>
<para>r</para>
</entry>
<entry>
<para>Pozwala na wylistowanie zawartości katalogu.</para>
</entry>
</row>
<row>
<entry>
<para>read_acl</para>
</entry>
<entry>
<para>c</para>
</entry>
<entry>
<para>Pozwala na odczyt listy ACL (<command>ls</command>).</para>
</entry>
</row>
<row>
<entry>
<para>read_attributes</para>
</entry>
<entry>
<para>a</para>
</entry>
<entry>
<para>Pozwala na odczyt podstawowych (nie ACL) atrybutów dla pliku. Można myśleć
o podstawowych atrybutach jako atrybuty poziomu "stat". Ustawienie tego prawa
pozwala na wykonywanie poleceń <command>ls</command>(1) oraz <literal>stat</literal>(2)
dla obiektu.</para>
</entry>
</row>
<row>
<entry>
<para>read_data</para>
</entry>
<entry>
<para>r</para>
</entry>
<entry>
<para>Pozwala na odczyt zawartości pliku.</para>
</entry>
</row>
<row>
<entry>
<para>read_xattr</para>
</entry>
<entry>
<para>R</para>
</entry>
<entry>
<para>Zezwolenie na czytanie poszerzonych atrybutów pliku, bądź na wykonywanie wyszukiwania w katalogu poszerzonych atrybutów pliku.</para>
</entry>
</row>
<row>
<entry>
<para>synchronize</para>
</entry>
<entry>
<para>s</para>
</entry>
<entry>
<para>Wypełniacz, na razie nie używany.</para>
</entry>
</row>
<row>
<entry>
<para>write_xattr</para>
</entry>
<entry>
<para>A</para>
</entry>
<entry>
<para>Zezwolenie na tworzenie poszerzonych atrybutów bądź na zapis do katalogu poszerzonych atrybutów.</para>
<para>Przyznanie tego prawa użytkownikowi oznacza, że może on tworzyć katalog
rozszerzonych atrybutów dla pliku. Prawa do pliku kontrolują uprawnienia użytkownika do atrybutu.</para>
</entry>
</row>
<row>
<entry>
<para>write_data</para>
</entry>
<entry>
<para>w</para>
</entry>
<entry>
<para>Pozwala na zmianę lub zastąpienie zawartości pliku.</para>
</entry>
</row>
<row>
<entry>
<para>write_attributes</para>
</entry>
<entry>
<para>W</para>
</entry>
<entry>
<para>Zezwolenie na dowolną zmianę czasów związanych z plikiem lub katalogiem.</para>
</entry>
</row>
<row>
<entry>
<para>write_acl</para>
</entry>
<entry>
<para>C</para>
</entry>
<entry>
<para>Pozwala na zapis list ACL lub możliwość modyfikacji listy ACL
poprzez użycie polecenia <command>chmod</command>.</para>
</entry>
</row>
<row>
<entry>
<para>write_owner</para>
</entry>
<entry>
<para>o</para>
</entry>
<entry>
<para>Pozwala na zmianę właściciela lub grupy pliku, czyli możliwość
wykonania poleceń <command>chown</command> lub <command>chgrp</command> na pliku.</para>
<para>Zezwolenie na przejęcie pliku lub na zmianę grupy na tę, której członkiem jest użytkownik. Na dowolną zmianę właściciela bądź grupy pozwala przywilej <literal>PRIV_FILE_CHOWN</literal>.</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
<sect2 xml:id="gbaax" remap="">
<title>Dziedziczenie ACL-i</title>
<para>Dzięki wprowadzeniu dziedziczenia ACL-i nowoutworzony plik lub katalog może dziedziczyć te ACL-e, które powinien, nie ignorując jednak bitów praw wyższego katalogu.<indexterm xml:id="indexterm-423">
<primary>ACL-e</primary>
<secondary>Dziedziczenie ACL-i</secondary>
</indexterm>
<indexterm xml:id="indexterm-424">
<primary>NFSv4 ACL</primary>
<secondary>Dziedziczenie ACL-i</secondary>
</indexterm>
<indexterm xml:id="indexterm-425">
<primary>ACL-e Solarisa</primary>
<secondary>Dziedziczenie ACL-i</secondary>
</indexterm>
</para>
<para>Domyślnie ACL-e nie są dziedziczone. Po ustawieniu ACL-i dla katalogu, nie są one dziedziczone przez podkatalogi. Dziedziczenie musi być włączone ręcznie dla każdego pliku i katalogu.</para>
<para>Flagi opcjonalnego dziedziczenia opisane zostały w poniższej tabeli.<indexterm xml:id="indexterm-426">
<primary>ACL-e</primary>
<secondary>flagi dziedziczenia ACL-i</secondary>
</indexterm>
<indexterm xml:id="indexterm-427">
<primary>NFSv4 ACLs</primary>
<secondary>flagi dziedziczenia ACL-i</secondary>
</indexterm>
<indexterm xml:id="indexterm-428">
<primary>ACL-e Solarisa</primary>
<secondary>flagi dziedziczenia ACL-i</secondary>
</indexterm>
</para>
<table frame="topbot" xml:id="gbbhx">

<title>flagi dziedziczenia ACL-i</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colwidth="29.98*"/>
<colspec colname="colspec1" colwidth="24.32*"/>
<colspec colwidth="75.25*"/>
<thead>
<row>
<entry rowsep="1">
<para>flagi dziedziczenia</para>
</entry>
<entry rowsep="1">
<para>Krótka forma flagi dziedziczenia</para>
</entry>
<entry rowsep="1">
<para>opis</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>file_inherit</para>
</entry>
<entry>
<para>f</para>
</entry>
<entry>
<para>Tylko pliki w katalogu dziedziczą ACL-e katalogu, który je zawiera.</para>
</entry>
</row>
<row>
<entry>
<para>dir_inherit</para>
</entry>
<entry>
<para>d</para>
</entry>
<entry>
<para>Tylko katalogi dziedziczą ACL-e katalogu, który je zawiera.</para>
</entry>
</row>
<row>
<entry>
<para>inherit_only</para>
</entry>
<entry>
<para>i</para>
</entry>
<entry>
<para>ACL-e dziedziczone są z wyższego katalogu, ale dotyczą tylko plików lub podkatalogów, nie samego katalogu, na który nałozona została flaga. Flaga ta wymaga jednej z flag: <literal>file_inherit</literal> i <literal>dir_inherit</literal>, lub obu, aby wskazać, co ma być dziedziczone.</para>
</entry>
</row>
<row>
<entry>
<para>no_propagate</para>
</entry>
<entry>
<para>n</para>
</entry>
<entry>
<para>Dziedziczenie ACL-i z wyższego katalogu tylko do zawartości pierwszego podkatalogu, z pominięciem nastepnych poziomów. Flaga wymaga jednej z flag: <literal>file_inherit</literal> i <literal>dir_inherit</literal>, lub obu w celu zdefiniowania, co ma być dziedziczone.</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para>Istnieje dodatkowa możliwość zdefiniowania głownej reguły dziedziczenia na poziomie systemu plików. Może być bardziej lu mniej restrykcyjna i używa się w tym celu właściwości systemu plików <literal>aclinherit</literal>. Więcej informacji w następnym podrozdziale.</para>
</sect2>
<sect2 xml:id="gbaaz">
<title>Tryby właściwości ACL-i</title>
<para>System plików ZFS ma dwa możliwe tryby właściwości odnośnie ACL-i::<indexterm xml:id="indexterm-429">
<primary>ACL-e</primary>
<secondary>tryby właściwości ACL-i</secondary>
</indexterm>
<indexterm xml:id="indexterm-430">
<primary>ACL-e NFSv4</primary>
<secondary>tryby właściwości ACL-i</secondary>
</indexterm>
<indexterm xml:id="indexterm-431">
<primary>ACL-e Solarisa</primary>
<secondary>tryby właściwości ACL-i</secondary>
</indexterm>
</para>
<itemizedlist>
<listitem>
<para>
<literal>aclinherit</literal> – Określa podejście do dziecziczenia ACL-i. Wartości zawierają:<indexterm xml:id="indexterm-432">
<primary>ACL-e</primary>
<secondary>
<literal>aclinherit</literal> tryb właściwości</secondary>
</indexterm>
<indexterm xml:id="indexterm-433">
<primary>
<literal>aclinherit</literal> tryb właściwości</primary>
</indexterm>
</para>
<itemizedlist>
<listitem>
<para>
<literal>discard</literal> – Przy tworzeniu katalogu lub pliku nie dziedziczy się żadnych ACL-i. ACL-e są ustawiane równoważnie do uprawnień systemu plików bądź katalogu.</para>
</listitem>
<listitem>
<para>
<literal>noallow</literal> – Przy nowych obiektach dziedziczone są tylko dziedziczne wartości ACL-i, mające typ dostępu<literal>deny</literal>.</para>
</listitem>
<listitem>
<para>
<literal>secure</literal> – Przy nowych obiektach podczas dziedziczenia ACL-i usuwane są uprawnienia: <literal>write_owner</literal> i <literal>write_acl</literal>.</para>
</listitem>
<listitem>
<para>
<literal>passthrough</literal> – Przy nowych obiektach dziedziczne ACL-e są dziedziczone bez zmian. Ten tryb efektywnie wyłącza tryb <literal>secure</literal>.</para>
</listitem>
</itemizedlist>
<para>Domyślnym trybem dla <literal>aclinherit</literal> jest <literal>secure</literal>.</para>
</listitem>
<listitem>
<para>
<literal>aclmode</literal> – Właściwość ta zmienai zachowania ACL-i podczas zmiany trybu pliku bądź katalogu narzędziem  <command>chmod</command> oraz podczas tworzenia pliku. Wartości zawierają:<indexterm xml:id="indexterm-434">
<primary>ACL-e</primary>
<secondary>
<literal>aclmode</literal> tryb właściwości</secondary>
</indexterm>
<indexterm xml:id="indexterm-435">
<primary>
<literal>aclmode</literal> tryb właściwości</primary>
</indexterm>
</para>
<itemizedlist>
<listitem>
<para>
<literal>discard</literal> – Usuwane są wszelkie ACL-e za wyjątkiem tych, które sa konieczne do ustalenia trybu pliku lub katalogu.</para>
</listitem>
<listitem>
<para>
<literal>groupmask</literal> – Uprawnienia ALC użytkownika bądź grupy są zmniejszane tak, aby były co najwyżej równe uprawnieniom grupy wynikłym z bitów uprawnień, chyba że użytkownik ma taki sam UID jak właściel pliku bądź katalogu. Wtedy ACL-e są zmniejszane tak, aby były nie większe niż bity uprawnień właściciela.</para>
</listitem>
<listitem>
<para>
<literal>passthrough</literal> – Przy nowych obiektach dziedziczne ACL-e są dziedziczone bez zmian.</para>
</listitem>
</itemizedlist>
<para>Domyślnym trybem dla <literal>aclmode</literal> jest <literal>groupmask</literal>.</para>
</listitem>
</itemizedlist>
</sect2>
</sect1>
<sect1 xml:id="gbace">
<title>Ustawianie ACL-i dla plików ZFS-a</title>
<para>W implementacji ZFs-a ACL-e składają się z tablicy definicji ACL-i. ZFS implementuje <emphasis>czysty</emphasis> model ACL-i, co oznacza, że każdy plik ma ACL-a. Najczęściej ACL-e są <emphasis>proste</emphasis> w tym znaczeniu, że reprezentują tradycyjny model UNIX-a <literal>właściel/grupa/inni(ang. owner/group/other)</literal>.<indexterm xml:id="indexterm-436">
<primary>ACL-e</primary>
<secondary>ustawianie dla plików ZFS-a</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-437">
<primary>setting</primary>
<secondary>ACL-e dla plików ZFS-a</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-438">
<primary>systemy plików ZFS-a</primary>
<secondary>ustawianie ACL-i dla plików ZFS-a</secondary>
<tertiary>opis</tertiary>
</indexterm>
</para>
<para>Pliki ZFS-a wciąż mają bity uprawnień i tryb, ale wartości te są raczej cachem reprezentacji ACl-i. W związku z tym równocześnie do zmiany uprawnień pliku, zmieniają się jego ACL-e. Dodatkowo po usunięciu konkretnego ACL-a zezwalającego użytkownikowi dostęp do pliku lub katalogu, użytkownik nadal może mieć dostęp do pliku lub katalogu ze względu na bity uprawnień pliku lub katalogu, zezwalające na dostęp grupie lub wszystkim użytkownikom. Wszystkie decyzje o dostępie podejmowane są na podstawie uprawnień reprezentowanych w ACL-ach pliku lub katalogu.</para>
<para>The primary rules of ACL access on a ZFS file are as follows:</para>
<itemizedlist>
<listitem>
<para>ZFS processes ACL entries in the order they are listed in
the ACL, from the top down.</para>
</listitem>
<listitem>
<para>Only ACL entries that have a “who” that matches
the requester of the access are processed.</para>
</listitem>
<listitem>
<para>Once an allow permission has been granted, it cannot be denied
by a subsequent ACL deny entry in the same ACL permission set.</para> 
</listitem>
<listitem>
<para>The owner of the file is granted the <literal>write_acl</literal> permission
unconditionally, even if the permission is explicitly denied. Otherwise, any
permission left unspecified is denied.</para>
<para>In the cases of deny permissions
or when an access permission is missing, the privilege subsystem determines
what access request is granted for the owner of the file or for superuser.
This mechanism prevents owners of files from getting locked out of their files
and enables superuser to modify files for recovery purposes.</para>
</listitem>
</itemizedlist>
<para>If you set an explicit ACL on a directory, the ACL is not automatically
inherited by the directory's children. If you set an explicit ACL and you
want it inherited to the directory's children, you have to use the ACL inheritance
flags. For more information, see <olink targetdoc="" remap="internal" targetptr="gbbhx">Table 7–3</olink> and <olink targetdoc="" remap="internal" targetptr="gbabx">Setting ACL Inheritance on ZFS Files in Verbose Format</olink>.</para>
<para>When you create a new file and depending on the <command>umask</command> value,
a default trivial ACL, similar to the following, is applied:</para>
<screen>$ <userinput>ls -v file.1</userinput>
-r--r--r--   1 root     root      206663 May  4 11:52 file.1
     0:owner@:write_data/append_data/execute:deny
     1:owner@:read_data/write_xattr/write_attributes/write_acl/write_owner
         :allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>Note that each user category (<literal>owner@</literal>, <literal>group@</literal>, <literal>everyone@</literal>) in this example has two ACL entries. One entry for <literal>deny</literal> permissions, and one entry is for <literal>allow</literal> permissions.<indexterm xml:id="indexterm-439">
<primary>ACL-e</primary>
<secondary>ACL on ZFS file</secondary>
<tertiary>detailed description</tertiary>
</indexterm>
<indexterm xml:id="indexterm-440">
<primary>ZFS file systems</primary>
<secondary>ACL on ZFS file</secondary>
<tertiary>detailed description</tertiary>
</indexterm>
</para>
<para>A description of this file ACL is as follows:</para>
<variablelist>
<varlistentry>
<term>
<literal>0:owner@</literal>
</term>
<listitem>
<para>The owner is denied execute permissions to the file (<literal>execute:deny</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>1:owner@</literal>
</term>
<listitem>
<para>The owner can read and modify the contents of the file (<literal>read_data/write_data/append_data</literal>). The owner can also modify the
file's attributes such as timestamps, extended attributes, and ACLs (<literal>write_xattr/write_attributes
/write_acl</literal>). In addition, the owner can modify the ownership of
the file (<literal>write_owner:allow</literal>)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>2:group@</literal>
</term>
<listitem>
<para>The group is denied modify and execute permissions to the
file (<literal>write_data/append_data/execute:deny</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>3:group@</literal>
</term>
<listitem>
<para>The group is granted read permissions to the file (<literal>read_data:allow</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>4:everyone@</literal>
</term>
<listitem>
<para>Everyone who is not user or group is denied permission to
execute or modify the contents of the file and to modify any attributes of
the file (<literal>write_data/append_data/write_xattr/execute/write_attributes/write_acl/write_owner:deny</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>5:everyone@</literal>
</term>
<listitem>
<para>Everyone who is not user or group is granted read permissions
to the file, and the file's attributes (<literal>read_data/read_xattr/read_attributes/read_acl/synchronize:allow</literal>). The <literal>synchronize</literal> access permission is not currently
implemented.</para>
</listitem>
</varlistentry>
</variablelist>
<para>When a new directory is created and depending on the <command>umask</command> value,
a default directory ACL is similar to the following:</para>
<screen>$ <userinput>ls -dv dir.1</userinput>
drwxr-xr-x   2 root     root           2 Feb 23 10:37 dir.1
     0:owner@::deny
     1:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     2:group@:add_file/write_data/add_subdirectory/append_data:deny
     3:group@:list_directory/read_data/execute:allow
     4:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     5:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>A description of this directory ACL is as follows:<indexterm xml:id="indexterm-441">
<primary>ACL-e</primary>
<secondary>ACL on ZFS directory</secondary>
<tertiary>detailed description</tertiary>
</indexterm>
<indexterm xml:id="indexterm-442">
<primary>ZFS file systems</primary>
<secondary>ACL on ZFS directory</secondary>
<tertiary>detailed description</tertiary>
</indexterm>
</para>
<variablelist>
<varlistentry>
<term>
<literal>0:owner@</literal>
</term>
<listitem>
<para>The owner deny list is empty for the directory (<literal>::deny</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>1:owner@</literal>
</term>
<listitem>
<para>The owner can read and modify the directory contents (<literal>list_directory/read_data/add_file/write_data/add_subdirectory/append_data</literal>), search the contents (<literal>execute</literal>), and modify
the file's attributes such as timestamps, extended attributes, and ACLs (<literal>write_xattr/write_attributes/write_acl</literal>). In addition, the owner
can modify the ownership of the directory (<literal>write_owner:allow</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>2:group@</literal>
</term>
<listitem>
<para>The group cannot add to or modify the directory contents (<literal>add_file/write_data/add_subdirectory/append_data:deny</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>3:group@</literal>
</term>
<listitem>
<para>The group can list and read the directory contents. In addition,
the group has execute permission to search the directory contents (<literal>list_directory/read_data/execute:allow</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>4:everyone@</literal>
</term>
<listitem>
<para>Everyone who is not user or group is denied permission to
add to or modify the contents of the directory (<literal>add_file/write_data/add_subdirectory/append_data</literal>). In addition, the permission to modify any attributes of the directory
is denied. (<literal>write_xattr          /write_attributes/write_acl/write_owner:deny</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>5:everyone@</literal>
</term>
<listitem>
<para>Everyone who is not user or group is granted read and execute
permissions to the directory contents and the directory's attributes (<literal>list_directory/read_data/read_xattr/execute/read_attributes/read_acl/synchronize:allow</literal>). The <literal>synchronize</literal> access permission is not currently
implemented.</para>
</listitem>
</varlistentry>
</variablelist>
</sect1>
<sect1 xml:id="gbabw">
<title>Setting and Displaying ACLs on ZFS Files in Verbose
Format</title>
<para>You can use the <command>chmod</command> command to modify ACLs on ZFS
files. The following <command>chmod</command> syntax for modifying ACLs uses <emphasis>acl-specification</emphasis> to identify the format of the ACL. For a description
of <emphasis>acl-specification</emphasis>, see <olink targetdoc="" remap="internal" targetptr="gbaay">Syntax Descriptions for Setting ACLs</olink>.<indexterm xml:id="indexterm-443">
<primary>ACL-e</primary>
<secondary>setting ACLs on ZFS file (verbose mode)</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-444">
<primary>setting</primary>
<secondary>ACLs on ZFS file (verbose mode)</secondary>
<tertiary>(description</tertiary>
</indexterm>
<indexterm xml:id="indexterm-445">
<primary>ZFS file systems</primary>
<secondary>setting ACLs on ZFS file (verbose mode)</secondary>
<tertiary>opis</tertiary>
</indexterm>
</para>
<itemizedlist>
<listitem>
<para>Adding ACL entries</para>
<itemizedlist>
<listitem>
<para>Adding an ACL entry for a user</para>
<screen>% chmod A+<emphasis>acl-specification</emphasis> <emphasis>filename</emphasis>
</screen>
</listitem>
<listitem>
<para>Adding an ACL entry by <replaceable>index-ID</replaceable>
</para>
<screen>% chmod A<emphasis>index-ID</emphasis>+<emphasis>acl-specification</emphasis> <emphasis>filename</emphasis>
</screen>
<para>This syntax inserts the new ACL entry at the specified <replaceable>index-ID</replaceable> location.</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>Replacing an ACL entry</para>
<screen>% chmod A<emphasis>index-ID</emphasis>=<emphasis>acl-specification</emphasis> <emphasis>filename</emphasis>
</screen>
<screen>% chmod A=<emphasis>acl-specification</emphasis> <emphasis>filename</emphasis>
</screen>
</listitem>
<listitem>
<para>Removing ACL entries</para>
<itemizedlist>
<listitem>
<para>Removing an ACL entry by <replaceable>index-ID</replaceable>
</para>
<screen>% chmod A<emphasis>index-ID</emphasis>- <emphasis>filename</emphasis>
</screen>
</listitem>
<listitem>
<para>Removing an ACL entry by user</para>
<screen>% chmod A-<emphasis>acl-specification</emphasis> <emphasis>filename</emphasis>
</screen>
</listitem>
<listitem>
<para>Removing all explicit ACEs from a file</para>
<screen>% chmod A- <emphasis>filename</emphasis>
</screen>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<para>Verbose ACL information is displayed by using the <command>ls</command> <option>
v</option> command. For example:</para>
<screen># <userinput>ls -v file.1</userinput>
-rw-r--r--   1 root     root      206663 Feb 16 11:00 file.1
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>For information about using the compact ACL format, see <olink targetdoc="" remap="internal" targetptr="gbchf">Setting and Displaying ACLs on ZFS Files in Compact Format</olink>.</para>
<example xml:id="gbsdc">

<title>Modifying Trivial ACLs on ZFS Files</title>
<para>This section provides examples of setting and displaying trivial ACLs.<indexterm xml:id="indexterm-446">
<primary>ACL-e</primary>
<secondary>modifying trivial ACL on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-447">
<primary>modifying</primary>
<secondary>trivial ACL on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-448">
<primary>ZFS file systems</primary>
<secondary>modifying trivial ACL on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
</para>
<para>In the following example, a trivial ACL exists on <filename>file.1</filename>:</para>
<screen># <userinput>ls -v file.1</userinput>
-rw-r--r--   1 root     root      206663 Feb 16 11:00 file.1
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>In the following example, <literal>write_data</literal> permissions
are granted for <literal>group@</literal>.</para>
<screen># <userinput>chmod A2=group@:append_data/execute:deny file.1</userinput>
# <userinput>chmod A3=group@:read_data/write_data:allow file.1</userinput>
# <userinput>ls -v file.1</userinput>
-rw-rw-r--   1 root     root           206663 May  3 16:36 file.1
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     2:group@:append_data/execute:deny
     3:group@:read_data/write_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>In the following example, permissions on <filename>file.1</filename> are
set back to 644.</para>
<screen># <userinput>chmod 644 file.1</userinput>
# <userinput>ls -v file.1</userinput>
-rw-r--r--   1 root     root           206663 May  3 16:36 file.1
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
</example>
<example xml:id="gcpsk">

<title>Setting Explicit ACLs on ZFS Files</title>
<para>This section provides examples of setting and displaying trivial ACLs.</para>
<para>In the following example, <literal>read_data/execute</literal> permissions
are added for the user <literal>gozer</literal> on the <filename>test.dir</filename> directory.</para>
<screen># <userinput>chmod A+user:gozer:read_data/execute:allow test.dir</userinput>
# <userinput>ls -dv test.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 16 11:12 test.dir
     0:user:gozer:list_directory/read_data/execute:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>In the following example, <literal>read_data/execute</literal> permissions
are removed for user <literal>gozer</literal>. </para>
<screen># <userinput>chmod A0- test.dir</userinput>
# <userinput>ls -dv test.dir</userinput>
drwxr-xr-x   2 root     root           2 Feb 16 11:12 test.dir
     0:owner@::deny
     1:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     2:group@:add_file/write_data/add_subdirectory/append_data:deny
     3:group@:list_directory/read_data/execute:allow
     4:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     5:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
</example>
<example xml:id="gbsby">

<title>ACL Interaction With Permissions on ZFS Files</title>
<para>These ACL examples illustrate the interaction between setting explicit
ACLs and then changing the file or directory's permission bits.</para>
<para>In the following example, a trivial ACL exists on <filename>file.2</filename>:</para>
<screen># <userinput>ls -v file.2</userinput>
-rw-r--r--   1 root     root        2703 Feb 16 11:16 file.2
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>In the following example, ACL allow permissions are removed from <literal>everyone@</literal>.</para>
<screen># <userinput>chmod A5- file.2</userinput>
# <userinput>ls -v file.2</userinput>
-rw-r-----   1 root     root        2703 Feb 16 11:16 file.2
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny</screen>
<para>In this output, the file's permission bits are reset from 655 to 650.
Read permissions for <literal>everyone@</literal> have been effectively removed
from the file's permissions bits when the ACL allow permissions are removed
for <literal>everyone@</literal>.</para>
<para>In the following example, the existing ACL is replaced with <literal>read_data/write_data</literal> permissions for <literal>everyone@</literal>.</para>
<screen># <userinput>chmod A=everyone@:read_data/write_data:allow file.3</userinput>
# <userinput>ls -v file.3</userinput>
-rw-rw-rw-+  1 root     root        1532 Feb 16 11:18 file.3
     0:everyone@:read_data/write_data:allow</screen>
<para>In this output, the <command>chmod</command> syntax effectively replaces
the existing ACL with <literal>read_data/write_data:allow</literal> permissions
to read/write permissions for owner, group, and <literal>everyone@</literal>.
In this model, <literal>everyone@</literal> specifies access to any user or
group. Since no <literal>owner@</literal> or <literal>group@</literal> ACL
entry exists to override the permissions for owner and group, the permission
bits are set to 666.</para>
<para>In the following example, the existing ACL is replaced with read permissions
for user <literal>gozer</literal>.</para>
<screen># <userinput>chmod A=user:gozer:read_data:allow file.3</userinput>
# <userinput>ls -v file.3</userinput>
----------+  1 root     root        1532 Feb 16 11:18 file.3
     0:user:gozer:read_data:allow</screen>
<para>In this output, the file permissions are computed to be 000 because
no ACL entries exist for <literal>owner@</literal>, <literal>group@</literal>,
or <literal>everyone@</literal>, which represent the traditional permission
components of a file. The owner of the file can resolve this problem by resetting
the permissions (and the ACL) as follows:</para>
<screen># <userinput>chmod 655 file.3</userinput>
# <userinput>ls -v file.3</userinput>
-rw-r-xr-x+  1 root     root           0 Mar  8 13:24 file.3
     0:user:gozer::deny
     1:user:gozer:read_data:allow
     2:owner@:execute:deny
     3:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     4:group@:write_data/append_data:deny
     5:group@:read_data/execute:allow
     6:everyone@:write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:deny
     7:everyone@:read_data/read_xattr/execute/read_attributes/read_acl
         /synchronize:allow</screen>
</example>
<example xml:id="gbsdg">

<title>Restoring Trivial ACLs on ZFS Files</title>
<para>You can use the <command>chmod</command> command to remove all explicit
ACLs on a file or directory.<indexterm xml:id="indexterm-449">
<primary>ACL-e</primary>
<secondary>restoring trivial ACL on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-450">
<primary>restoring</primary>
<secondary>trivial ACL on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-451">
<primary>ZFS file systems</primary>
<secondary>restoring trivial ACL on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
</para>
<para>In the following example, 2 explicit ACEs exist on <literal>test5.dir</literal>.</para>
<screen># <userinput>ls -dv test5.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 16 11:23 test5.dir
     0:user:gozer:read_data:file_inherit:deny
     1:user:lp:read_data:file_inherit:deny
     2:owner@::deny
     3:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     4:group@:add_file/write_data/add_subdirectory/append_data:deny
     5:group@:list_directory/read_data/execute:allow
     6:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     7:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>In the following example, the explicit ACLs for users <literal>gozer</literal> and <literal>lp</literal> are removed. The remaining ACL contains the six default values
for <literal>owner@</literal>, <literal>group@</literal>, and <literal>everyone@</literal>.</para>
<screen># <userinput>chmod A- test5.dir</userinput>
# <userinput>ls -dv test5.dir</userinput>
drwxr-xr-x   2 root     root           2 Feb 16 11:23 test5.dir
     0:owner@::deny
     1:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     2:group@:add_file/write_data/add_subdirectory/append_data:deny
     3:group@:list_directory/read_data/execute:allow
     4:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     5:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
</example>
<sect2 xml:id="gbabx">
<title>Setting ACL Inheritance on ZFS Files in Verbose Format</title>
<para>You can determine how ACLs are inherited or not inherited on files and
directories. By default, ACLs are not propagated. If you set an explicit ACL
on a directory, the ACL is not inherited by any subsequent directory. You
must specify the inheritance of an ACL on a file or directory.<indexterm xml:id="indexterm-452">
<primary>ACL-e</primary>
<secondary>setting ACL inheritance on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-453">
<primary>setting</primary>
<secondary>ACL inheritance on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-454">
<primary>ZFS file systems</primary>
<secondary>setting ACL inheritance on ZFS file (verbose mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
</para>
<para>In addition, two ACL properties are provided that can be set globally
on file systems: <literal>aclinherit</literal> and <literal>aclmode</literal>.
By default, <property>aclinherit</property> is set to <literal>secure</literal> and <property>aclmode</property> is set to <literal>groupmask</literal>.</para>
<para>For more information, see <olink targetdoc="" remap="internal" targetptr="gbaax">ACL Inheritance</olink>.</para>
<example xml:id="gcakr">

<title>Default ACL Inheritance</title>
<para>By default, ACLs are not propagated through a directory structure.</para>
<para>In the following example, an explicit ACE of <literal>read_data/write_data/execute</literal> is applied for user <literal>gozer</literal> on <literal>test.dir</literal>.</para>
<screen># <userinput>chmod A+user:gozer:read_data/write_data/execute:allow test.dir</userinput>
# <userinput>ls -dv test.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 17 14:45 test.dir
     0:user:gozer:list_directory/read_data/add_file/write_data/execute:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>If a <filename>test.dir</filename> subdirectory is created, the ACE
for user <literal>gozer</literal> is not propagated. User <literal>gozer</literal> would
only have access to <filename>sub.dir</filename> if the permissions on <filename>sub.dir</filename> granted him access as the file owner, group member, or <literal>everyone@</literal>.</para>
<screen># <userinput>mkdir test.dir/sub.dir</userinput>
# <userinput>ls -dv test.dir/sub.dir</userinput>
drwxr-xr-x   2 root     root           2 Feb 17 14:46 test.dir/sub.dir
     0:owner@::deny
     1:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     2:group@:add_file/write_data/add_subdirectory/append_data:deny
     3:group@:list_directory/read_data/execute:allow
     4:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     5:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
</example>
<example xml:id="gcale">

<title>Granting ACL Inheritance on Files and Directories</title>
<para>This series of examples identify the file and directory ACEs that are
applied when the <literal>file_inherit</literal> flag is set.</para>
<para>In the following example, <literal>read_data/write_data</literal> permissions
are added for files in the <filename>test.dir</filename> directory for user <literal>gozer</literal> so that he has read access on any newly created files.</para>
<screen># <userinput>chmod A+user:gozer:read_data/write_data:file_inherit:allow test2.dir</userinput>
# <userinput>ls -dv test2.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 17 14:47 test2.dir
     0:user:gozer:read_data/write_data:file_inherit:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>In the following example, user gozer's permissions are applied on the
newly created <filename>test2.dir/file.2</filename> file. The ACL inheritance
granted, <filename>read_data:file_inherit:allow</filename>, means user <literal>gozer</literal> can read the contents of any newly created file.</para>
<screen># <userinput>touch test2.dir/file.2</userinput>
# <userinput>ls -v test2.dir/file.2</userinput>
-rw-r--r--+  1 root     root           0 Feb 17 14:49 test2.dir/file.2
     0:user:gozer:write_data:deny
     1:user:gozer:read_data/write_data:allow
     2:owner@:execute:deny
     3:owner@:read_data/write_data/append_data/write_xattr/write_attributes+
         /write_acl/write_owner:allow
     4:group@:write_data/append_data/execute:deny
     5:group@:read_data:allow
     6:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     7:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>Because the <property>aclmode</property> for this file is set to the
default mode, <literal>groupmask</literal>, user <literal>gozer</literal> does
not have <literal>write_data</literal> permission on <filename>file.2</filename> because
the group permission of the file does not allow it.</para>
<para>Note the <literal>inherit_only</literal> permission, which is applied
when the <literal>file_inherit</literal> or <literal>dir_inherit</literal> flags
are set, is used to propagate the ACL through the directory structure. As
such, user <literal>gozer</literal> is only granted or denied permission from <literal>everyone@</literal> permissions unless he is the owner of the file or a member
of the owning group of the file. For example:</para>
<screen># <userinput>mkdir test2.dir/subdir.2</userinput>
# <userinput>ls -dv test2.dir/subdir.2</userinput>
drwxr-xr-x+  2 root     root           2 Feb 17 14:50 test2.dir/subdir.2
     0:user:gozer:list_directory/read_data/add_file/write_data:file_inherit
         /inherit_only:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>The following series of examples identify the file and directory ACLs
that are applied when both the <literal>file_inherit</literal> and <literal>dir_inherit</literal> flags are set.</para>
<para>In the following example, user <literal>gozer</literal> is granted read,
write, and execute permissions that are inherited for newly created files
and directories.</para>
<screen># <userinput>chmod A+user:gozer:read_data/write_data/execute:file_inherit/dir_inherit:allow test3.dir</userinput>
# <userinput>ls -dv test3.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 17 14:51 test3.dir
     0:user:gozer:list_directory/read_data/add_file/write_data/execute
         :file_inherit/dir_inherit:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<screen># <userinput>touch test3.dir/file.3</userinput>
# <userinput>ls -v test3.dir/file.3</userinput>
-rw-r--r--+  1 root     root           0 Feb 17 14:53 test3.dir/file.3
     0:user:gozer:write_data/execute:deny
     1:user:gozer:read_data/write_data/execute:allow
     2:owner@:execute:deny
     3:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     4:group@:write_data/append_data/execute:deny
     5:group@:read_data:allow
     6:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     7:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<screen># <userinput>mkdir test3.dir/subdir.1</userinput>
# <userinput>ls -dv test3.dir/subdir.1</userinput>
drwxr-xr-x+  2 root     root           2 May  4 15:00 test3.dir/subdir.1
     0:user:gozer:list_directory/read_data/add_file/write_data/execute
         :file_inherit/dir_inherit/inherit_only:allow
     1:user:gozer:add_file/write_data:deny
     2:user:gozer:list_directory/read_data/add_file/write_data/execute:allow
     3:owner@::deny
     4:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     5:group@:add_file/write_data/add_subdirectory/append_data:deny
     6:group@:list_directory/read_data/execute:allow
     7:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     8:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>In these examples, because the permission bits of the parent directory
for <literal>group@</literal> and <literal>everyone@</literal> deny write
and execute permissions, user <literal>gozer</literal> is denied write and
execute permissions. The default <property>aclmode</property> property is <literal>secure</literal>, which means that <literal>write_data</literal> and <literal>execute</literal> permissions are not inherited.</para>
<para>In the following example, user <literal>gozer</literal> is granted 
read, write, and execute permissions that are inherited for newly created
files, but are not propagated to subsequent contents of the directory.</para>
<screen># <userinput>chmod A+user:gozer:read_data/write_data/execute:file_inherit/no_propagate:allow test4.dir</userinput>
# <userinput>ls -dv test4.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 17 14:54 test4.dir
     0:user:gozer:list_directory/read_data/add_file/write_data/execute
         :file_inherit/no_propagate:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>As the following example illustrates, when a new subdirectory is created,
user <literal>gozer</literal>'s <literal>read_data/write_data/execute</literal> permission
for files are not propagated to the new <literal>sub4.dir</literal> directory.</para>
<screen># <userinput>mkdir test4.dir/sub4.dir</userinput>
# <userinput>ls -dv test4.dir/sub4.dir</userinput>
drwxr-xr-x   2 root     root           2 Feb 17 14:57 test4.dir/sub4.dir
     0:owner@::deny
     1:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     2:group@:add_file/write_data/add_subdirectory/append_data:deny
     3:group@:list_directory/read_data/execute:allow
     4:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     5:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>As the following example illustrates, <literal>gozer</literal>'s <literal>read_data/write_data/execute</literal> permission for files is propagated to the newly created file.</para>
<screen># <userinput>touch test4.dir/file.4</userinput>
# <userinput>ls -v test4.dir/file.4</userinput>
-rw-r--r--+  1 root     root           0 May  4 15:02 test4.dir/file.4
     0:user:gozer:write_data/execute:deny
     1:user:gozer:read_data/write_data/execute:allow
     2:owner@:execute:deny
     3:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     4:group@:write_data/append_data/execute:deny
     5:group@:read_data:allow
     6:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     7:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
</example>
<example xml:id="gbcid">

<title>ACL Inheritance With ACL Mode Set to Passthrough</title>
<para>If the <literal>aclmode</literal> property on the <filename>tank/cindy</filename> file
system is set to <literal>passthrough</literal>, then user <literal>gozer</literal> would
inherit the ACL applied on <filename>test4.dir</filename> for the newly created <filename>file.4</filename> as follows:</para>
<screen># <userinput>zfs set aclmode=passthrough tank/cindy</userinput>
# <userinput>touch test4.dir/file.4</userinput>
# <userinput>ls -v test4.dir/file.4</userinput>
-rw-r--r--+  1 root     root           0 Feb 17 15:15 test4.dir/file.4
     0:user:gozer:read_data/write_data/execute:allow
     1:owner@:execute:deny
     2:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     3:group@:write_data/append_data/execute:deny
     4:group@:read_data:allow
     5:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     6:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
<para>This output illustrates that the <literal>read_data/write_data/execute:allow:file_inherit/dir_inherit</literal> ACL that was set on the parent directory, <filename>test4.dir</filename>,
is passed through to user <literal>gozer</literal>.</para>
</example>
<example xml:id="gbchq">

<title>ACL Inheritance With ACL Mode Set to Discard</title>
<para>If the <property>aclmode</property> property on a file system is set
to <literal>discard</literal>, then ACLs can potentially be discarded when
the permission bits on a directory change. For example:</para>
<screen># <userinput>zfs set aclmode=discard tank/cindy</userinput>
# <userinput>chmod A+user:gozer:read_data/write_data/execute:dir_inherit:allow test5.dir</userinput>
# <userinput>ls -dv test5.dir</userinput>
drwxr-xr-x+  2 root     root           2 Feb 16 11:23 test5.dir
     0:user:gozer:list_directory/read_data/add_file/write_data/execute
         :dir_inherit:allow
     1:owner@::deny
     2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     3:group@:add_file/write_data/add_subdirectory/append_data:deny
     4:group@:list_directory/read_data/execute:allow
     5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>If, at a later time, you decide to tighten the permission bits on a
directory, the explicit ACL is discarded. For example:</para>
<screen># <userinput>chmod 744 test5.dir</userinput>
# <userinput>ls -dv test5.dir</userinput>
drwxr--r--   2 root     root           2 Feb 16 11:23 test5.dir
     0:owner@::deny
     1:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     2:group@:add_file/write_data/add_subdirectory/append_data/execute:deny
     3:group@:list_directory/read_data:allow
     4:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /execute/write_attributes/write_acl/write_owner:deny
     5:everyone@:list_directory/read_data/read_xattr/read_attributes/read_acl
         /synchronize:allow</screen>
</example>
<example xml:id="gbche">

<title>ACL Inheritance With ACL Inherit Mode Set to Noallow</title>
<para>In the following example, two explicit ACLs with file inheritance are
set. One ACL allows <literal>read_data</literal> permission, and one ACL denies <literal>read_data</literal> permission. This example also illustrates how you can
specify two ACEs in the same <command>chmod</command> command.</para>
<screen># <userinput>zfs set aclinherit=nonallow tank/cindy</userinput>
# <userinput>chmod A+user:gozer:read_data:file_inherit:deny,user:lp:read_data:file_inherit:allow test6.dir</userinput>
# <userinput>ls -dv test6.dir</userinput>
drwxr-xr-x+  2 root     root           2 May  4 14:23 test6.dir
     0:user:gozer:read_data:file_inherit:deny
     1:user:lp:read_data:file_inherit:allow
     2:owner@::deny
     3:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
         /append_data/write_xattr/execute/write_attributes/write_acl
         /write_owner:allow
     4:group@:add_file/write_data/add_subdirectory/append_data:deny
     5:group@:list_directory/read_data/execute:allow
     6:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
         /write_attributes/write_acl/write_owner:deny
     7:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
         /read_acl/synchronize:allow</screen>
<para>As the following example shows, when a new file is created, the ACL
that allows <literal>read_data</literal> permission is discarded.</para>
<screen># <userinput>touch test6.dir/file.6</userinput>
# <userinput>ls -v test6.dir/file.6</userinput>
-rw-r--r--+  1 root     root           0 May  4 13:44 test6.dir/file.6
     0:user:gozer:read_data:deny
     1:owner@:execute:deny
     2:owner@:read_data/write_data/append_data/write_xattr/write_attributes
         /write_acl/write_owner:allow
     3:group@:write_data/append_data/execute:deny
     4:group@:read_data:allow
     5:everyone@:write_data/append_data/write_xattr/execute/write_attributes
         /write_acl/write_owner:deny
     6:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
         :allow</screen>
</example>
</sect2>
</sect1>
<sect1 xml:id="gbchf">
<title>Setting and Displaying ACLs on ZFS Files in Compact
Format</title>
<para>You can set and display permissions on ZFS files in a compact format
 that uses 14 unique letters to represent the permissions. The letters that
represent the compact permissions are listed in <olink targetdoc="" remap="internal" targetptr="gbbht">Table 7–2</olink> and <olink targetdoc="" remap="internal" targetptr="gbbhx">Table 7–3</olink>.<indexterm xml:id="indexterm-455">
<primary>ACL-e</primary>
<secondary>setting ACLs on ZFS file (compact mode)</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-456">
<primary>setting</primary>
<secondary>ACLs on ZFS file (compact mode)</secondary>
<tertiary>opis</tertiary>
</indexterm>
<indexterm xml:id="indexterm-457">
<primary>ZFS file systems</primary>
<secondary>setting ACLs on ZFS file (compact mode)</secondary>
<tertiary>opis</tertiary>
</indexterm>
</para>
<para>You can display compact ACL listings for files and directories by using
the <command>ls</command> <option>
V</option> command. For example:</para>
<screen># <userinput>ls -V file.1</userinput>
-rw-r--r--   1 root     root      206663 Feb 16 11:00 file.1
            owner@:--x-----------:------:deny
            owner@:rw-p---A-W-Co-:------:allow
            group@:-wxp----------:------:deny
            group@:r-------------:------:allow
         everyone@:-wxp---A-W-Co-:------:deny
         everyone@:r-----a-R-c--s:------:allow</screen>
<para>The compact ACL output is described as follows:</para>
<variablelist>
<varlistentry>
<term>
<literal>owner@</literal>
</term>
<listitem>
<para>The owner is denied execute permissions to the file (<literal>x</literal>=<literal>execute</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>owner@</literal>
</term>
<listitem>
<para>The owner can read and modify the contents of the file (<literal>rw</literal>=<literal>read_data/write_data</literal>), (<literal>p</literal>=<literal>append_data</literal>). The owner can also modify the file's attributes such
as timestamps, extended attributes, and ACLs (<literal>A</literal>=<literal>write_xattr</literal>, <literal>W</literal>=<literal>write_attributes</literal>, <literal>C</literal>=<literal>write_acl</literal>). In addition, the owner can modify the ownership of the
file (<literal>O</literal>=<literal>write_owner</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>group@</literal>
</term>
<listitem>
<para>The group is denied modify and execute permissions to the
file (<literal>rw</literal>=<literal>read_data/write_data</literal>, <literal>p</literal>=<literal>append_data</literal>, and <literal>x</literal>=<literal>execute</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>group@</literal>
</term>
<listitem>
<para>The group is granted read permissions to the file (<literal>r</literal>=<literal>read_data</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>everyone@</literal>
</term>
<listitem>
<para>Everyone who is not user or group is denied permission to
execute or modify the contents of the file, and to modify any attributes of
the file (<literal>w</literal>=<literal>write_data</literal>, <literal>x</literal>=<literal>execute</literal>, <literal>p</literal>=<literal>append_data</literal>, <literal>A</literal>=<literal>write_xattr</literal>, <literal>W</literal>=<literal>write_attributes</literal>, <literal>C</literal>=<literal>write_acl</literal>, and <literal>o</literal>=<literal>write_owner</literal>).</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>everyone@</literal>
</term>
<listitem>
<para>Everyone who is not user or group is granted read permissions
to the file and the file's attributes (<literal>r</literal>=<literal>read_data</literal>, <literal>a</literal>=<literal>append_data</literal>, <literal>R</literal>=<literal>read_xattr</literal>, <literal>c</literal>=<literal>read_acl</literal>, and <literal>s</literal>=<literal>synchronize</literal>). The <literal>synchronize</literal> access permission
is not currently implemented.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Compact ACL format provides the following advantages over verbose ACL
format:</para>
<itemizedlist>
<listitem>
<para>Permissions can be specified as positional arguments to the <command>chmod</command> command.</para>
</listitem>
<listitem>
<para>The hyphen (-) characters, which identify no permissions,
can be removed and only the required letters need to be specified.</para>
</listitem>
<listitem>
<para>Both permissions and inheritance flags are set in the same
fashion.</para>
</listitem>
</itemizedlist>
<para>For information about using the verbose ACL format, see <olink targetdoc="" remap="internal" targetptr="gbabw">Setting and Displaying ACLs on ZFS Files in Verbose Format</olink>.</para>
<example xml:id="gcfhr">

<title>Ustawianie i wyświetlanie list ACL w formacie skróconym</title>
<para>W poniższym przykładzie istnieje prosty wpis ACL dla pliku <filename>file.1</filename>:<indexterm xml:id="indexterm-458">
<primary>ACL-e</primary>
<secondary>setting ACLs on ZFS file (compact mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-459">
<primary>setting</primary>
<secondary>ACLs on ZFS file (compact mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
<indexterm xml:id="indexterm-460">
<primary>ZFS file systems</primary>
<secondary>setting ACLs on ZFS file (compact mode)</secondary>
<tertiary>(example of)</tertiary>
</indexterm>
</para>
<screen># <userinput>ls -V file.1</userinput>
-rw-r-xr-x   1 root     root      206663 Feb 16 11:00 file.1
            owner@:--x-----------:------:deny
            owner@:rw-p---A-W-Co-:------:allow
            group@:-w-p----------:------:deny
            group@:r-x-----------:------:allow
         everyone@:-w-p---A-W-Co-:------:deny
         everyone@:r-x---a-R-c--s:------:allow</screen>
<para>W kolejnym przykładzie zostaną dodane prawa read_data/execute dla użytkownika <literal>gozer</literal> do pliku <filename>file.1</filename>. </para>
<screen># <userinput>chmod A+user:gozer:rx:allow file.1</userinput>
# <userinput>ls -V file.1</userinput>
-rw-r-xr-x+  1 root     root      206663 Feb 16 11:00 file.1
        user:gozer:r-x-----------:------:allow
            owner@:--x-----------:------:deny
            owner@:rw-p---A-W-Co-:------:allow
            group@:-w-p----------:------:deny
            group@:r-x-----------:------:allow
         everyone@:-w-p---A-W-Co-:------:deny
         everyone@:r-x---a-R-c--s:------:allow</screen>
<para>Inną metodą dodania tych samych uprawnień dla użytkownika <literal>gozer</literal>
jest wstawienie nowych wpisów ACL w określonej pozycji, na przykład 4. W tym przypadku
istniejące wpisy ACL na pozycjach 4-6 zostaną przesunięte w dół. Na przykład:</para>
<screen># <userinput>chmod A4+user:gozer:rx:allow file.1</userinput>
# <userinput>ls -V file.1</userinput>
-rw-r-xr-x+  1 root     root      206663 Feb 16 11:00 file.1
            owner@:--x-----------:------:deny
            owner@:rw-p---A-W-Co-:------:allow
            group@:-w-p----------:------:deny
            group@:r-x-----------:------:allow
        user:gozer:r-x-----------:------:allow
         everyone@:-w-p---A-W-Co-:------:deny
         everyone@:r-x---a-R-c--s:------:allow</screen>
<para>W kolejnym przykładzie użytkownik <literal>gozer</literal> ma przyznane
uprawnienia do odczytu, zapisu i wykonywania, które są dziedziczone dla nowo
tworzonych plików i katalogów. Uzyskano je przy użyciu skróconego formatu ACL.</para>
<screen># <userinput>chmod A+user:gozer:rwx:f:allow dir.1</userinput>
# <userinput>ls -dV dir.1</userinput>
drwxr-xr-x+  2 root     root           2 Feb 23 10:37 dir.1
        user:gozer:rwx-----------:f-----:allow
            owner@:--------------:------:deny
            owner@:rwxp---A-W-Co-:------:allow
            group@:-w-p----------:------:deny
            group@:r-x-----------:------:allow
         everyone@:-w-p---A-W-Co-:------:deny
         everyone@:r-x---a-R-c--s:------:allow</screen>
<para>Można także kopiować i wklejać uprawnienia i flagi dziedziczenia z wyjścia polecenia
<command>ls</command> <option>V</option> do skróconego formatu polecenia <command>chmod</command>.
Na przykład w celu powielenia uprawnień i flag dziedziczenia do <filename>dir.1</filename> od użytkownika
<literal>gozer</literal> dla użytkownika <literal>cindys</literal>, można skopiować uprawnienia i flagi
dziedziczenia (<literal>rwx-----------:f-----:allow</literal>) do polecenia <command>chmod</command>. Jak poniżej:</para>
<screen># <userinput>chmod A+user:cindys:rwx-----------:f-----:allow dir.1</userinput>
# <userinput>ls -dV dir.1</userinput>
drwxr-xr-x+  2 root     root           2 Feb 23 10:37 dir.1
       user:cindys:rwx-----------:f-----:allow
        user:gozer:rwx-----------:f-----:allow
            owner@:--------------:------:deny
            owner@:rwxp---A-W-Co-:------:allow
            group@:-w-p----------:------:deny
            group@:r-x-----------:------:allow
         everyone@:-w-p---A-W-Co-:------:deny
         everyone@:r-x---a-R-c--s:------:allow</screen>
</example>
</sect1>
</chapter>
