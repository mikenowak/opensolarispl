<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML//EN" "docbook.dtd"[
	<!ENTITY % xinclude SYSTEM "xinclude.mod">
	%xinclude;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="gbxwl">



<title>Scripting With the D Language</title>
<toc>
<para>This chapter discusses the basic information that you need to start
writing your own D language scripts.</para>
</toc>
<sect1 xml:id="gcfqr">
<title>Writing D Scripts</title>
<para>Complex sets of DTrace probes can become difficult to manage on the
command line. The <command>dtrace</command> command supports scripts. You
can specify a script by passing the <option>
s</option> option, along with
the script's file name, to the <command>dtrace</command> command. You can
also create executable DTrace interpreter files. A DTrace interpreter file
always begins with the line <userinput>#!/usr/sbin/dtrace -s</userinput>.</para>
<sect2 xml:id="gcfql">
<title>Executable D Scripts</title>
<para>This example script, named <filename>syscall.d</filename>, traces the
executable name every time the executable enters each system call:</para>
<programlisting>syscall:::entry
{
   trace(execname);
}</programlisting>
<para>Note that the filename ends with a .d suffix. This is the conventional
ending for D scripts. You can run this script off the DTrace command line
with the following command:</para>
<programlisting># <emphasis role="strong">dtrace -s syscall.d</emphasis>
dtrace: description 'syscall ' matched 226 probes
CPU     ID                     FUNCTION:NAME
  0    312                     pollsys:entry    java
  0     98                       ioctl:entry    dtrace
  0     98                       ioctl:entry    dtrace
  0    234                   sysconfig:entry    dtrace
  0    234                   sysconfig:entry    dtrace
  0    168                   sigaction:entry    dtrace
  0    168                   sigaction:entry    dtrace
  0     98                       ioctl:entry    dtrace
<emphasis role="strong">^C</emphasis>
</programlisting>
<para>You can run the script by entering the filename at the command line
by following two steps. First, verify that the first line of the file invokes
the interpreter. The interpreter invocation line is <literal>#!/usr/sbin/dtrace
-s</literal>. Then set the execute permission for the file.</para>
<example xml:id="gcfqn">

<title>Running a D Script from the Command Line</title>
<programlisting># <emphasis role="strong">cat syscall.d</emphasis>
#!/usr/sbin/dtrace -s

syscall:::entry
{
   trace(execname);
}

# <emphasis role="strong">chmod +x syscall.d</emphasis>
# <emphasis role="strong">ls -l syscall.d</emphasis>
-rwxr-xr-x   1 root     other       62 May 12 11:30 syscall.d
# <emphasis role="strong">./syscall.d</emphasis>
dtrace: script './syscall.d' matched 226 probes
CPU     ID                     FUNCTION:NAME
  0     98                       ioctl:entry    dtrace
  0     98                       ioctl:entry    dtrace
  0    312                     pollsys:entry    java
  0    312                     pollsys:entry    java
  0    312                     pollsys:entry    java
  0     98                       ioctl:entry    dtrace
  0     98                       ioctl:entry    dtrace
  0    234                   sysconfig:entry    dtrace
  0    234                   sysconfig:entry    dtrace
<emphasis role="strong">^C</emphasis>
</programlisting>
</example>
</sect2>
<sect2 xml:id="gcfrj">
<title>D Literal Strings</title>
<para>
<indexterm xml:id="indexterm-23">
<primary>strings</primary>
</indexterm>The D language supports literal strings. DTrace represents strings
as an array of characters terminated by a null byte. The visible part of the
string varies in length depending on the location of the null byte. DTrace
stores each string in a fixed-size array to ensure that each probe traces
a consistent amount of data.  Strings cannot exceed the length of the predefined
string limit. The limit can be modified in your D program or on the <command>dtrace</command> command line by tuning the <literal>strsize</literal> option. Refer
to <olink remap="external" targetdoc="817-6223" targetptr="chp-opt">Chapter 16, <citetitle remap="chapter">Options and Tunables,</citetitle> in <citetitle remap="book">Solaris
Dynamic Tracing Guide</citetitle>
</olink> for more information on tunable
DTrace options. The default string limit is 256 bytes.</para>
<para>
<indexterm xml:id="indexterm-24">
<primary>strings</primary>
<secondary>type</secondary>
</indexterm>The D language provides an explicit <literal>string</literal> type
rather than using the type <literal>char *</literal> to refer to strings.
See <olink remap="external" targetdoc="817-6223" targetptr="chp-strings">Chapter 6, <citetitle remap="chapter">Strings,</citetitle> in <citetitle remap="book">Solaris Dynamic
Tracing Guide</citetitle>
</olink> for more information about D literal strings.</para>
<example xml:id="gcfss">

<title>Using D Literal Strings With The <function>trace
</function> Function</title>
<programlisting># <emphasis role="strong">cat string.d</emphasis>

#!/usr/sbin/dtrace -s

fbt::bdev_strategy:entry
{
   trace(execname);
   trace(" is initiating a disk I/O\n");
}</programlisting>
<para>The <literal>\n</literal> symbol at the end of the literal string produces
a new line. To run this script, enter the following command:</para>
<programlisting># <emphasis role="strong">dtrace -s string.d</emphasis>
dtrace: script 'string.d' matched 1 probes
CPU     ID                     FUNCTION:NAME
  0   9215               bdev_strategy:entry   bash is initiating a disk I/O

  0   9215               bdev_strategy:entry   vi is initiating a disk I/O

  0   9215               bdev_strategy:entry   vi is initiating a disk I/O

  0   9215               bdev_strategy:entry   sched is initiating a disk I/O

<emphasis role="strong">^C</emphasis>
</programlisting>
<para>The <option>
q</option> option of the <command>dtrace</command> command
 only records the actions that are explicitly stated in the script or command
line invocation. This option suppresses the default output that the <command>dtrace</command> command normally produces.</para>
<programlisting># <emphasis role="strong">dtrace -q -s string.d</emphasis>
ls is initiating a disk I/O
cat is initiating a disk I/O
fsflush is initiating a disk I/O
vi is initiating a disk I/O
<emphasis role="strong">^C</emphasis>
</programlisting>
</example>
</sect2>
<sect2 xml:id="gcgke">
<title>Creating D Scripts That Use Arguments</title>
<para>You can use the <command>dtrace</command> command to create executable
interpreter files. The file must have execute permission. The initial line
of the file must be <literal>#!/usr/sbin/dtrace -s</literal>. You can specify
other options to the <command>dtrace</command> command on this line. You must
specify the options with only one dash (<literal>-</literal>). List the <literal>s</literal> option last, as in the following example.</para>
<screen>#!/usr/sbin/dtrace -qvs</screen>
<para>You can specify options for the <command>dtrace</command> command by
using <literal>#pragma</literal> lines in the D script, as in the following
D fragment:</para>
<screen># <userinput>cat -n mem2.d</userinput>
     1  #!/usr/sbin/dtrace -s
     2
     3  #pragma D option quiet
     4  #pragma D option verbose
     5  
     6  vminfo:::
     ...</screen>
<para>The following table lists the option names that you can use in <literal>#pragma</literal> lines.</para>
<table frame="topbot" xml:id="gcglx">

<title>DTrace Consumer Options</title>
<tgroup cols="4" colsep="0" rowsep="0">
<colspec colname="colspec2" colwidth="0.88*"/>
<colspec colname="colspec3" colwidth="1.06*"/>
<colspec colname="colspec4" colwidth="0.69*"/>
<colspec colname="colspec5" colwidth="1.44*"/>
<thead>
<row rowsep="1">
<entry>
<para>Option Name</para>
</entry>
<entry>
<para>Value</para>
</entry>
<entry>
<para>
<command>dtrace</command> Alias</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>
<literal>aggrate</literal>
</para>
</entry>
<entry>
<para>
<replaceable>time</replaceable>
</para>
</entry>
<entry>
</entry>
<entry>
<para>Rate of aggregation reading</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>aggsize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>size</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Aggregation buffer size</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>bufresize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<literal>auto</literal> or <literal>manual</literal>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Buffer resizing policy</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>bufsize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>size</replaceable>
</para>
</entry>
<entry colname="colspec4">
<para>
<option>
b</option>
</para>
</entry>
<entry colname="colspec5">
<para>Principal buffer size</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>cleanrate</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>time</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Cleaning rate</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>cpu</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
<para>
<option>
c</option>
</para>
</entry>
<entry colname="colspec5">
<para>CPU on which to enable tracing</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>defaultargs</literal>
</para>
</entry>
<entry colname="colspec3">
<para>â€”</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Allow references to unspecified macro arguments</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>destructive</literal>
</para>
</entry>
<entry colname="colspec3">
<para>â€”</para>
</entry>
<entry colname="colspec4">
<para>
<option>
w</option>
</para>
</entry>
<entry colname="colspec5">
<para>Allow destructive actions</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>dynvarsize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>size</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Dynamic variable space size</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>flowindent</literal>
</para>
</entry>
<entry colname="colspec3">
<para>â€”</para>
</entry>
<entry colname="colspec4">
<para>
<option>
F</option>
</para>
</entry>
<entry colname="colspec5">
<para>Indent function entry and prefix with <literal>-&gt;
</literal>; unindent
function return and prefix with <literal>&lt;-</literal>
</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>grabanon</literal>
</para>
</entry>
<entry colname="colspec3">
<para>â€”</para>
</entry>
<entry colname="colspec4">
<para>
<option>
a</option>
</para>
</entry>
<entry colname="colspec5">
<para>Claim anonymous state</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>jstackframes</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Number of default stack frames <function>jstack
</function>
</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>jstackstrsize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Default string space size for <function>jstack
</function>
</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>nspec</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Number of speculations</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>quiet</literal>
</para>
</entry>
<entry colname="colspec3">
<para>â€”</para>
</entry>
<entry colname="colspec4">
<para>
<option>
q</option>
</para>
</entry>
<entry colname="colspec5">
<para>Output only explicitly traced data</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>specsize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>size</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Speculation buffer size</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>strsize</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>size</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>String size</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>stackframes</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Number of stack frames</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>stackindent</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Number of whitespace characters to use when indenting <function>stack
</function> and <function>ustack
</function> output</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>statusrate</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>time</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Rate of status checking</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>switchrate</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>time</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Rate of buffer switching</para>
</entry>
</row>
<row>
<entry colname="colspec2">
<para>
<literal>ustackframes</literal>
</para>
</entry>
<entry colname="colspec3">
<para>
<replaceable>scalar</replaceable>
</para>
</entry>
<entry colname="colspec4">
</entry>
<entry colname="colspec5">
<para>Number of user stack frames</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para>A D script can refer to a set of built in macro variables. These macro
variables are defined by the D compiler.</para>
<variablelist>
<varlistentry>
<term>
<literal>$[0-9]+</literal>
</term>
<listitem>
<para>Macro arguments</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$egid</literal>
</term>
<listitem>
<para>Effective group-ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$euid</literal>
</term>
<listitem>
<para>Effective user-ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$gid</literal>
</term>
<listitem>
<para>Real group-ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$pid</literal>
</term>
<listitem>
<para>Process ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$pgid</literal>
</term>
<listitem>
<para>Process group ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$ppid</literal>
</term>
<listitem>
<para>Parent process ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$projid</literal>
</term>
<listitem>
<para>Project ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$sid</literal>
</term>
<listitem>
<para>Session ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$target</literal>
</term>
<listitem>
<para>Target process ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$taskid</literal>
</term>
<listitem>
<para>Task ID</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>$uid</literal>
</term>
<listitem>
<para>Real user-ID</para>
</listitem>
</varlistentry>
</variablelist>
<example xml:id="gcgls">

<title>PID Argument Example</title>
<para>This example passes the PID of a running <command>v</command>i process
to the <filename>syscalls2.d</filename> D script. The D script terminates
when the <command>vi</command> command exits.</para>
<screen># <userinput>cat -n syscalls2.d</userinput>
     1  #!/usr/sbin/dtrace -qs
     2
     3  syscall:::entry
     4  /pid == $1/
     5  {
     6    @[probefunc] = count();
     7  }
     8  syscall::rexit:entry
     9  {
    10    exit(0);
    11  }

# <userinput>pgrep vi</userinput>
2208
# <userinput>./syscalls2.d 2208</userinput>

  rexit                                               1
  setpgrp                                             1
  creat                                               1
  getpid                                              1
  open                                                1
  lstat64                                             1
  stat64                                              1
  fdsync                                              1
  unlink                                              1
  close                                               1
  alarm                                               1
  lseek                                               1
  sigaction                                           1
  ioctl                                               1
  read                                                1
  write                                               1
     </screen>
</example>
</sect2>
</sect1>
<sect1 xml:id="gcfpz">
<title>DTrace Built-in Variables</title>
<para>The following list includes all of the built-in variables for the DTrace
framework.</para>
<variablelist>
<varlistentry>
<term>
<literal>int64_t arg0, ..., arg9</literal>
</term>
<listitem>
<para>The first ten input arguments to a probe represented as raw
64-bit integers.  If fewer than ten arguments are passed to the current probe,
the remaining variables return zero.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>args[]</literal>
</term>
<listitem>
<para>The typed arguments to the current probe, if any. The <literal>args[]</literal> array is accessed using an integer index, but each element is defined
to be the type corresponding to the given probe argument. For example, if
the <literal>args[]</literal> array is referenced by a <olink remap="external" targetdoc="816-5167" targetptr="read-2">
<citerefentry>
<refentrytitle>read</refentrytitle>
<manvolnum>
2
</manvolnum>
</citerefentry>
</olink> system call probe, <literal>args[0]</literal> is of
type <literal>int</literal>, <literal>args[1]</literal> is of type <literal>void
*</literal>, and <literal>args[2]</literal> is of type <literal>size_t</literal>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uintptr_t caller</literal>
</term>
<listitem>
<para>The program counter location of the current thread just before
entering the current probe.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>chipid_t chip</literal>
</term>
<listitem>
<para>The CPU chip identifier for the current physical chip. See <olink remap="external" targetdoc="817-6223" targetptr="chp-sched">Chapter 26, <citetitle remap="chapter">sched Provider,</citetitle> in <citetitle remap="book">Solaris
Dynamic Tracing Guide</citetitle>
</olink> for more information.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>processorid_t cpu</literal>
</term>
<listitem>
<para>The CPU identifier for the current CPU. See <olink remap="external" targetdoc="817-6223" targetptr="chp-sched">Chapter 26, <citetitle remap="chapter">sched Provider,</citetitle> in <citetitle remap="book">Solaris
Dynamic Tracing Guide</citetitle>
</olink> for more information.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>cpuinfo_t *curcpu</literal>
</term>
<listitem>
<para>The CPU information for the current CPU. See <olink remap="external" targetdoc="817-6223" targetptr="chp-sched">Chapter 26, <citetitle remap="chapter">sched Provider,</citetitle> in <citetitle remap="book">Solaris
Dynamic Tracing Guide</citetitle>
</olink> for more information.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>lwpsinfo_t *curlwpsinfo</literal>
</term>
<listitem>
<para>The lightweight process (LWP) state of the LWP associated
with the current thread. This structure is described in further detail in
the <olink remap="external" targetdoc="816-5174" targetptr="proc-4">
<citerefentry>
<refentrytitle>proc</refentrytitle>
<manvolnum>
4
</manvolnum>
</citerefentry>
</olink> man page.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>psinfo_t *curpsinfo</literal>
</term>
<listitem>
<para>The process state of the process associated with the current
thread. This structure is described in further detail in the  This structure
is described in further detail in the <olink remap="external" targetdoc="816-5174" targetptr="proc-4">
<citerefentry>
<refentrytitle>proc</refentrytitle>
<manvolnum>
4
</manvolnum>
</citerefentry>
</olink> man page.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>kthread_t *curthread</literal>
</term>
<listitem>
<para>The address of the operating system kernel's internal data
structure for the current thread, the <literal>kthread_t</literal>. The <literal>kthread_t</literal> is defined in <literal>&lt;sys/thread.h&gt;
</literal>. Refer
to <citetitle>Solaris Internals</citetitle> for more information on this variable
and other operating system data structures.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string cwd</literal>
</term>
<listitem>
<para>The name of the current working directory of the process associated
with the current thread.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint_t epid</literal>
</term>
<listitem>
<para>The enabled probe ID (EPID) for the current probe. This integer
uniquely identifiers a particular probe that is enabled with a specific predicate
and set of actions.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>int errno</literal>
</term>
<listitem>
<para>The error value returned by the last system call executed
by this thread.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string execname</literal>
</term>
<listitem>
<para>The name that was passed to <olink remap="external" targetdoc="816-5167" targetptr="exec-2">
<citerefentry>
<refentrytitle>exec</refentrytitle>
<manvolnum>
2
</manvolnum>
</citerefentry>
</olink> to execute the current process.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>gid_t gid</literal>
</term>
<listitem>
<para>The real group ID of the current process.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint_t id</literal>
</term>
<listitem>
<para>The probe ID for the current probe. This ID is the system-wide
unique identifier for the probe as published by DTrace and listed in the output
of <command>dtrace</command> <option>
l</option>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint_t ipl</literal>
</term>
<listitem>
<para>The interrupt priority level (IPL) on the current CPU at the
time that the probe fires. Refer to <citetitle>Solaris Internals</citetitle> for
more information on interrupt levels and interrupt handling in the Solaris
operating system kernel.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>lgrp_id_t lgrp</literal>
</term>
<listitem>
<para>The locality group ID for the latency group of which the current
CPU is a member. See <olink remap="external" targetdoc="817-6223" targetptr="chp-sched">Chapter
26, <citetitle remap="chapter">sched Provider,</citetitle> in <citetitle remap="book">Solaris Dynamic Tracing Guide</citetitle>
</olink> for more information
on CPU management in DTrace. See <olink remap="external" targetdoc="817-4415" targetptr="lgroups-1">Chapter 4, <citetitle remap="chapter">Locality Group
APIs,</citetitle> in <citetitle remap="book">Programming Interfaces Guide</citetitle>
</olink> for
more information about locality groups.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>pid_t pid</literal>
</term>
<listitem>
<para>The process ID of the current process.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>pid_t ppid</literal>
</term>
<listitem>
<para>The parent process ID of the current process.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string probefunc</literal>
</term>
<listitem>
<para>The function name portion of the current probe's description.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string probemod</literal>
</term>
<listitem>
<para>The module name portion of the current probe's description.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string probename</literal>
</term>
<listitem>
<para>The name portion of the current probe's description.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string probeprov</literal>
</term>
<listitem>
<para>The provider name portion of the current probe's description.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>psetid_t pset</literal>
</term>
<listitem>
<para>The processor set ID for the processor set that contains the
current CPU. See <olink remap="external" targetdoc="817-6223" targetptr="chp-sched">Chapter
26, <citetitle remap="chapter">sched Provider,</citetitle> in <citetitle remap="book">Solaris Dynamic Tracing Guide</citetitle>
</olink> for more information.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>string root</literal>
</term>
<listitem>
<para>The name of the root directory of the process associated with
the current thread.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint_t stackdepth</literal>
</term>
<listitem>
<para>The current thread's stack frame depth at probe firing time.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>id_t tid</literal>
</term>
<listitem>
<para>The thread ID of the current thread. For threads that are
associated with user processes, this value is equal to the result of a call
to <olink remap="external" targetdoc="816-5168" targetptr="pthread-self-3c">
<citerefentry>
<refentrytitle>pthread_self</refentrytitle>
<manvolnum>
3C
</manvolnum>
</citerefentry>
</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint64_t timestamp</literal>
</term>
<listitem>
<para>The current value of a nanosecond timestamp counter. This
counter increments from an arbitrary point in the past and should only be
used for relative computations.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uid_t uid</literal>
</term>
<listitem>
<para>The real user ID of the current process.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint64_t uregs[]</literal>
</term>
<listitem>
<para>The current thread's saved user-mode register values at probe
firing time. Use of the <literal>uregs[]</literal> array is discussed in <olink remap="external" targetdoc="817-6223" targetptr="chp-user">Chapter 33, <citetitle remap="chapter">User Process Tracing,</citetitle> in <citetitle remap="book">Solaris
Dynamic Tracing Guide</citetitle>
</olink>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint64_t vtimestamp</literal>
</term>
<listitem>
<para>The current value of a nanosecond timestamp counter. The counter
is virtualized to the amount of time that the current thread has been running
on a CPU. The counter does not include the time that is spent in DTrace predicates
and actions. This counter increments from an arbitrary point in the past and
should only be used for relative time computations.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>uint64_t walltimestamp</literal>
</term>
<listitem>
<para>The current number of nanoseconds since 00:00 Universal Coordinated
Time, January 1, 1970.</para>
</listitem>
</varlistentry>
</variablelist>
</sect1>
</chapter>
