<chapter id="ipqos-policy-planning-1"><title>Creating
the IPQoS Configuration File (Tasks)</title><highlights><para>This chapter shows how to create IPQoS configuration files. Topics that are
covered in the chapter include the following.</para><itemizedlist><listitem><para><olink targetptr="ipqos-policy-planning-10" remap="internal">Defining a QoS Policy
in the IPQoS Configuration File (Task Map)</olink></para>
</listitem><listitem><para><olink targetptr="ipqos-policy-planning-9" remap="internal">Tools for Creating a QoS
Policy</olink></para>
</listitem><listitem><para><olink targetptr="ipqos-policy-planning-2" remap="internal">Creating IPQoS Configuration
Files for Web Servers</olink></para>
</listitem><listitem><para><olink targetptr="ipqos-policy-planning-5" remap="internal">Creating an IPQoS Configuration
File for an Application Server</olink></para>
</listitem><listitem><para><olink targetptr="ipqos-policy-planning-137" remap="internal">Providing Differentiated
Services on a Router</olink></para>
</listitem>
</itemizedlist><para>This chapter assumes that you have defined a complete QoS policy, and you are
ready to use this policy as the basis for the IPQoS configuration file. For instructions
on QoS policy planning, refer to <olink targetptr="ipqos-config-planning-7" remap="internal">Planning
the Quality-of-Service Policy</olink>.</para>
</highlights><sect1 id="ipqos-policy-planning-10"><title>Defining a QoS Policy in the IPQoS Configuration
File (Task Map)</title><para>This task map lists the general tasks for creating an IPQoS configuration
file.</para><informaltable frame="all"><tgroup cols="3" colsep="1" rowsep="1"><colspec colwidth="33*"/><colspec colwidth="33*"/><colspec colwidth="33*"/><thead><row><entry rowsep="1"><para>Task</para>
</entry><entry><para>Description</para>
</entry><entry><para>For Instructions</para>
</entry>
</row>
</thead><tbody><row><entry colsep="1" rowsep="1"><para>1. Plan your IPQoS-enabled network configuration.</para>
</entry><entry colsep="1" rowsep="1"><para>Decide which systems on the local network should become IPQoS enabled.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-config-planning-32" remap="internal">How to Prepare a Network for IPQoS</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>2. Plan the QoS policy for IPQoS systems on your network.</para>
</entry><entry colsep="1" rowsep="1"><para>Identify traffic flows as distinct classes of service. Then, determine which
flows require traffic management.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-config-planning-7" remap="internal">Planning the Quality-of-Service Policy</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>3. Create the IPQoS configuration file and define its first action.</para>
</entry><entry colsep="1" rowsep="1"><para>Create the IPQoS file, invoke the IP classifier, and define a class for processing.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration
File and Define Traffic Classes</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>4. Create filters for a class.</para>
</entry><entry colsep="1" rowsep="1"><para>Add the filters that govern which traffic is selected and organized into a class.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-33" remap="internal">How to Define Filters in the IPQoS
Configuration File</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>5. Add more classes and filters to the IPQoS configuration file.</para>
</entry><entry colsep="1" rowsep="1"><para>Create more classes and filters to be processed by the IP classifier.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-114" remap="internal">How to Create an IPQoS Configuration
File for a Best-Effort Web Server</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>6. Add an <literal>action</literal> statement with parameters that configure
the metering modules.</para>
</entry><entry colsep="1" rowsep="1"><para>If the QoS policy calls for flow control, assign flow-control rates and conformance
levels to the meter.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-144" remap="internal">How to Configure Flow Control in
the IPQoS Configuration File</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>7. Add an <literal>action</literal> statement with parameters that configure
the marker.</para>
</entry><entry colsep="1" rowsep="1"><para>If the QoS policy calls for differentiated forwarding behaviors, define how
traffic classes are to be forwarded.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-102" remap="internal">How to Define Traffic Forwarding
in the IPQoS Configuration File</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>8. Add an <literal>action</literal> statement with parameters that configure
the flow-accounting module.</para>
</entry><entry colsep="1" rowsep="1"><para>If the QoS policy calls for statistics gathering on traffic flows, define how
 accounting statistics are to be gathered.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-110" remap="internal">How to Enable Accounting for a
Class in the IPQoS Configuration File</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="1"><para>9. Apply the IPQoS configuration file.</para>
</entry><entry colsep="1" rowsep="1"><para>Add the content of a specified IPQoS configuration file into the appropriate
kernel modules.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS
Kernel Modules</olink></para>
</entry>
</row><row><entry colsep="1" rowsep="0"><para>10. Configure forwarding behaviors in the router files.</para>
</entry><entry colsep="1" rowsep="1"><para>If any  IPQoS configuration files on the network define forwarding behaviors,
add the resulting DSCPs to the appropriate scheduling files on the router.</para>
</entry><entry colsep="1" rowsep="1"><para><olink targetptr="ipqos-policy-planning-136" remap="internal">How to Configure a Router on an
IPQoS-Enabled Network</olink></para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect1><sect1 id="ipqos-policy-planning-9"><title>Tools for Creating a QoS Policy</title><para>The QoS policy for your network resides in the IPQoS configuration file.
You create this configuration file with a text editor. Then, you provide the file
as an argument to <command>ipqosconf</command>, the IPQoS configuration utility. When
you instruct <command>ipqosconf</command> to apply the policy that is defined in your
configuration file, the policy is written into the kernel IPQoS system. For detailed
information about the <literal>ipqosconf</literal> command, refer to the <command>ipqosconf</command>(1M) man page. For instructions on the use of <command>ipqosconf</command>, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration
to the IPQoS Kernel Modules</olink>.</para><sect2 id="ipqos-policy-planning-13"><title>Basic IPQoS Configuration File</title><para>An IPQoS configuration file consists of a tree of <literal>action</literal> statements
that implement the QoS policy that you defined in <olink targetptr="ipqos-config-planning-7" remap="internal">Planning the Quality-of-Service Policy</olink>. The IPQoS configuration file configures
the IPQoS modules. Each action statement contains a set of <emphasis>classes</emphasis>, <emphasis>filters</emphasis>, or <emphasis>parameters</emphasis> to be processed by the module
that is called in the action statement. </para><para>For the complete syntax of the IPQoS configuration file, refer to <olink targetptr="ipqos-reference-ex-23" remap="internal">Example 37&#8211;3</olink> and the <command>ipqosconf</command>(1M) man page.</para><sect3 id="ipqos-policy-planning-97"><title>Configuring the IPQoS Example Topology</title><para>The tasks in this chapter explain how to create IPQoS configuration files
for three IPQoS-enabled systems. These systems are part of the network topology of
the company BigISP, which was introduced in <olink targetptr="ipqos-config-planning-fig-44" remap="internal">Figure 33&#8211;4</olink>. </para><itemizedlist><listitem><para><literal>Goldweb</literal> &#8211; A web server that hosts web sites
for customers who have purchased premium-level SLAs</para>
</listitem><listitem><para><literal>Userweb</literal> &#8211; A less-powerful web server that
hosts personal web sites for home users who have purchased &#8220;best-effort&#8221;
SLAs</para>
</listitem><listitem><para><literal>BigAPPS</literal> &#8211; An application server that serves
mail, network news, and FTP to both gold-level and best-effort customers</para>
</listitem>
</itemizedlist><para>These three configuration files illustrate the most common IPQoS configurations.
You might use the sample files that are shown in the next section as templates for
your own IPQoS implementation.</para>
</sect3>
</sect2>
</sect1><sect1 id="ipqos-policy-planning-2"><title>Creating IPQoS Configuration Files for
Web Servers</title><para>This section introduces the IPQoS configuration file  by showing how to
create a configuration for a premium web server. The section then shows how to configure
a completely different level of service in another configuration file for a server
that hosts personal web sites. Both servers are part of the network example that is
shown in <olink targetptr="ipqos-config-planning-fig-44" remap="internal">Figure 33&#8211;4</olink>.</para><para>The following configuration file defines IPQoS activities for the <literal>Goldweb</literal> server. This server hosts the web site for Goldco, the company that
has purchased a premium SLA.</para><example id="ipqos-policy-planning-ex-93"><title>Sample IPQoS Configuration File for
a Premium Web Server</title><programlisting>fmt_version 1.0

action {
    module ipgpc
    name ipgpc.classify
    params {
        global_stats TRUE
    }
    class {
        name goldweb
        next_action markAF11
        enable_stats FALSE
    }
    class {
        name video
        next_action markEF
        enable_stats FALSE
    }
    filter {
        name webout
        sport 80
        direction LOCAL_OUT
        class goldweb
    }
    filter {
        name videoout
        sport videosrv
        direction LOCAL_OUT
        class video
    }
}
action {
    module dscpmk
    name markAF11
    params {
        global_stats FALSE
        dscp_map{0-63:10}
        next_action continue
    }
}
action {
    module dscpmk
    name markEF
    params {
        global_stats TRUE
        dscp_map{0-63:46}
        next_action acct
    }
}
action {
    module flowacct
    name acct
    params {
        enable_stats TRUE
        timer 10000
        timeout 10000
        max_limit 2048
    }
}</programlisting>
</example><para>The following configuration file defines IPQoS activities on <literal>Userweb</literal>. This server hosts web sites for individuals with low-priced, or <emphasis>best-effort</emphasis>, SLAs. This level of service guarantees the best service that
can be delivered to best-effort customers after the IPQoS system handles traffic from
customers with more expensive SLAs.</para><example id="ipqos-policy-planning-ex-95"><title>Sample Configuration for a Best-Effort
Web Server</title><programlisting>fmt_version 1.0

action {
    module ipgpc
    name ipgpc.classify
    params {
        global_stats TRUE
    }
    class {
        name Userweb
        next_action markAF12
        enable_stats FALSE
    }
    filter {
        name webout
        sport 80
        direction LOCAL_OUT
        class Userweb
   }
}
action {
    module dscpmk
    name markAF12
    params {
        global_stats FALSE
        dscp_map{0-63:12}
        next_action continue
    }
}</programlisting>
</example><task id="ipqos-policy-planning-32"><title>How to Create the IPQoS Configuration File
and Define Traffic Classes</title><tasksummary><para>You can create your first IPQoS configuration file in whatever directory is
easiest for you to maintain. The tasks in this chapter use the directory <filename>/var/ipqos</filename> as the location for IPQoS configuration files. The next procedure
builds the initial segment of the IPQoS configuration file that is introduced in <olink targetptr="ipqos-policy-planning-ex-93" remap="internal">Example 34&#8211;1</olink>. </para><note><para>As you create the IPQoS configuration file, be very careful to start and
end each <literal>action</literal> statement and clause with curly braces ({ }). For
an example of the use of braces, see <olink targetptr="ipqos-policy-planning-ex-93" remap="internal">Example 34&#8211;1</olink>.</para>
</note>
</tasksummary><procedure><step id="ipqos-policy-planning-step-24"><para>Log in to the premium web server, and
create a new IPQoS configuration file with a <literal>.qos</literal> extension.</para><para>Every IPQoS configuration file must start with the version number <literal>fmt_version 1.0</literal> as its first uncommented line. </para>
</step><step id="ipqos-policy-planning-step-154"><para>Follow the opening parameter with  the initial <literal>action</literal> statement,
which configures the generic IP classifier <command>ipgpc</command>. </para><para>This initial action begins the tree of <literal>action</literal> statements that compose
the IPQoS configuration file. For example, the <filename>/var/ipqos/Goldweb.qos</filename> file
begins with the initial <literal>action</literal> statement to call the <literal>ipgpc</literal> classifier. </para><screen><userinput>fmt_version 1.0

action {
    module ipgpc
    name ipgpc.classify</userinput></screen><variablelist><varlistentry><term><literal>fmt_version 1.0</literal></term><listitem><para>Begins the IPQoS configuration file.</para>
</listitem>
</varlistentry><varlistentry><term><literal>action {</literal></term><listitem><para>Begins the action statement.</para>
</listitem>
</varlistentry><varlistentry><term><literal>module ipgpc</literal></term><listitem><para>Configures the <command>ipgpc</command> classifier as the first action
in the configuration file.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name ipgpc.classify</literal></term><listitem><para>Defines the name of the classifier <literal>action</literal> statement,
which must always be <literal>ipgpc.classify</literal>.</para>
</listitem>
</varlistentry>
</variablelist><para>For detailed syntactical information about <literal>action</literal> statements,
refer to <olink targetptr="ipqos-reference-240" remap="internal">action Statement</olink> and the <command>ipqosconf</command>(1M) man page.</para>
</step><step id="ipqos-policy-setup-step-94"><para>Add a <literal>params</literal> clause with the statistics parameter <literal>global_stats</literal>. </para><screen><userinput>params {
          global_stats TRUE
   }</userinput></screen><para>The parameter <literal>global_stats TRUE</literal> in the<literal>ipgpc.classify</literal> statement enables statistics gathering for that action. <literal>global_stats
TRUE</literal> also enables per-class statistics gathering wherever a class clause
definition specifies <literal>enable_stats TRUE</literal>.</para><para>Turning on
statistics impacts performance. You might want to gather statistics on a new IPQoS
configuration file to verify that IPQoS works properly. Later, you can turn off statistics
collection by changing the argument to <literal>global_stats</literal> to <literal>FALSE</literal>.</para><para>Global statistics are but one type of parameter you can
define in a <literal>params</literal> clause. For syntactical and other details about <literal>params</literal> clauses, refer to <olink targetptr="ipqos-reference-29" remap="internal">params Clause</olink> and the <olink targetdoc="refman1m" targetptr="ipqosconf-1m" remap="external"><citerefentry><refentrytitle>ipqosconf</refentrytitle><manvolnum>1M</manvolnum></citerefentry></olink> man
page.</para>
</step><step id="ipqos-policy-planning-step-18"><para>Define a class that identifies traffic
that is bound for the premium server.</para><screen><userinput>class { 
        name goldweb 
        next_action markAF11   
        enable_stats FALSE 
    }</userinput></screen><para>This statement is called a <emphasis>class clause</emphasis>. A <literal>class</literal> clause has the following contents.</para><variablelist><varlistentry><term>name goldweb</term><listitem><para>Creates the class <literal>goldweb</literal> to identify traffic that
is bound for the <literal>Goldweb</literal> server.</para>
</listitem>
</varlistentry><varlistentry><term>next_action markAF11</term><listitem><para>Instructs the <command>ipgpc</command> module to pass packets of the <literal>goldweb</literal> class to the <literal>markAF11</literal> action statement. The <literal>markAF11</literal> action statement calls the <literal>dscpmk</literal> marker.</para>
</listitem>
</varlistentry><varlistentry><term>enable_stats FALSE</term><listitem><para>Enables statistics taking for the <literal>goldweb</literal> class.
However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>,
statistics for this class are not turned on.</para>
</listitem>
</varlistentry>
</variablelist><para>For detailed information about the syntax of the <literal>class</literal> clause,
see <olink targetptr="ipqos-reference-270" remap="internal">class Clause</olink> and the <command>ipqosconf</command>(1M) man page.</para>
</step><step id="ipqos-policy-planning-step-98"><para>Define a class that identifies an application
that must have highest-priority forwarding.</para><screen><userinput>class {
        name video
        next_action markEF
        enable_stats FALSE
    }</userinput></screen><variablelist><varlistentry><term><literal>name video</literal></term><listitem><para>Creates the class <literal>video</literal> to identify streaming video
traffic that is outgoing from the <literal>Goldweb</literal> server.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action markEF</literal></term><listitem><para>Instructs the <command>ipgpc</command> module to pass packets of the <literal>video</literal> class to the <literal>markEF</literal> statement after <command>ipgpc</command> completes processing. The <literal>markEF</literal> statement calls the <literal>dscpmk</literal> marker.</para>
</listitem>
</varlistentry><varlistentry><term><literal>enable_stats FALSE</literal></term><listitem><para>Enables statistics collection for the <literal>video</literal> class.
However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>,
statistics collection for this class is not turned on.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To define filters for the class you just created, refer to <olink targetptr="ipqos-policy-planning-33" remap="internal">How to Define Filters in the IPQoS Configuration
File</olink>.</para>
</listitem><listitem><para>To create another class clause for the configuration file, refer to <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and
Define Traffic Classes</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task><task id="ipqos-policy-planning-33"><title>How to Define Filters in the IPQoS Configuration
File</title><tasksummary><para>The next procedure shows how to define filters for a class in the IPQoS configuration
file. </para>
</tasksummary><taskprerequisites><para>The procedure assumes that you have already started file creation and have defined
classes. The steps continue building the <filename>/var/ipqos/Goldweb.qos</filename> file
that is created in <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS
Configuration File and Define Traffic Classes</olink>.</para><note><para>As you create the IPQoS configuration file, be very careful to start and
end each <literal>class</literal> clause and each <literal>filter</literal> clause
with curly braces ({ }). For an example of the use of braces, use <olink targetptr="ipqos-policy-planning-ex-93" remap="internal">Example 34&#8211;1</olink>.</para>
</note>
</taskprerequisites><procedure><step id="ipqos-policy-planning-step-25"><para>Open the IPQoS configuration file,
and locate the end of the last class that you defined.</para><para>For example, on
the IPQoS-enabled server <literal>Goldweb</literal>, you would start after the following <literal>class</literal> clause in <filename>/var/ipqos/Goldweb.qos</filename>:</para><screen>class {
        name video
        next_action markEF
        enable_stats FALSE
    }</screen>
</step><step id="ipqos-policy-planning-step-99"><para>Define a <literal>filter</literal> clause to select outgoing traffic from
the IPQoS system.</para><screen><userinput>    filter {
        name webout
        sport 80
        direction LOCAL_OUT
        class goldweb
    }</userinput></screen><variablelist><varlistentry><term><literal>name webout</literal></term><listitem><para>Gives the name <literal>webout</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport 80</literal></term><listitem><para>Selects traffic with a source port of 80, the well-known port for
HTTP (web) traffic.</para>
</listitem>
</varlistentry><varlistentry><term><literal>direction LOCAL_OUT</literal></term><listitem><para>Further selects traffic that is outgoing from the local system.</para>
</listitem>
</varlistentry><varlistentry><term><literal>class goldweb</literal></term><listitem><para>Identifies the class to which the filter belongs, in this instance,
class <literal>goldweb</literal>.</para>
</listitem>
</varlistentry>
</variablelist><para>For syntactical and detailed information about the <literal>filter</literal> clause
in the IPQoS configuration file, refer to <olink targetptr="ipqos-reference-28" remap="internal">filter
Clause</olink>.</para>
</step><step id="ipqos-policy-planning-step-100"><para>Define a <literal>filter</literal> clause
to select streaming video traffic on the IPQoS system.</para><screen><userinput>    filter {
        name videoout
        sport videosrv
        direction LOCAL_OUT
        class video
    }</userinput></screen><variablelist><varlistentry><term>name videoout</term><listitem><para>Gives the name <literal>videoout</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport videosrv</literal></term><listitem><para>Selects traffic with a source port of <literal>videosrv</literal>,
a previously defined port for the streaming video application on this system.</para>
</listitem>
</varlistentry><varlistentry><term><literal>direction LOCAL_OUT</literal></term><listitem><para>Further selects traffic that is outgoing from the local system.</para>
</listitem>
</varlistentry><varlistentry><term><literal>class video</literal></term><listitem><para>Identifies the class to which the filter belongs, in this instance,
class <literal>video</literal>.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To define forwarding behaviors for the marker modules, refer to <olink targetptr="ipqos-policy-planning-102" remap="internal">How to Define Traffic Forwarding in the IPQoS
Configuration File</olink>.</para>
</listitem><listitem><para>To define flow-control parameters for the metering modules, refer
to <olink targetptr="ipqos-policy-planning-144" remap="internal">How to Configure Flow Control in the
IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To activate the IPQoS configuration file, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS Kernel Modules</olink>.</para>
</listitem><listitem><para>To define additional filters, refer to <olink targetptr="ipqos-policy-planning-33" remap="internal">How to Define Filters in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To create classes for traffic flows from applications, refer to <olink targetptr="ipqos-policy-planning-67" remap="internal">How to Configure the IPQoS Configuration File
for an Application Server</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task><task id="ipqos-policy-planning-102"><title>How to Define Traffic Forwarding in the
IPQoS Configuration File</title><tasksummary><para>The next procedure shows how to define traffic forwarding by adding per-hop
behaviors for a class into the IPQoS configuration file. </para>
</tasksummary><taskprerequisites><para>The procedure assumes that you have an existing IPQoS configuration file with
already defined classes and already defined filters. The steps continue building the <filename>/var/ipqos/Goldweb.qos</filename> file from <olink targetptr="ipqos-policy-planning-ex-93" remap="internal">Example 34&#8211;1</olink>.</para><note><para>The procedure shows how to configure traffic forwarding by using the <command>dscpmk</command> marker module. For information about traffic forwarding on VLAN systems
by using the <command>dlclosmk</command> marker, refer to <olink targetptr="ipqos-reference-110" remap="internal">Using the dlcosmk Marker With VLAN Devices</olink>.</para>
</note>
</taskprerequisites><procedure><step id="ipqos-policy-planning-step-107"><para>Open the IPQoS configuration file,
and locate the end of the last filter you defined.</para><para>For example, on the
IPQoS-enabled server <literal>Goldweb,</literal> you would start after the following <literal>filter</literal> clause in <filename>/var/ipqos/Goldweb.qos</filename>:</para><screen>filter {
        name videoout
        sport videosrv
        direction LOCAL_OUT
        class video
    }
}</screen><para>Note that this <literal>filter</literal> clause is at the end of the <command>ipgpc</command> classifier <literal>action</literal> statement. Therefore, you need
a closing brace to terminate the filter and a second closing brace to terminate the <literal>action</literal> statement.</para>
</step><step id="ipqos-policy-planning-step-104"><para>Invoke the marker with the following <literal>action</literal> statement.</para><screen><userinput>action {
    module dscpmk
    name markAF11</userinput></screen><variablelist><varlistentry><term>module dscpmk</term><listitem><para>Calls the marker module <command>dscpmk</command>.</para>
</listitem>
</varlistentry><varlistentry><term>name markAF11</term><listitem><para>Gives the name <literal>markAF11</literal> to the <literal>action</literal> statement.</para>
</listitem>
</varlistentry>
</variablelist><para>The previously defined class <literal>goldweb</literal> includes a <literal>next_action markAF11</literal> statement. This statement sends traffic flows to the <literal>markAF11</literal> action statement after the classifier concludes processing.</para>
</step><step id="ipqos-policy-planning-step-105"><para>Define actions for the marker to take on the traffic flow.</para><screen><userinput>    params {
        global_stats FALSE
        dscp_map{0-63:10}
        next_action continue
    }
}</userinput></screen><variablelist><varlistentry><term>global_stats FALSE</term><listitem><para>Enables statistics collection for the <literal>markAF11</literal> marker <literal>action</literal> statement. However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>, statistics are not collected.</para>
</listitem>
</varlistentry><varlistentry><term>dscp_map{0&#8211;63:10}</term><listitem><para>Assigns a DSCP of <literal>10</literal> to the packet headers of the
traffic class <literal>goldweb</literal>, which is currently being processed by the
marker.</para>
</listitem>
</varlistentry><varlistentry><term>next_action continue</term><listitem><para>Indicates that no further processing is required on packets of the
traffic class <literal>goldweb</literal>, and that these packets can return to the
network stream.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of <literal>10</literal> instructs the marker to set all entries
in the <literal>dscp</literal> map to the decimal value 10 (binary 001010). This codepoint
indicates that packets of the <literal>goldweb</literal> traffic class are subject
to the AF11 per-hop behavior. AF11 guarantees that all packets with the DSCP of <literal>10</literal> receive a low-drop, high-priority service. Thus, outgoing traffic for
premium customers on <literal>Goldweb</literal> is given the highest priority that
is available for the Assured Forwarding (AF) PHB. For a table of possible DSCPs for
AF, refer to <olink targetptr="ipqos-reference-tbl-16" remap="internal">Table 37&#8211;2</olink>.</para>
</step><step id="ipqos-policy-planning-step-108"><para>Start another marker <literal>action</literal> statement.</para><screen><userinput>action {
    module dscpmk
    name markEF</userinput>    </screen><variablelist><varlistentry><term>module dscpmk</term><listitem><para>Calls the marker module <command>dscpmk</command>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name markEF</literal></term><listitem><para>Gives the name <literal>markEF</literal> to the <literal>action</literal> statement.</para>
</listitem>
</varlistentry>
</variablelist>
</step><step id="ipqos-policy-planning-step-109"><para>Define actions for the marker to take
on the traffic flow.</para><screen><userinput>    params {
        global_stats TRUE
        dscp_map{0-63:46}
        next_action acct
    }
}</userinput></screen><variablelist><varlistentry><term><literal>global_stats TRUE</literal></term><listitem><para>Enables statistics collection on class <literal>video</literal>, which
selects streaming video packets.</para>
</listitem>
</varlistentry><varlistentry><term><literal>dscp_map{0&#8211;63:46}</literal></term><listitem><para>Assigns a DSCP of <literal>46</literal> to the packet headers of the
traffic class <literal>video</literal>, which is currently being processed by the
marker. </para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action acct</literal></term><listitem><para>Instructs the <command>dscpmk</command> module to pass packets of
the class <literal>video</literal> to the <literal>acct</literal> <literal>action</literal> statement after <command>dscpmk</command> completes processing. The <literal>acct</literal> <literal>action</literal> statement invokes the <literal>flowacct</literal> module.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of <literal>46</literal> instructs the <command>dscpmk</command> module
to set all entries in the <literal>dscp</literal> map to the decimal value 46 (binary
101110) in the DS field. This codepoint indicates that packets of the <literal>video</literal> traffic class are subject to the Expedited Forwarding (EF) per-hop behavior. </para><note><para>The recommended codepoint for EF is 46 (binary 101110). Other DSCPs assign
AF PHBs to a packet.</para>
</note><para>The EF PHB guarantees that packets with the DSCP of <literal>46</literal> are
given the highest precedence by IPQoS and Diffserv-aware systems. Streaming applications
require highest-priority service, which is the rationale behind assigning to streaming
applications the EF PHBs in the QoS policy. For more details about the expedited forwarding
PHB, refer to <olink targetptr="ipqos-reference-140" remap="internal">Expedited Forwarding (EF) PHB</olink>.</para>
</step><step id="ipqos-policy-planning-step-113"><para>Add the DSCPs that you have just created
to the appropriate files on the Diffserv router. </para><para>For more information,
refer to <olink targetptr="ipqos-policy-planning-136" remap="internal">How to Configure a Router on
an IPQoS-Enabled Network</olink>.</para>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To start gathering flow-accounting statistics on traffic flows, refer
to <olink targetptr="ipqos-policy-planning-110" remap="internal">How to Enable Accounting for a Class
in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To define forwarding behaviors for the marker modules, refer to <olink targetptr="ipqos-policy-planning-102" remap="internal">How to Define Traffic Forwarding in the IPQoS
Configuration File</olink>.</para>
</listitem><listitem><para>To define flow-control parameters for the metering modules, refer
to <olink targetptr="ipqos-policy-planning-144" remap="internal">How to Configure Flow Control in the
IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To activate the IPQoS configuration file, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS Kernel Modules</olink>.</para>
</listitem><listitem><para>To define additional filters, refer to <olink targetptr="ipqos-policy-planning-33" remap="internal">How to Define Filters in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To create classes for traffic flows from applications, refer to <olink targetptr="ipqos-policy-planning-67" remap="internal">How to Configure the IPQoS Configuration File
for an Application Server</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task><task id="ipqos-policy-planning-110"><title>How to Enable Accounting for a Class in
the IPQoS Configuration File</title><tasksummary><para>The next procedure shows how to enable accounting on a traffic class in the
IPQoS configuration file. The procedure shows how to define flow accounting for the <literal>video</literal> class, which is introduced in <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and Define Traffic Classes</olink>. This
class selects streaming video traffic, which must be billed as part of a premium customer's
SLA. </para>
</tasksummary><taskprerequisites><para>The procedure assumes that you have an existing IPQoS configuration file with
already defined classes, filters, metering actions, if appropriate, and marking actions,
if appropriate. The steps continue building the <filename>/var/ipqos/Goldweb.qos</filename> file
from <olink targetptr="ipqos-policy-planning-ex-93" remap="internal">Example 34&#8211;1</olink>.</para>
</taskprerequisites><procedure><step id="ipqos-policy-planning-step-115"><para>Open the IPQoS configuration file,
and locate the end of the last <literal>action</literal> statement you defined.</para><para>For example, on the IPQoS-enabled server <literal>Goldweb,</literal> you would
start after the following <literal>markEF</literal> <literal>action</literal> statement
in <filename>/var/ipqos/Goldweb.qos</filename>.</para><screen>action {
    module dscpmk
    name markEF
    params {
        global_stats TRUE
        dscp_map{0-63:46}
        next_action acct
    }
}</screen>
</step><step id="ipqos-policy-planning-step-116"><para>Begin an <literal>action</literal> statement that calls flow accounting.</para><screen><userinput>action {
    module flowacct
    name acct</userinput></screen><variablelist><varlistentry><term><literal>module flowacct</literal></term><listitem><para>Invokes the flow-accounting module <command>flowacct</command>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name acct</literal></term><listitem><para>Gives the name <literal>acct</literal> to the <literal>action</literal> statement</para>
</listitem>
</varlistentry>
</variablelist>
</step><step id="ipqos-policy-planning-step-112"><para>Define a <literal>params</literal> clause to control accounting on the
traffic class.</para><screen><userinput>params {
        global_stats TRUE
        timer 10000
        timeout 10000
        max_limit 2048
        next_action continue
  </userinput>  }
}</screen><variablelist><varlistentry><term><literal>global_stats TRUE</literal></term><listitem><para>Enables statistics collection on the class <literal>video</literal>,
which selects streaming video packets.</para>
</listitem>
</varlistentry><varlistentry><term><literal>timer 10000</literal></term><listitem><para>Specifies the duration of the interval, in milliseconds, when the
flow table is scanned for timed-out flows. In this parameter, that interval is 10000
milliseconds. </para>
</listitem>
</varlistentry><varlistentry><term><literal>timeout 10000</literal></term><listitem><para>Specifies the minimum interval time out value. A flow &#8220;times
out&#8221; when packets for the flow are not seen during a time out interval. In this
parameter, packets time out after 10000 milliseconds.</para>
</listitem>
</varlistentry><varlistentry><term><literal>max_limit 2048</literal></term><listitem><para>Sets the maximum number of active flow records in the flow table for
this action instance.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action continue</literal></term><listitem><para>Indicates that no further processing is required on packets of the
traffic class <literal>video</literal>, and that these packets can return to the network
stream.</para>
</listitem>
</varlistentry>
</variablelist><para>The <literal>flowacct</literal> module gathers statistical information
on packet flows of a particular class until a specified <literal>timeout</literal> value
is reached.</para>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To configure per-hop behaviors on a router, refer to <olink targetptr="ipqos-policy-planning-136" remap="internal">How to Configure a Router on an IPQoS-Enabled Network</olink>.</para>
</listitem><listitem><para>To activate the IPQoS configuration file, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS Kernel Modules</olink>.</para>
</listitem><listitem><para>To create classes for traffic flows from applications, refer to <olink targetptr="ipqos-policy-planning-67" remap="internal">How to Configure the IPQoS Configuration File
for an Application Server</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task><task id="ipqos-policy-planning-114"><title>How to Create an IPQoS Configuration File
for a Best-Effort Web Server</title><tasksummary><para>The IPQoS configuration file for a best-effort web server differs slightly from
an IPQoS configuration file for a premium web server. As an example, the procedure
uses the configuration file from <olink targetptr="ipqos-policy-planning-ex-95" remap="internal">Example 34&#8211;2</olink>.</para>
</tasksummary><procedure><step id="ipqos-policy-planning-step-131"><para>Log in to the best-effort web server.</para>
</step><step id="ipqos-policy-planning-step-126"><para>Create a new IPQoS configuration file
with a <literal>.qos</literal> extension.</para><screen><userinput>fmt_vesion 1.0
action {
    module ipgpc
    name ipgpc.classify
    params {
        global_stats TRUE
   }</userinput></screen><para>The <filename>/var/ipqos/userweb.qos</filename> file must begin with the partial <literal>action</literal> statement to invoke the <literal>ipgpc</literal> classifier. In addition,
the <literal>action</literal> statement also has a params clause to turn on statistics
collection. For an explanation of this <literal>action</literal> statement, see <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and
Define Traffic Classes</olink>.</para>
</step><step id="ipqos-policy-planning-step-127"><para>Define a class that identifies traffic that is bound for the best-effort
web server.</para><screen><userinput>class {
        name userweb
        next_action markAF12
        enable_stats FALSE
    }</userinput></screen><variablelist><varlistentry><term><literal>name userweb</literal></term><listitem><para>Creates a class that is called <literal>userweb</literal> for forwarding
web traffic from users.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action markAF1</literal></term><listitem><para>Instructs the <command>ipgpc</command> module to pass packets of the <literal>userweb</literal> class to the <literal>markAF12</literal> <literal>action</literal> statement
after <command>ipgpc</command> completes processing. The <literal>markAF12</literal> <literal>action</literal> statement invokes the <literal>dscpmk</literal> marker.</para>
</listitem>
</varlistentry><varlistentry><term><literal>enable_stats FALSE</literal></term><listitem><para>Enables statistics collection for the <literal>userweb</literal> class.
However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>,
statistics collection for this class does not occur.</para>
</listitem>
</varlistentry>
</variablelist><para>For an explanation of the <literal>class</literal> clause task, see <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and Define Traffic Classes</olink>.</para>
</step><step id="ipqos-policy-planning-step-128"><para>Define a <literal>filter</literal> clause to select traffic flows for
the <literal>userweb</literal> class.</para><screen><userinput>   filter {
       name webout
       sport 80
       direction LOCAL_OUT
       class userweb
   }
}</userinput></screen><variablelist><varlistentry><term><literal>name webout</literal></term><listitem><para>Gives the name <literal>webout</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport 80</literal></term><listitem><para>Selects traffic with a source port of 80, the well-known port for
HTTP (web) traffic.</para>
</listitem>
</varlistentry><varlistentry><term><literal>direction LOCAL_OUT</literal></term><listitem><para>Further selects traffic that is outgoing from the local system.</para>
</listitem>
</varlistentry><varlistentry><term>class userweb</term><listitem><para>Identifies the class to which the filter belongs, in this instance,
class <literal>userweb</literal>.</para>
</listitem>
</varlistentry>
</variablelist><para>For an explanation of the <literal>filter</literal> clause task, see <olink targetptr="ipqos-policy-planning-33" remap="internal">How to Define Filters in the IPQoS Configuration
File</olink>.</para>
</step><step id="ipqos-policy-planning-step-132"><para>Begin the <literal>action</literal> statement
to invoke the <command>dscpmk</command> marker.</para><screen><userinput>action {
    module dscpmk
    name markAF12</userinput></screen><variablelist><varlistentry><term><literal>module dscpmk</literal></term><listitem><para>Invokes the marker module <command>dscpmk</command>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name markAF12</literal></term><listitem><para>Gives the name <literal>markAF12</literal> to the <literal>action</literal> statement.</para>
</listitem>
</varlistentry>
</variablelist><para>The previously defined class <literal>userweb</literal> includes a <literal>next_action markAF12</literal> statement. This statement sends traffic flows to the <literal>markAF12</literal> <literal>action</literal> statement after the classifier concludes
processing.</para>
</step><step id="ipqos-policy-planning-step-129"><para>Define parameters for the marker to use for processing the traffic flow.</para><screen><userinput>    params {
        global_stats FALSE
        dscp_map{0-63:12}
        next_action continue
    }
}</userinput></screen><variablelist><varlistentry><term><literal>global_stats FALSE</literal></term><listitem><para>Enables statistics collection for the <literal>markAF12</literal> marker <literal>action</literal> statement. However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>, statistics collection does not occur.</para>
</listitem>
</varlistentry><varlistentry><term><literal>dscp_map{0&#8211;63:12}</literal></term><listitem><para>Assigns a DSCP of <literal>12</literal> to the packet headers of the
traffic class <literal>userweb</literal>, which is currently being processed by the
marker. </para>
</listitem>
</varlistentry><varlistentry><term><literal></literal>next_action continue</term><listitem><para>Indicates that no further processing is required on packets of the
traffic class <literal>userweb</literal>, and that these packets can return to the
network stream.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of <literal>12</literal> instructs the marker to set all entries in
the <literal>dscp</literal> map to the decimal value 12 (binary 001100). This codepoint
indicates that packets of the <literal>userweb</literal> traffic class are subject
to the AF12 per-hop behavior. AF12 guarantees that all packets with the DSCP of <literal>12</literal> in the DS field receive a medium-drop, high-priority service.</para>
</step><step id="ipqos-policy-planning-step-791"><para>When you complete the IPQoS configuration
file, apply the configuration.</para>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To add classes and other configuration for traffic flows from applications,
refer to <olink targetptr="ipqos-policy-planning-67" remap="internal">How to Configure the IPQoS Configuration
File for an Application Server</olink>.</para>
</listitem><listitem><para>To configure per-hop behaviors on a router, refer to <olink targetptr="ipqos-policy-planning-136" remap="internal">How to Configure a Router on an IPQoS-Enabled Network</olink>.</para>
</listitem><listitem><para>To activate your IPQoS configuration file, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS Kernel Modules</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task>
</sect1><sect1 id="ipqos-policy-planning-5"><title>Creating an IPQoS Configuration File for
an Application Server</title><para>This section explains how to create a configuration file for an application
server that provides major applications to customers. The procedure uses as its example
the <literal>BigAPPS</literal> server from <olink targetptr="ipqos-config-planning-fig-44" remap="internal">Figure 33&#8211;4</olink>.</para><para>The following configuration file defines IPQoS activities for the <literal>BigAPPS</literal> server. This server hosts FTP, electronic mail (SMTP), and network
news (NNTP) for customers.</para><example id="ipqos-policy-planning-ex-96"><title>Sample IPQoS Configuration File for
an Application Server</title><programlisting>fmt_version 1.0

action {
    module ipgpc
    name ipgpc.classify
    params {
        global_stats TRUE
    }
    class {
        name smtp
        enable_stats FALSE
        next_action markAF13
    }
    class {
        name news
        next_action markAF21
    }
    class {
        name ftp
        next_action meterftp
    }
    filter {
        name smtpout
        sport smtp
        class smtp
    }
    filter {
        name newsout
        sport nntp
        class news
    }
    filter {
        name ftpout
        sport ftp
        class ftp
    }
   filter {
        name ftpdata
        sport ftp-data
        class ftp
    }
}
action {
    module dscpmk
    name markAF13
    params {
        global_stats FALSE
        dscp_map{0-63:14}
        next_action continue
    }
}
action {
    module dscpmk
    name markAF21
    params {
        global_stats FALSE
        dscp_map{0-63:18}
        next_action continue
    }
}
action {
    module tokenmt
    name meterftp
    params {
        committed_rate 50000000
        committed_burst 50000000
        red_action_name AF31
        green_action_name markAF22
        global_stats TRUE
    }
}
action {
    module dscpmk
    name markAF31
    params {
        global_stats TRUE
        dscp_map{0-63:26}
        next_action continue
    }
}
action {
    module dscpmk
    name markAF22
    params {
        global_stats TRUE
        dscp_map{0-63:20}
        next_action continue
    }
}</programlisting>
</example><task id="ipqos-policy-planning-67"><title>How to Configure the IPQoS Configuration
File for an Application Server</title><procedure><step id="ipqos-policy-planning-step-133"><para>Log in to the IPQoS-enabled application
server, and create a new IPQoS configuration file with a <literal>.qos</literal> extension.</para><para>For example, you would create the <filename>/var/ipqos/BigAPPS.qos</filename> file
for the application server. Begin with the following required phrases to start the <literal>action</literal> statement that invokes the <literal>ipgpc</literal> classifier:</para><screen><userinput>fmt_version 1.0

action {
    module ipgpc
    name ipgpc.classify
    params {
        global_stats TRUE
    }    </userinput></screen><para>For an explanation of the opening <literal>action</literal> statement, refer
to <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration
File and Define Traffic Classes</olink>.</para>
</step><step id="ipqos-policy-planning-step-134"><para>Create classes to select traffic from three applications on the BigAPPS
server.</para><para>Add the class definitions after the opening <literal>action</literal> statement.</para><screen><userinput>    class {
        name smtp
        enable_stats FALSE
        next_action markAF13
    }
    class {
        name news
        next_action markAF21
    }
    class {
        name ftp
        enable_stats TRUE
        next_action meterftp
    }</userinput>       </screen><variablelist><varlistentry><term><literal>name smtp</literal></term><listitem><para>Creates a class that is called <literal>smtp</literal>, which includes
email traffic flows to be handled by the SMTP application</para>
</listitem>
</varlistentry><varlistentry><term><literal>enable_stats FALSE</literal></term><listitem><para>Enables statistics collection for the <literal>smtp</literal> class.
However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>,
statistics for this class are not taken.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action markAF13</literal></term><listitem><para>Instructs the <command>ipgpc</command> module to pass packets of the <literal>smtp</literal> class to the <literal>markAF13</literal> <literal>action</literal> statement
after <command>ipgpc</command> completes processing. </para>
</listitem>
</varlistentry><varlistentry><term><literal>name news</literal></term><listitem><para>Creates a class that is called <literal>news</literal>, which includes
network news traffic flows to be handled by the NNTP application.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action markAF21</literal></term><listitem><para>Instructs the <command>ipgpc</command> module to pass packets of the <literal>news</literal> class to the <literal>markAF21</literal> action statement after <command>ipgpc</command> completes processing. </para>
</listitem>
</varlistentry><varlistentry><term><literal>name ftp</literal></term><listitem><para>Creates a class that is called <literal>ftp</literal>, which handles
outgoing traffic that is handled by the FTP application.</para>
</listitem>
</varlistentry><varlistentry><term><literal>enable_stats TRUE</literal></term><listitem><para>Enables statistics collection for the <literal>ftp</literal> class.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action meterftp</literal></term><listitem><para>Instructs the <command>ipgpc</command> module to pass packets of the <literal>ftp</literal> class to the <literal>meterftp</literal> <literal>action</literal> statement
after <command>ipgpc</command> completes processing. </para>
</listitem>
</varlistentry>
</variablelist><para>For more information about defining classes, refer to <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and Define Traffic Classes</olink>.</para>
</step><step id="ipqos-policy-planning-step-135"><para>Define <literal>filter</literal> clauses to select traffic of the classes
defined in Step 2.</para><screen><userinput>    filter {
        name smtpout
        sport smtp
        class smtp
    }
    filter {
        name newsout
        sport nntp
        class news
    }
        filter {
        name ftpout
        sport ftp
        class ftp
    }
        filter {
        name ftpdata
        sport ftp-data
        class ftp
    }
}</userinput></screen><variablelist><varlistentry><term><literal>name smtpout</literal></term><listitem><para>Gives the name <literal>smtpout</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport smtp</literal></term><listitem><para>Selects traffic with a source port of 25, the well-known port for
the <command>sendmail</command> (SMTP) application.</para>
</listitem>
</varlistentry><varlistentry><term><literal>class smtp</literal></term><listitem><para>Identifies the class to which the filter belongs, in this instance,
class <literal>smtp</literal>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name newsout</literal></term><listitem><para>Gives the name <literal>newsout</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport nntp</literal></term><listitem><para>Selects traffic with a source port name of <literal>nntp</literal>,
the well-known port name for the network news (NNTP) application.</para>
</listitem>
</varlistentry><varlistentry><term><literal>class news</literal></term><listitem><para>Identifies the class to which the filter belongs, in this instance,
class <literal>news</literal>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name ftpout</literal></term><listitem><para>Gives the name <literal>ftpout</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport ftp</literal></term><listitem><para>Selects control data with a source port of 21, the well-known port
number for FTP traffic.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name ftpdata</literal></term><listitem><para>Gives the name <literal>ftpdata</literal> to the filter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>sport ftp-data</literal></term><listitem><para>Selects traffic with a source port of 20, the well-known port number
for FTP data traffic.</para>
</listitem>
</varlistentry><varlistentry><term><literal>class ftp</literal></term><listitem><para>Identifies the class to which the <literal>ftpout</literal> and <literal>ftpdata</literal> filters belong, in this instance <literal>ftp</literal>.</para>
</listitem>
</varlistentry>
</variablelist>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To define filters, refer to <olink targetptr="ipqos-policy-planning-33" remap="internal">How to Define Filters in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To define forwarding behaviors for application traffic, refer to <olink targetptr="ipqos-policy-planning-140" remap="internal">How to Configure Forwarding for Application
Traffic in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To configure flow control by using the metering modules, refer to <olink targetptr="ipqos-policy-planning-144" remap="internal">How to Configure Flow Control in the IPQoS Configuration
File</olink>.</para>
</listitem><listitem><para>To configure flow accounting, refer to <olink targetptr="ipqos-policy-planning-110" remap="internal">How to Enable Accounting for a Class in the IPQoS Configuration File</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task><task id="ipqos-policy-planning-140"><title>How to Configure Forwarding for Application
Traffic in the IPQoS Configuration File</title><tasksummary><para>The next procedure shows how to configure forwarding for application traffic.
In the procedure, you define per-hop behaviors for application traffic classes that
might have lower precedence than other traffic on a network. The steps continue building
the <filename>/var/ipqos/BigAPPS.qos</filename> file in <olink targetptr="ipqos-policy-planning-ex-96" remap="internal">Example 34&#8211;3</olink>.</para>
</tasksummary><taskprerequisites><para>The procedure assumes that you have an existing IPQoS configuration file with
already-defined classes and already-defined filters for the applications to be marked. </para>
</taskprerequisites><procedure><step id="ipqos-policy-planning-step-150"><para>Open the IPQoS configuration file
that you have created for the application server, and locate the end of the last <literal>filter</literal> clause. </para><para>In the <filename>/var/ipqos/BigAPPS.qos</filename> file,
the last filter is the following:</para><screen> filter {
        name ftpdata
        sport ftp-data
        class ftp
    }
}</screen>
</step><step id="ipqos-policy-planning-step-142"><para>Invoke the marker as follows:</para><screen><userinput>action {
    module dscpmk
    name markAF13
    </userinput></screen><variablelist><varlistentry><term><literal>module dscpmk</literal></term><listitem><para>Invokes the marker module <command>dscpmk</command>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name markAF13</literal></term><listitem><para>Gives the name <literal>markAF13</literal> to the <literal>action</literal> statement.</para>
</listitem>
</varlistentry>
</variablelist>
</step><step id="ipqos-policy-planning-step-151"><para>Define the per-hop behavior to be
marked on electronic mail traffic flows.</para><screen><userinput>    params {
        global_stats FALSE
        dscp_map{0-63:14}
        next_action continue
    }
}</userinput></screen><variablelist><varlistentry><term><literal>global_stats FALSE</literal></term><listitem><para>Enables statistics collection for the <literal>markAF13</literal> marker <literal>action</literal> statement. However, because the value of <literal>enable_stats</literal> is <literal>FALSE</literal>, statistics are not collected.</para>
</listitem>
</varlistentry><varlistentry><term><literal>dscp_map{0&#8211;63:14}</literal></term><listitem><para>Assigns a DSCP of <literal>14</literal> to the packet headers of the
traffic class <literal>smtp</literal>, which is currently being processed by the marker.</para>
</listitem>
</varlistentry><varlistentry><term></term><term><literal>next_action continue</literal></term><listitem><para>Indicates that no further processing is required on packets of the
traffic class <literal>smtp</literal>. These packets can then return to the network
stream.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of <literal>14</literal> tells the marker to set all entries in the <literal>dscp</literal> map to the decimal value 14 (binary 001110). The DSCP of <literal>14</literal> sets the AF13 per-hop behavior. The marker marks packets of the <literal>smtp</literal> traffic class with the DSCP of <literal>14</literal> in the DS field. </para><para>AF13 assigns all packets with a DSCP of <literal>14</literal> to a high-drop
precedence. However, because AF13 also assures a Class 1 priority, the router still
guarantees outgoing email traffic a high priority in its queue. For a table of possible
AF codepoints, refer to <olink targetptr="ipqos-reference-tbl-16" remap="internal">Table 37&#8211;2</olink>.</para>
</step><step id="ipqos-policy-planning-step-143"><para>Add a marker <literal>action</literal> statement
to define a per-hop behavior for network news traffic:</para><screen><userinput>action {
    module dscpmk
    name markAF21
    params {
        global_stats FALSE
        dscp_map{0-63:18}
        next_action continue
    }
}</userinput></screen><variablelist><varlistentry><term><literal>name markAF21</literal></term><listitem><para>Gives the name <literal>markAF21</literal> to the <literal>action</literal> statement.</para>
</listitem>
</varlistentry><varlistentry><term><literal>dscp_map{0&#8211;63:18}</literal></term><listitem><para>Assigns a DSCP of <literal>18</literal> to the packet headers of the
traffic class <literal>nntp</literal>, which is currently being processed by the marker.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of <literal>18</literal> tells the marker to set all entries in the <literal>dscp</literal> map to the decimal value 18 (binary 010010). The DSCP of <literal>18</literal> sets the AF21 per-hop behavior. The marker marks packets of the <literal>news</literal> traffic class with the DSCP of <literal>18</literal> in the DS field. </para><para>AF21 assures that all packets with a DSCP of <literal>18</literal> receive
a low-drop precedence, but with only Class 2 priority. Thus, the possibility of network
news traffic being dropped is low. </para>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To add configuration information for web servers, refer to <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and
Define Traffic Classes</olink>.</para>
</listitem><listitem><para>To configure flow control by using the metering modules, refer to <olink targetptr="ipqos-policy-planning-144" remap="internal">How to Configure Flow Control in the IPQoS Configuration
File</olink>.</para>
</listitem><listitem><para>To configure flow accounting, refer to <olink targetptr="ipqos-policy-planning-110" remap="internal">How to Enable Accounting for a Class in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To configure forwarding behaviors on a router, refer to <olink targetptr="ipqos-policy-planning-136" remap="internal">How to Configure a Router on an IPQoS-Enabled Network</olink>.</para>
</listitem><listitem><para>To activate the IPQoS configuration file, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS Kernel Modules</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task><task id="ipqos-policy-planning-144"><title>How to Configure Flow Control in the IPQoS
Configuration File</title><tasksummary><para>To control the rate at which a particular traffic flow is released onto the
network, you must define parameters for the meter. You can use either of the two meter
modules, <command>tokenmt</command> or <command>tswtclmt</command>, in the IPQoS configuration
file. </para><para>The next procedure continues to build the IPQoS configuration file for the application
server in <olink targetptr="ipqos-policy-planning-ex-96" remap="internal">Example 34&#8211;3</olink>.
In the procedure, you configure not only the meter but also two marker actions that
are called within the meter <literal>action</literal> statement.</para>
</tasksummary><taskprerequisites><para>The steps assume that you have already defined a class and a filter for the
application to be flow-controlled. </para>
</taskprerequisites><procedure><step id="ipqos-policy-planning-step-152"><para>Open the IPQoS configuration file
that you have created for the applications server.</para><para>In the <filename>/var/ipqos/BigAPPS.qos</filename> file, you begin after the following marker action:</para><screen>action {
    module dscpmk
    name markAF21
    params {
        global_stats FALSE
        dscp_map{0-63:18}
        next_action continue
    }
}</screen>
</step><step id="ipqos-policy-planning-step-76"><para>Create a meter <literal>action</literal> statement to flow-control traffic
of the <literal>ftp</literal> class.</para><screen><userinput>action {
    module tokenmt
    name meterftp
    </userinput>        </screen><variablelist><varlistentry><term><literal>module tokenmt</literal></term><listitem><para>Invokes the<command>tokenmt</command> meter.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name meterftp</literal></term><listitem><para>Gives the name <literal>meterftp</literal> to the <literal>action</literal> statement.</para>
</listitem>
</varlistentry>
</variablelist>
</step><step id="ipqos-policy-planning-step-77"><para>Add parameters to configure the meter's rate.</para><screen><userinput>params {
       committed_rate 50000000
       committed_burst 50000000
  </userinput></screen><variablelist><varlistentry><term><literal>committed_rate 50000000</literal></term><listitem><para>Assigns a transmission rate of 50,000,000 bps to traffic of the <literal>ftp</literal> class.</para>
</listitem>
</varlistentry><varlistentry><term><literal>committed_burst 50000000</literal></term><listitem><para>Commits a burst size of 50,000,000 bits to traffic of the <literal>ftp</literal> class.</para>
</listitem>
</varlistentry>
</variablelist><para>For an explanation of <command>tokenmt</command> parameters, refer to <olink targetptr="ipqos-reference-13" remap="internal">Configuring tokenmt as a Two-Rate Meter</olink>.</para>
</step><step id="ipqos-policy-planning-step-78"><para>Add parameters to configure traffic
conformance precedences:</para><screen><userinput>    red_action markAF31
    green_action_name markAF22
    global_stats TRUE
    }
}</userinput></screen><variablelist><varlistentry><term><literal>red_action_name markAF31</literal></term><listitem><para>Indicates that when the traffic flow of the <literal>ftp</literal> class
exceeds the committed rate, packets are sent to the <literal>markAF31</literal> marker <literal>action</literal> statement.</para>
</listitem>
</varlistentry><varlistentry><term><literal>green_action_name markAF22</literal></term><listitem><para>Indicates that when traffic flows of class <literal>ftp</literal> conform
to the committed rate, packets are sent to the <literal>markAF22</literal> action
statement.</para>
</listitem>
</varlistentry><varlistentry><term><literal>global_stats TRUE</literal></term><listitem><para>Enables metering statistics for the <literal>ftp</literal> class.</para>
</listitem>
</varlistentry>
</variablelist><para>For more information about traffic conformance, see <olink targetptr="ipqos-reference-8" remap="internal">Meter Module</olink>.</para>
</step><step id="ipqos-policy-planning-step-790"><para>Add a marker <literal>action</literal> statement to assign a per-hop behavior
to nonconformant traffic flows of class <literal>ftp</literal>.</para><screen><userinput>action {
    module dscpmk
    name markAF31
    params {
        global_stats TRUE
        dscp_map{0-63:26}
        next_action continue
    }
}</userinput></screen><variablelist><varlistentry><term><literal>module dscpmk</literal></term><listitem><para>Invokes the marker module <command>dscpmk</command>.</para>
</listitem>
</varlistentry><varlistentry><term><literal>name markAF31</literal></term><listitem><para>Gives the name <literal>markAF31</literal> to the <literal>action</literal> statement. </para>
</listitem>
</varlistentry><varlistentry><term><literal>global_stats TRUE</literal></term><listitem><para>Enables statistics for the <literal>ftp</literal> class. </para>
</listitem>
</varlistentry><varlistentry><term><literal>dscp_map{0&#8211;63:26}</literal></term><listitem><para>Assigns a DSCP of <literal>26</literal> to the packet headers of the
traffic class <literal>ftp</literal> whenever this traffic exceeds the committed rate.</para>
</listitem>
</varlistentry><varlistentry><term><literal>next_action continue</literal></term><listitem><para>Indicates that no further processing is required on packets of the
traffic class <literal>ftp</literal>. Then these packets can return to the network
stream.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of <literal>26</literal> instructs the marker to set all entries in
the <literal>dscp</literal> map to the decimal value 26 (binary 011010). The DSCP
of <literal>26</literal> sets the AF31 per-hop behavior. The marker marks packets
of the <literal>ftp</literal> traffic class with the DSCP of <literal>26</literal> in
the DS field. </para><para>AF31 assures that all packets with a DSCP of <literal>26</literal> receive a low-drop precedence, but with only Class 3 priority. Therefore,
the possibility of nonconformant FTP traffic being dropped is low. For a table of
possible AF codepoints, refer to <olink targetptr="ipqos-reference-tbl-16" remap="internal">Table 37&#8211;2</olink>.</para>
</step><step id="ipqos-policy-planning-step-145"><para>Add a marker <literal>action</literal> statement to assign a per-hop behavior
to <command>ftp</command> traffic flows  <literal></literal> that conform to the committed
rate.</para><screen><userinput>action {
    module dscpmk
    name markAF22
    params {
        global_stats TRUE
        dscp_map{0-63:20}
        next_action continue
    }
}</userinput></screen><variablelist><varlistentry><term><literal>name markAF22</literal></term><listitem><para>Gives the name <literal>markAF22</literal> to the <literal>marker</literal> action.</para>
</listitem>
</varlistentry><varlistentry><term><literal>dscp_map{0&#8211;63:20}</literal></term><listitem><para>Assigns a DSCP of <literal>20</literal> to the packet headers of the
traffic class <literal>ftp</literal> whenever <literal>ftp</literal> traffic conforms
to its configured rate.</para>
</listitem>
</varlistentry>
</variablelist><para>The DSCP of 20 tells the marker to set all entries in the <literal>dscp</literal> map
to the decimal value 20 (binary 010100). The DSCP of <literal>20</literal> sets the
AF22 per-hop behavior. The marker marks packets of the <literal>ftp</literal> traffic
class with the DSCP of <literal>20</literal> in the DS field. </para><para>AF22 assures
that all packets with a DSCP of <literal>20</literal> receive a medium-drop precedence
with Class 2 priority. Therefore, conformant FTP traffic is assured a medium-drop
precedence among flows that are simultaneously released by the IPQoS system. However,
the router gives a higher forwarding priority to traffic classes with a Class 1 medium-drop
precedence mark or higher. For a table of possible AF codepoints, refer to <olink targetptr="ipqos-reference-tbl-16" remap="internal">Table 37&#8211;2</olink>.</para>
</step><step id="ipqos-policy-planning-step-313"><para>Add the DSCPs that you have created
for the application server to the appropriate files on the Diffserv router.</para>
</step>
</procedure><taskrelated role="see-also"><itemizedlist><listitem><para>To activate the IPQoS configuration file, refer to <olink targetptr="ipqos-maint-5" remap="internal">How to Apply a New Configuration to the IPQoS Kernel Modules</olink>.</para>
</listitem><listitem><para>To add configuration information for web servers, refer to <olink targetptr="ipqos-policy-planning-32" remap="internal">How to Create the IPQoS Configuration File and
Define Traffic Classes</olink>.</para>
</listitem><listitem><para>To configure flow accounting, refer to <olink targetptr="ipqos-policy-planning-110" remap="internal">How to Enable Accounting for a Class in the IPQoS Configuration File</olink>.</para>
</listitem><listitem><para>To configure forwarding behaviors on a router, refer to <olink targetptr="ipqos-policy-planning-136" remap="internal">How to Configure a Router on an IPQoS-Enabled Network</olink>.</para>
</listitem>
</itemizedlist>
</taskrelated>
</task>
</sect1><sect1 id="ipqos-policy-planning-137"><title>Providing Differentiated Services on
a Router</title><para>To provide true differentiated services, you must include a Diffserv-aware
router in your network topology, as described in <olink targetptr="ipqos-config-planning-3" remap="internal">Hardware Strategies for the Diffserv Network</olink>. The actual steps for configuring
Diffserv on a router and updating that router's files are outside the scope of this
guide.</para><para>This section gives general steps for coordinating the forwarding information
among various IPQoS-enabled systems on the network and the Diffserv router. </para><task id="ipqos-policy-planning-136"><title>How to Configure a Router on an IPQoS-Enabled
Network</title><tasksummary><para>The next procedure uses as its example the topology in <olink targetptr="ipqos-config-planning-fig-44" remap="internal">Figure 33&#8211;4</olink>.</para>
</tasksummary><taskprerequisites><para>The next procedure assumes that you have already configured the IPQoS systems
on your network by performing the previous tasks in this chapter.</para>
</taskprerequisites><procedure><step id="ipqos-policy-planning-step-146"><para>Review the configuration files for
all IPQoS-enabled systems on your network.</para>
</step><step id="ipqos-policy-planning-step-147"><para>Identify each codepoint that is used
in the QoS various policies.</para><para>List the codepoints, and the systems and classes, to which the codepoints
apply. The next table can illustrate areas where you might have used the same codepoint.
This practice is acceptable. However, you should provide other criteria in the IPQoS
configuration file, such as a <literal>precedence</literal> selector, to determine
the precedence of identically marked classes.</para><para>For example, for the sample
network that is used in the procedures throughout this chapter, you might construct
the following codepoint table.</para><informaltable frame="topbot" remap="IPQOS-POLICY-PLANNING-TBL-149"><tgroup cols="4" colsep="0" rowsep="0"><colspec colname="colspec4" colwidth="25*"/><colspec colname="colspec5" colwidth="25*"/><colspec colname="colspec6" colwidth="25*"/><colspec colname="colspec7" colwidth="25*"/><thead><row rowsep="1"><entry><para>System</para>
</entry><entry><para>Class</para>
</entry><entry><para>PHB</para>
</entry><entry><para>DS Codepoint</para>
</entry>
</row>
</thead><tbody><row><entry><para><literal>Goldweb</literal></para>
</entry><entry><para><literal>video</literal></para>
</entry><entry><para>EF</para>
</entry><entry><para>46 (101110)</para>
</entry>
</row><row><entry><para><literal>Goldweb</literal></para>
</entry><entry><para><literal>goldweb</literal></para>
</entry><entry><para>AF11</para>
</entry><entry><para>10 (001010)</para>
</entry>
</row><row><entry><para><literal>Userweb</literal></para>
</entry><entry><para><literal>webout</literal></para>
</entry><entry><para>AF12</para>
</entry><entry><para>12 ( 001100)</para>
</entry>
</row><row><entry><para><literal>BigAPPS</literal></para>
</entry><entry><para><literal>smtp</literal></para>
</entry><entry><para>AF13</para>
</entry><entry><para>14 ( 001110)</para>
</entry>
</row><row><entry><para><literal>BigAPPS</literal></para>
</entry><entry><para><literal>news</literal></para>
</entry><entry><para>AF18</para>
</entry><entry><para>18 ( 010010)</para>
</entry>
</row><row><entry><para><literal>BigAPPS</literal></para>
</entry><entry><para><command>ftp</command> conformant traffic</para>
</entry><entry><para>AF22</para>
</entry><entry><para>20 ( 010100)</para>
</entry>
</row><row><entry><para><literal>BigAPPS</literal></para>
</entry><entry><para><command>ftp</command> nonconformant traffic</para>
</entry><entry><para>AF31</para>
</entry><entry><para>26 ( 011010)</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</step><step id="ipqos-policy-planning-step-153"><para>Add the codepoints from your network's
IPQoS configuration files to the appropriate files on the Diffserv router.</para><para>The codepoints that you supply should help to configure the router's Diffserv
scheduling mechanism. Refer to the router manufacturer's documentation and web sites
for instructions.</para>
</step>
</procedure>
</task>
</sect1>
</chapter>