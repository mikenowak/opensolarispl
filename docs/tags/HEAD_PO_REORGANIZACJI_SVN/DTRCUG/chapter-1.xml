<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML//EN" "docbook.dtd"[
	<!ENTITY % xinclude SYSTEM "xinclude.mod">
	%xinclude;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="gbwaz">



<title>Introduction</title>
<toc>
<para>DTrace is a comprehensive dynamic tracing facility that is built into
Solaris. DTrace can be used by administrators and developers, and can safely
be used on live production systems. DTrace enables you to examine the behavior
of user programs as well as the behavior of the operating system. Users of
DTrace can create custom programs with the D scripting language. Custom programs
provide the ability to dynamically instrument the system. Custom programs
provide immediate, concise answers to specific questions about the behavior
of particular applications.</para>
</toc>
<sect1 xml:id="gbxxq">
<title>DTrace Capabilities</title>
<para>The DTrace framework provides instrumentation points that are called <emphasis>probes</emphasis>. A DTrace user can use a probe to record and display relevant
information about a kernel or user process. Each DTrace probe is activated
by a specific behavior. This probe activation is referred to as <emphasis>firing</emphasis>.
As an example, consider a probe that fires on entry into an arbitrary kernel
function. This example probe can display the following information:</para>
<itemizedlist>
<listitem>
<para>Any argument that is passed to the function</para>
</listitem>
<listitem>
<para>Any global variable in the kernel</para>
</listitem>
<listitem>
<para>A timestamp that indicates when the function was called</para>
</listitem>
<listitem>
<para>A stack trace that indicates the section of code that called
the function</para>
</listitem>
<listitem>
<para>The process that was running at the time the function was
called</para>
</listitem>
<listitem>
<para>The thread that made the function call</para>
</listitem>
</itemizedlist>
<para>When a probe fires, you can specify a particular <emphasis>action</emphasis> for
DTrace to take. A DTrace action usually records an interesting aspect of system
behavior, such as a timestamp or a function argument.</para>
<para>Probes are implemented by <emphasis>providers</emphasis>. A probe provider
is a kernel module that enables a given probe to fire. For example, the function
boundary tracing provider <literal>fbt</literal> provides entry and return
probes for almost every function in every kernel module.</para>
<para>DTrace has significant data management capabilities. These capabilities
enable DTrace users to prune the data reported by probes, avoiding the overhead
involved in generating and then filtering unwanted data. DTrace also provides
mechanisms for tracing during the boot process and for retrieving data from
a kernel crash dump. All of the instrumentation in DTrace is dynamic. Probes
are enabled discretely at the time that the probes are used, and inactive
probes present no instrumented code.</para>
<para>A DTrace <emphasis>consumer</emphasis> is any process that interacts
with the DTrace framework. While <olink remap="external" targetdoc="816-5166" targetptr="dtrace-1m">
<citerefentry>
<refentrytitle>dtrace</refentrytitle>
<manvolnum>
1M
</manvolnum>
</citerefentry>
</olink> is the primary DTrace consumer,
other consumers exist. These additional consumers mostly consist of new versions
of existing utilities such as <olink remap="external" targetdoc="816-5166" targetptr="lockstat-1m">
<citerefentry>
<refentrytitle>lockstat</refentrytitle>
<manvolnum>
1M
</manvolnum>
</citerefentry>
</olink>.
The DTrace framework has no limit on the number of concurrent consumers.</para>
<para>The behavior of DTrace can be modified with the use of scripts that
are written in the D language, which is structured similarly to C. The D language
provides access to kernel C types and kernel static and kernel global variables.
The D language supports ANSI C operators.</para>
</sect1>
<sect1 xml:id="gcfpv">
<title>Architecture overview</title>
<para>The DTrace facility consists of the following components:</para>
<itemizedlist>
<listitem>
<para>User level consumer programs such as <command>dtrace</command>
</para>
</listitem>
<listitem>
<para>Providers, packaged as kernel modules, that provide probes
to gather tracing data</para>
</listitem>
<listitem>
<para>A library interface that consumer programs use to access the
DTrace facility through the <olink remap="external" targetdoc="816-5177" targetptr="dtrace-7d">
<citerefentry>
<refentrytitle>dtrace</refentrytitle>
<manvolnum>
7D
</manvolnum>
</citerefentry>
</olink> kernel
driver</para>
</listitem>
</itemizedlist>
<sect2 xml:id="gcbxv">
<title>DTrace Providers</title>
<para>A provider represents a methodology for instrumenting the system. Providers
make probes available to the DTrace framework. DTrace sends information to
a provider regarding when to enable a probe. When an enabled probe fires,
the provider transfers control to DTrace.</para>
<para>Providers are packaged as a set of kernel modules. Each module performs
a particular kind of instrumentation to create probes. When you use DTrace,
each provider has the ability to publish the probes it can provide to the
DTrace framework. You can enable and bind tracing actions to any of the published
probes.</para>
<para>Some providers have the capability to create new probes based on the
user's tracing requests.</para>
</sect2>
<sect2 xml:id="gcbzc">
<title>DTrace Probes</title>
<para>A probe has the following attributes:</para>
<itemizedlist>
<listitem>
<para>It is made available by a <emphasis>provider</emphasis>
</para>
</listitem>
<listitem>
<para>It identifies the <emphasis>module</emphasis> and the <emphasis>function</emphasis> that it instruments</para>
</listitem>
<listitem>
<para>It has a <emphasis>name</emphasis>
</para>
</listitem>
</itemizedlist>
<para>These four attributes define a 4–tuple that serves as a unique
identifier for each probe, in the format <emphasis>provider:module:function:name</emphasis>.
Each probe also has a unique integer identifier.</para>
</sect2>
<sect2 xml:id="gcgkn">
<title>DTrace Predicates</title>
<para>
<indexterm xml:id="indexterm-1">
<primary>predicates</primary>
</indexterm>Predicates are expressions that are enclosed in slashes <literal>/
/</literal>. Predicates  are evaluated at probe firing time to determine whether
the associated actions should be executed.  Predicates are the primary conditional
construct used for building more complex control flow in a D program.  You
can omit the predicate section of the probe clause entirely for any probe.
If the predicate section is omitted, the actions are always executed when
the probe fires.</para>
<para>Predicate expressions can use any of the previously described D operators.
Predicate expressions refer to D data objects such as variables and constants.
The predicate expression must evaluate to a value of integer or pointer type.
As with all D expressions, a zero value is interpreted as false and any non-zero
value is interpreted as true.</para>
</sect2>
<sect2 xml:id="gcdxn">
<title>DTrace Actions</title>
<para>Actions are user-programmable statements that the DTrace virtual machine
executes within the kernel. Actions have the following properties:</para>
<itemizedlist>
<listitem>
<para>Actions are taken when a probe fires</para>
</listitem>
<listitem>
<para>Actions are completely programmable in the D scripting language</para>
</listitem>
<listitem>
<para>Most actions record a specified system state</para>
</listitem>
<listitem>
<para>An action can change the state of the system in a precisely
described way. Such actions are called <emphasis>destructive actions</emphasis>.
Destructive actions are not allowed by default.</para>
</listitem>
<listitem>
<para>Many actions use expressions in the D scripting language</para>
</listitem>
</itemizedlist>
</sect2>
<sect2 xml:id="gcbzh">
<title>D Scripting Language</title>
<para>You can invoke the DTrace framework directly from the command line with
the <command>dtrace</command> command for simple functions. To use DTrace
to perform more complex functions, write a script in the D scripting language.
Use the <literal>-s</literal> option to load a specified script for DTrace
to use. See <olink remap="external" targetdoc="chapter-3.xml" targetptr="gbxwl">Chapter 3, Scripting With the D Language</olink> for information about using the D scripting language.</para>
</sect2>
</sect1>
</chapter>
